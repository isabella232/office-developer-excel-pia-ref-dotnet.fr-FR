<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3799dd3aab76ef91457248bfb93a39319ab94831a31142a4195f749f0f13c96" /><Meta Name="ms.sourcegitcommit" Value="daf501296516d104cf396246ac0d336adfeffd0d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/06/2021" /><Meta Name="ms.locfileid" Value="54511876" /></Metadata><TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Utilisé comme conteneur pour les Excel de feuille de calcul qui peuvent être appelées à partir Visual Basic.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Réservé à une utilisation interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Date d'émission - Date d'émission de la sécurité.</param>
        <param name="Arg2">Principal - Date principale de la sécurité.</param>
        <param name="Arg3">Règlement - Date de règlement de la sécurité.</param>
        <param name="Arg4">Taux - Taux de coupon annuel de la sécurité.</param>
        <param name="Arg5">Val nominale, la valeur nominale de Sécurité.</param>
        <param name="Arg6">Fréquence - Nombre de coupons payés par an.</param>
        <param name="Arg7">Base - Type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie l'intérêt couru non échu d'un titre dont l'intérêt est perçu périodiquement.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <para>Le tableau suivant décrit les valeurs qui peuvent être utilisées pour <paramref name="Arg5" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Date d'émission du titre.</param>
        <param name="Arg2">Date d'échéance du titre.</param>
        <param name="Arg3">Taux de coupon annuel du titre.</param>
        <param name="Arg4">Valeur nominale du titre. Si vous l'omettez, ACCRINTM utilise 1 000.</param>
        <param name="Arg5">Type de base de décompte des jours à utiliser.</param>
        <summary>Cette méthode renvoie l'intérêt couru non échu d'un titre dont l'intérêt est perçu à l'échéance.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <para>Le tableau suivant décrit les valeurs qui peuvent être utilisées pour <paramref name="Arg5" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>La liste suivante contient des informations à connaître lors de l’utilisation d’ACCRINTM :</para>
          <list type="bullet">
            <item>
              <description>Microsoft Excel stocke les dates sous forme de numéros de série séquentiels afin qu'elles puissent être utilisées dans des calculs. Par défaut, le 1er janvier 1900 correspond au numéro 1, tandis que le 1er janvier 2008 correspond au numéro de série 39448, car c'est le 39 448ème jour après le 1er janvier 1900.</description>
            </item>
            <item>
              <description>La date d'émission, la date d'échéance et la base sont tronquées de manière à utiliser des entiers.</description>
            </item>
            <item>
              <description>Si la date d'émission ou d'échéance n'est pas valide, ACCRINTM produit une erreur.</description>
            </item>
            <item>
              <description>Si le taux ≤ 0 ou si la valeur nominale ≤ 0, ACCRINTM produit une erreur.</description>
            </item>
            <item>
              <description>Si la &lt; base 0 ou la base &gt; 4, ACCRINTM génère une erreur. </description>
            </item>
            <item>
              <description>Si la date d'émission ≥ la date d'échéance, ACCRINTM produit une erreur.</description>
            </item>
            <item>
              <description>ACCRINTM est calculé comme suit : </description>
            </item>
          </list>
          <para>où :</para>
          <para>A = Nombre de jours cumulés comptés en fonction d’une base mensuelle. Pour les intérêts à l’échéance, le nombre de jours entre la date d’émission et la date d’échéance est utilisé.</para>
          <para>D = Base annuelle annuelle.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le cosinus de l'angle que vous souhaitez obtenir et doit être compris entre -1 et 1.</param>
        <summary>Renvoie l'arccosinus, ou le cosinus inverse, d'un nombre. L’arccosine est l’angle dont le cosin est <paramref name="Arg1" /> . L'angle renvoyé est exprimé en radians, de 0 (zéro) à pi.</summary>
        <returns>To be added.</returns>
        <remarks><para>Pour convertir le résultat en degrés, multipliez-le par 180/PI() ou utilisez la méthode Degrees.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tout nombre réel supérieur ou égal à 1.</param>
        <summary>Renvoie le cosine hyperbolique inverse d’un nombre. Le nombre doit être supérieur ou égal à 1. Le cosine hyperbolique inverse est la valeur dont le cosine hyperbolique est , donc <paramref name="Arg1" /> Acosh(Cosh(nombre)) est égal <paramref name="Arg1" /> à .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cotangente de l’angle que vous souhaitez.</param>
        <summary>Renvoie l’arccotangente d’un nombre, en radians de la plage 0 à Pi.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Cotangente hyperbolique de l’angle voulu.</param>
        <summary>Renvoie la cotangente hyperbolique inverse d’un nombre.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">No_fonction : nombre compris entre 1 et 19 qui indique la fonction à utiliser.</param>
        <param name="Arg2">Options : valeur numérique qui détermine les valeurs à ignorer dans la plage d’évaluation de la fonction.</param>
        <param name="Arg3">Ref1 : premier argument numérique, pour les fonctions en acceptant plusieurs, pour lequel vous souhaitez obtenir la valeur d’agrégation.</param>
        <param name="Arg4">Ref2 - Ref30 : arguments numériques compris entre 2 et 30 pour lesquels vous souhaitez obtenir la valeur d’agrégation.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie un agrégat dans une liste ou une base de données.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les contraintes suivantes s’appliquent aux arguments Ref (Arg3 - Arg 30) en fonction de <b>Function_num</b> valeur.</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>Types valides : Toute référence de cellule Intersections de intersections de intersections définies noms structurés referencesInvalid types : tableaux de données réels</description>
              <description>Types valides : Toute référence de cellule Intersections de intersections de intersections définies noms structurés referencesInvalid types : tableaux de données réels</description>
              <description>Types valides : Toute référence de cellule Intersections de intersections de intersections définies noms structurés referencesInvalid types : tableaux de données réels</description>
            </item>
            <item>
              <term>14-17</term>
              <description>Types valides : n’importe quelle cellule référence Intersections de intersections : noms structurés références réelles tableaux de données</description>
              <description>Types valides : n’importe quelle cellule référence Intersections de intersections : noms structurés références réelles tableaux de données</description>
              <description>Aucune référence autorisée</description>
            </item>
          </list>
          <para>Si un deuxième argument Ref est requis sans être fourni, AGREGAT renvoie une erreur #VALUE!.</para>
          <para>Si une ou plusieurs références sont de type 3D, AGREGAT renvoie une valeur d’erreur #VALUE!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le coût du bien.</param>
        <param name="Arg2">La date d'acquisition du bien.</param>
        <param name="Arg3">La date de la fin de la première période.</param>
        <param name="Arg4">La valeur de récupération à la fin de la vie du bien.</param>
        <param name="Arg5">La période.</param>
        <param name="Arg6">Le taux d'amortissement.</param>
        <param name="Arg7">La base annuelle utilisée.</param>
        <summary>Renvoie l'amortissement pour chaque période comptable. Cette fonction est fournie pour le système de comptabilité français.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un bien est acheté au mileu d'un exercice comptable, l'amortissement au pro-rata est pris en compte. La méthode est similaire, sauf qu’un coefficient d’amortissement est appliqué dans le calcul en fonction de la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> durée de vie des biens. Le tableau suivant décrit les valeurs utilisées dans <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>360 jours (Méthode NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel</description>
            </item>
            <item>
              <term>3</term>
              <description>365 jours dans une année</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 jours dans une année (Méthode européenne)</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Cette fonction renvoie l'amortissement jusqu'à la dernière période de la vie des biens ou jusqu'à ce que la valeur cumulée de l'amortissement dépasse le coût des biens moins la valeur de récupération.</para>
          <para>Les coefficients d'amortissement sont :</para>
          <list type="table">
            <item>
              <term>Entre 3 et 4 ans</term>
              <description>1,5</description>
            </item>
            <item>
              <term>Entre 5 et 6 ans</term>
              <description>2</description>
            </item>
            <item>
              <term>Plus de 6 ans</term>
              <description>2,5</description>
            </item>
          </list>
          <para>Le taux d'amortissement monte à 50 % pour l'avant-dernière période et à 100 % pour la dernière.</para>
          <para>Si la vie des biens est entre 0 (zéro) et 1, 1 et 2, 2 et 3 ou 4 et 5, la valeur d'erreur #NUM! est renvoyée.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le coût du bien.</param>
        <param name="Arg2">La date d'acquisition du bien.</param>
        <param name="Arg3">La date de la fin de la première période.</param>
        <param name="Arg4">La valeur de récupération à la fin de la vie du bien.</param>
        <param name="Arg5">La période.</param>
        <param name="Arg6">Le taux d'amortissement.</param>
        <param name="Arg7">La base annuelle utilisée.</param>
        <summary>Renvoie l'amortissement pour chaque période comptable. Cette fonction est fournie pour le système de comptabilité français.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un bien est acheté au milieu de la période comptable, l’amortissement au prorat est pris en compte. Le tableau suivant décrit les valeurs utilisées pour <paramref name="Arg7" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>360 jours (Méthode NASD)</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel</description>
            </item>
            <item>
              <term>3</term>
              <description>365 jours dans une année</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 jours dans une année (Méthode européenne)</description>
            </item>
          </list>
          <para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</para>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 à 30 conditions que vous souhaitez tester et qui peuvent être vraies <b>ou</b> <b>fausses.</b></param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie <b>true</b> si tous ses arguments sont <b>true</b>; renvoie <b>false si</b> un ou plusieurs arguments sont <b>faux</b>.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être évalués en valeurs logiques telles que <b>true</b> ou <b>false,</b>ou les arguments doivent être des tableaux ou des références qui contiennent des valeurs logiques. </para>
          <para>Si un argument de matrice ou de référence contient du texte ou des cellules vides, ces valeurs sont ignorées.</para>
          <para>Si la plage spécifiée ne contient aucune valeur logique, cette méthode génère une valeur d'erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Lorsqu’elle est utilisée sans qualificateur d’objet, cette propriété renvoie un objet qui représente <see cref="T:Microsoft.Office.Interop.Excel.Application" /> l’application Microsoft Excel’objet. Lorsqu’elle est utilisée avec un qualificateur d’objet, cette propriété renvoie un objet qui représente le <see cref="T:Microsoft.Office.Interop.Excel.Application" /> créateur de l’objet spécifié. Vous pouvez utiliser cette propriété avec un objet OLE Automation qui renvoie l'application d'origine de cet objet. En lecture seule.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre roman à convertir.</param>
        <summary>Convertit un nombre roman en numéral arabe.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le texte ou une référence à une cellule contenant le texte à modifier. Si le texte ne contient aucun caractère codé sur deux octets, aucune modification n'est apportée.</param>
        <summary>Pour les langues de jeu de caractères sur deux caractères (DBCS), les caractères pleine largeur (sur deux caractères) sont changés en caractères à demi-largeur (sur un seul sur deux caractères).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le sinus de l'angle que vous souhaitez obtenir et doit être compris entre -1 et 1.</param>
        <summary>Renvoie l'arcsinus, ou sinus inverse, d'un nombre. L’arcsine est l’angle dont le sinus est <paramref name="Arg1" /> . L'angle renvoyé est exprimé en radians, entre -pi/2 et pi/2.</summary>
        <returns>To be added.</returns>
        <remarks><para>Pour exprimer l’arcsine en degrés, multipliez le résultat par 180/PI( ) ou utilisez la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> méthode.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tout nombre réel.</param>
        <summary>Renvoie le sinus hyperbolique inverse d’un nombre. Le sinus hyperbolique inverse est la valeur dont le sinus hyperbolique est , donc <paramref name="Arg1" /> Asinh(Sinh(number)) est égal <paramref name="Arg1" /> à .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La coordonnée x du point.</param>
        <param name="Arg2">La coordonnée y du point.</param>
        <summary>Renvoie l'arctangente, ou tangente inverse, des coordonnées x et y spécifiées. L'arctangente est l'angle entre l'axe des abscisses et une ligne reliant l'origine (0, 0) et un point avec les coordonnées (num_x, num_y). L'angle est exprimé en radians, entre -pi et pi, -pi exclus.</summary>
        <returns>To be added.</returns>
        <remarks><para>Un résultat positif représente un angle allant dans le sens contraire des aiguilles d'une montre par rapport à l'axe des abscisses ; un résultat négatif, un angle allant dans le sens des aiguilles d'une montre.</para>
          <para>
            <b>Atan2(a,b)</b> est égal à <b>Atan(b/a)</b>, sauf qu’un peut être égal à 0 dans <b>Atan2</b>. </para>
          <para>Si les <paramref name="Arg1" /> deux <paramref name="Arg2" /> valeurs sont 0, Atan2 renvoie une valeur d’erreur. </para>
          <para>Pour exprimer l’arcange en degrés, multipliez le résultat par 180/PI( ) ou utilisez la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> méthode.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tout nombre réel entre 1 et -1.</param>
        <summary>Renvoie la tangente hyperbolique inverse d'un nombre. Le nombre doit être compris entre -1 et 1 (-1 et 1 exclus).</summary>
        <returns>To be added.</returns>
        <remarks><para>La tangente hyperbolique inverse est la valeur dont la tangente hyperbolique est <b>Arg1</b>, donc <b>Atanh(Tanh(nombre))</b> est égal <paramref name="Arg1" /> à .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 à 30 arguments pour lesquels vous souhaitez calculer la moyenne des écarts absolus. Vous pouvez également utiliser une matrice unique ou une référence à une matrice au lieu des arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la moyenne des écarts absolus des points de données par rapport à leur moyenne arithmétique. AveDev correspond à la mesure de la variation dans une série de données.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>AveDev est</b> influencé par l’unité de mesure dans les données d’entrée. </para>
          <para>Les arguments doivent être des nombres ou des noms, des matrices ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les transcriptions textuelles des nombres que vous entrez directement dans la liste d'arguments sont comptabilisées.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>L'équation pour l'écart absolu est : 

</para>
          <para>Figure 1 : Équation de l’écart moyen</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 à 30 arguments numériques dont vous souhaitez calculer la moyenne.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la moyenne (arithmétique) des arguments.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments représentant des valeurs d'erreur ou du texte ne pouvant pas être converti en nombre entraînent des erreurs. Pour inclure des valeurs logiques et des transcriptions textuelles de nombres dans une référence dans le cadre du calcul, utilisez la fonction AVERAGEA. </para>
          <para>La <b>méthode Average</b> mesure la tendance centrale, qui est l’emplacement du centre d’une série de nombres dans une distribution statistique. Les trois mesures les plus courantes sont :</para>
          <list type="bullet">
            <item>
              <description>Moyenne qui représente l'espérance arithmétique et est calculée en ajoutant une série de nombres, puis en divisant le résultat par leur nombre. Par exemple, la moyenne de 2, 3, 3, 5, 7 et 10 est 30 divisé par 6, qui donne 5.</description>
            </item>
            <item>
              <description>Médiane qui est le milieu d'une série de nombres. Autrement dit, la moitié des nombres sont supérieurs à la médiane et l'autre moitié est inférieure. Par exemple, la médiane de 2, 3, 3, 5, 7 et 10 est 4.</description>
            </item>
            <item>
              <description>Mode qui est le nombre le plus récurrent dans une série. Par exemple, le mode de 2, 3, 3, 5, 7 et 10 est 3.</description>
            </item>
          </list>
          <para>Pour une distribution symétrique d'une série de nombres, ces trois mesures de tendance centrale sont toutes identiques. Pour une distribution oblique, elles peuvent être différentes.</para>
          <para>Lorsque vous calculez la moyenne d'une série de cellules, n'oubliez pas la différence entre les cellules vides et celles contenant la valeur zéro, surtout si vous avez désactivé la case à cocher Valeurs zéro dans l'onglet Affichage (commande Options, menu Outils). Les cellules vides ne sont pas comptabilisées alors que les valeurs zéro le sont.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une ou plusieurs cellules pour lesquelles calculer la moyenne.</param>
        <param name="Arg2">Critères sous la forme d’un nombre, d’une expression, d’une référence de cellule ou d’un texte qui définit la moyenne des cellules. Par exemple, les critères peuvent être exprimés comme 32, « 32 », « 32 », « apples » &gt; ou B4.</param>
        <param name="Arg3">La série réelle de cellules dont la moyenne est calculée. Si cet argument est omis, la valeur plage est utilisée.</param>
        <summary>Renvoie la moyenne (arithmétique) de toutes les cellules d'une plage respectant un critère donné.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les cellules de la plage qui <b>contiennent true</b> ou <b>false</b> sont ignorées. </para>
          <para>Si une cellule de plage ou average_range est une cellule vide, <b>AverageIf</b> l’ignore. </para>
          <para>Si une cellule dans les critères est vide, <b>AverageIf</b> la traite comme une valeur 0. </para>
          <para>Si aucune cellule de la plage ne répond aux critères, <b>AverageIf</b> génère une valeur d’erreur. </para>
          <para>Vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans criteria. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para>Plage_moyenne ne doit pas nécessairement avoir la même taille et la même forme que plage. Les cellules effectivement prises en compte pour le calcul de la moyenne sont déterminées en utilisant la cellule en haut à gauche dans plage_moyenne comme première cellule et en incluant ensuite les cellules dont la taille et la forme correspondent à plage. Par exemple :</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>La <b>méthode AverageIf</b> mesure la tendance centrale, qui est l’emplacement du centre d’une série de nombres dans une distribution statistique. Les trois mesures les plus courantes sont :</para>
          <list type="bullet">
            <item>
              <description>Moyenne qui représente l'espérance arithmétique et est calculée en ajoutant une série de nombres, puis en divisant le résultat par leur nombre. Par exemple, la moyenne de 2, 3, 3, 5, 7 et 10 est 30 divisé par 6, qui donne 5.</description>
            </item>
            <item>
              <description>Médiane qui est le milieu d'une série de nombres. Autrement dit, la moitié des nombres sont supérieurs à la médiane et l'autre moitié est inférieure. Par exemple, la médiane de 2, 3, 3, 5, 7 et 10 est 4.</description>
            </item>
            <item>
              <description>Mode qui est le nombre le plus récurrent dans une série. Par exemple, le mode de 2, 3, 3, 5, 7 et 10 est 3.</description>
            </item>
          </list>
          <para>Pour une distribution symétrique d'une série de nombres, ces trois mesures de tendance centrale sont toutes identiques. Pour une distribution oblique, elles peuvent être différentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une ou plusieurs plages dans lesquelles évaluer les critères associés.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Renvoie la moyenne (arithmétique) de toutes les cellules qui répondent à plusieurs critères.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si une cellule dans average_range est une cellule vide, <b>AverageIfs</b> l’ignore. </para>
          <para>Si une cellule d’une plage de critères est vide, <b>AverageIfs</b> la traite comme une valeur 0. </para>
          <para>Les cellules de la plage contenant <b>true</b> sont évaluées à 1 ; cellules de la plage qui <b>contiennent false</b> sont évaluées à 0 (zéro). </para>
          <para>Toute cellule de plage_moyenne dont les critères correspondants spécifiés sont vrais est utilisée dans le calcul de la moyenne.</para>
          <para>Si les cellules average_range sont vides ou contiennent des valeurs de texte qui ne peuvent pas être converties en <b>nombres, AverageIfs</b> génère une erreur. </para>
          <para>Si aucune cellule ne répond à tous les <b>critères, AverageIfs</b> génère une valeur d’erreur. </para>
          <para>Vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans criteria. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para>Chaque plage_critère ne doit pas nécessairement avoir la même taille et la même forme que plage_moyenne. Les cellules effectivement prises en compte pour le calcul de la moyenne sont déterminées en utilisant la cellule en haut à gauche de ce plage_critère comme première cellule et en incluant ensuite les cellules dont la taille et la forme correspondent à plage. Par exemple :</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>La <b>fonction AverageIfs</b> mesure la tendance centrale, qui est l’emplacement du centre d’une série de nombres dans une distribution statistique. Les trois mesures les plus courantes sont :</para>
          <list type="bullet">
            <item>
              <description>Moyenne qui représente l'espérance arithmétique et est calculée en ajoutant une série de nombres, puis en divisant le résultat par leur nombre. Par exemple, la moyenne de 2, 3, 3, 5, 7 et 10 est 30 divisé par 6, qui donne 5.</description>
            </item>
            <item>
              <description>Médiane qui est le milieu d'une série de nombres. Autrement dit, la moitié des nombres sont supérieurs à la médiane et l'autre moitié est inférieure. Par exemple, la médiane de 2, 3, 3, 5, 7 et 10 est 4.</description>
            </item>
            <item>
              <description>Mode qui est le nombre le plus récurrent dans une série. Par exemple, le mode de 2, 3, 3, 5, 7 et 10 est 3.</description>
            </item>
          </list>
          <para>Pour une distribution symétrique d'une série de nombres, ces trois mesures de tendance centrale sont toutes identiques. Pour une distribution oblique, elles peuvent être différentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Un nombre à convertir en texte, une référence à une cellule contenant un nombre, ou une formule qui calcule un nombre.</param>
        <summary>Convertit un nombre en texte Thai et ajoute le suffixe « Baht ».</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre à convertir.</param>
        <param name="Arg2">Radix de base que vous souhaitez convertir en nombre.</param>
        <param name="Arg3">Longueur minimale de la chaîne renvoyée. Si des zéros non omis ne sont pas ajoutés.</param>
        <summary>Convertit un nombre en représentation textuelle avec le radix donné (base).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">L'ordre de la fonction de Bessel. S'il ne s'agit pas d'un entier, il est tronqué.</param>
        <summary>Renvoie la fonction de Bessel modifiée, équivalente à la fonction de Bessel caculée pour les arguments purement imaginaires.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n'est pas un nombre, BesselI renvoie la valeur d'erreur #VALUE!. </para>
          <para>Si n n'est pas un nombre, BesselI génère une valeur d'erreur. </para>
          <para>Si n &lt; 0, BesselI génère une valeur d’erreur. </para>
          <para>La fonction de Bessel modifiée de énième ordre de la variable x est : 

</para>
          <para>Figure 1 : Fonction de Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">L'ordre de la fonction de Bessel. S'il ne s'agit pas d'un entier, il est tronqué.</param>
        <summary>Renvoie la fonction de Bessel.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n’est pas un chiffre, <b>BesselJ</b> génère une valeur d’erreur. </para>
          <para>Si n n’est pas unnumérique, <b>BesselJ</b> renvoie la valeur d’erreur générée. </para>
          <para>Si n &lt; 0, <b>BesselJ génère</b> une valeur d’erreur. </para>
          <para>La fonction de Bessel de énième ordre de la variable x est : 

 </para>
          <para>Figure 1 : Fonction de Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>Figure 2 : Fonction Gamma</para>
          <para> </para>
          <para> </para>
          <para>est la fonction Gamma.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">L'ordre de la fonction. S'il ne s'agit pas d'un entier, il est tronqué.</param>
        <summary>Renvoie la fonction de Bessel modifiée, équivalente aux fonctions de Bessel caculées pour les arguments purement imaginaires.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n’est pas un chiffre, <b>BesselK</b> génère une valeur d’erreur. </para>
          <para>Si n n’est pas un chiffre, <b>BesselK</b> génère une valeur d’erreur. </para>
          <para>Si n &lt; 0, <b>BesselK</b> génère une valeur d’erreur. </para>
          <para>La fonction de Bessel modifiée de énième ordre de la variable x est : 

 </para>
          <para>Figure 1 : Fonction de Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para>où Jn et Yn sont respectivement les fonctions J et Y Bessel.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">L'ordre de la fonction. S'il ne s'agit pas d'un entier, il est tronqué.</param>
        <summary>Renvoie la fonction de Bessel qui est également appelée la fonction de Weber ou la fonction de Neumann.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n’est pas un chiffre, <b>BesselY</b> génère une valeur d’erreur. </para>
          <para>Si n n’est pas un chiffre, <b>BesselY</b> génère une valeur d’erreur. </para>
          <para>Si n &lt; 0, <b>BesselY</b> génère une valeur d’erreur. </para>
          <para>La fonction de Bessel de énième ordre de la variable x est : 

 </para>
          <para>Figure 1 : Fonction de Bessel de la variable x</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur comprise entre A et B à laquelle évaluer la fonction.</param>
        <param name="Arg2">Le paramètre Alpha de la distribution.</param>
        <param name="Arg3">Paramètre Bêta de la distribution.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true</b>, BÊTA. DIST renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <param name="Arg5">Limite inférieure facultative de l’intervalle de x.</param>
        <param name="Arg6">Limite supérieure facultative de l’intervalle de x.</param>
        <summary>Renvoie la fonction de distribution cumulée bêta.</summary>
        <returns>To be added.</returns>
        <remarks><para>La distribution bêta permet généralement d’étudier les variations du pourcentage de quelque chose entre des échantillons, par exemple le moment de la journée passé devant la télévision par des personnes.</para>
          <list type="bullet">
            <item>
              <description>Si un argument n’est pas <b>unnumérique, Beta_Dist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</description>
            </item>
            <item>
              <description>Si alpha ≤ 0 ou bêta ≤ 0, <b>Beta_Dist</b> génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si x &lt; A, x &gt; B ou A = B, <b>Beta_Dist</b> génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si vous omettez les valeurs A et B (limite inférieure et supérieure), <b>Beta_Dist</b> utilise la distribution bêta cumulative standard, de sorte que A = 0 et B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une probabilité associée à la distribution bêta.</param>
        <param name="Arg2">Le paramètre Alpha de la distribution.</param>
        <param name="Arg3">Paramètre Bêta de distribution.</param>
        <param name="Arg4">Limite inférieure facultative de l’intervalle de x.</param>
        <param name="Arg5">Limite supérieure facultative de l’intervalle de x.</param>
        <summary>Renvoie l’inverse de la fonction de distribution cumulée pour une distribution bêta spécifiée. En d’autres termes, si probabilité = LOI.BETA(x,...), alors BETA.INVERSE(probabilité,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Vous pouvez utiliser la distribution bêta dans la planification de projets pour modéliser des heures d’échéances probables en fonction d’une heure d’échéance et d’une variabilité attendues :</para>
          <list type="bullet">
            <item>
              <description>Si un argument n’est pas <b>un</b> Beta_Inv génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si alpha ≤ 0 ou bêta ≤ 0, <b>Beta_Inv</b> génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si la probabilité ≤ 0 ou la probabilité &gt; 1, <b>Beta_Inv</b> génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si vous omettez les valeurs A et B (limite inférieure et supérieure), <b>Beta_Inv</b> utilise la distribution bêta cumulative standard, de sorte que A = 0 et B = 1.</description>
            </item>
          </list>
          <para>Pour une probabilité donnée, <b>Beta_Inv</b> recherche cette valeur x de telle Beta_Dist(x, alpha, bêta, TRUE, A, B) = probabilité. Ainsi, la précision de <b>Beta_Inv</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> . <b>Beta_Inv</b> utilise une technique de recherche itérative.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur comprise entre A et B à laquelle évaluer la fonction.</param>
        <param name="Arg2">Un paramètre de la distribution.</param>
        <param name="Arg3">Un paramètre de la distribution.</param>
        <param name="Arg4">Limite inférieure facultative de l’intervalle de x.</param>
        <param name="Arg5">Limite supérieure facultative de l’intervalle de x.</param>
        <summary>Renvoie la fonction de distribution cumulée bêta.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> méthode.</para>
          <para>La distribution bêta permet généralement d’étudier les variations du pourcentage de quelque chose entre des échantillons, par exemple le moment de la journée passé devant la télévision par les gens.</para>
          <list type="bullet">
            <item>
              <description>Si un argument n’est pas unnumérique, <b>BetaDist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</description>
            </item>
            <item>
              <description>Si alpha ≤ 0 ou bêta ≤ 0, <b>BetaDist</b> génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si x &lt; A, x &gt; B ou A = B, <b>BetaDist</b> génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si vous omettez les valeurs pour A et B, <b>BetaDist</b> utilise la distribution bêta cumulative standard, de sorte que A = 0 et B = 1.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une probabilité associée à la distribution bêta.</param>
        <param name="Arg2">Le paramètre Alpha de la distribution.</param>
        <param name="Arg3">Paramètre Bêta de distribution.</param>
        <param name="Arg4">Limite inférieure facultative de l’intervalle de x.</param>
        <param name="Arg5">Limite supérieure facultative de l’intervalle de x.</param>
        <summary>Renvoie l’inverse de la fonction de distribution cumulative pour une distribution bêta spécifiée. Autrement dit, si probabilité = BetaDist(x,...), alors BetaInv(probabilité,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> méthode.</para>
          <para>Vous pouvez utiliser la distribution bêta dans la planification de projet pour modéliser des heures d’échéances probables en fonction d’une heure d’échéance et d’une variabilité attendues.</para>
          <list type="bullet">
            <item>
              <description>Si un argument n’est pas unnumérique, <b>BetaInv</b> génère une valeur d’erreur.</description>
            </item>
            <item>
              <description>Si alpha ≤ 0 ou bêta ≤ 0, <b>BetaInv</b> génère une valeur d’erreur. </description>
            </item>
            <item>
              <description>Si la probabilité ≤ 0 ou la probabilité &gt; 1, <b>BetaInv</b> génère une valeur d’erreur. </description>
            </item>
            <item>
              <description>Si vous omettez les valeurs pour A et B, <b>BetaInv</b> utilise la distribution bêta cumulative standard, de sorte que A = 0 et B = 1.</description>
            </item>
          </list>
          <para>Pour une probabilité donnée, <b>BetaInv</b> recherche cette valeur x de telle telle que BetaDist(x, alpha, bêta, A, B) = probabilité. Ainsi, la précision de <b>BetaInv</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . <b>BetaInv utilise</b> une technique de recherche itérative. Si la recherche n’a rien donné après 100 itérations, la fonction génère une valeur d’erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le nombre binaire à convertir. Le nombre ne peut pas contenir plus de 10 caractères (10 bits) dont le plus important est celui représentant le signe. Les neuf autres sont des bits d'ampleur. Les nombres négatifs sont représentés à l'aide d'une notation en complément à deux.</param>
        <summary>Convertit un nombre binaire en décimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n'est pas un nombre binaire valide ou s'il contient plus de 10 caractères (10 bits), Bin2Dec génère une valeur d'erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le nombre binaire à convertir. Le nombre ne peut pas contenir plus de 10 caractères (10 bits) dont le plus important est celui représentant le signe. Les neuf autres sont des bits d'ampleur. Les nombres négatifs sont représentés à l'aide d'une notation en complément à deux.</param>
        <param name="Arg2">Le nombre de caractères à utiliser. Si des caractères sont omis, <b>Bin2Hex</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre binaire en hexadécimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n’est pas un nombre binaire valide ou s’il contient plus de 10 caractères (10 bits), <b>Bin2Hex</b> génère une erreur. </para>
          <para>Si le nombre est négatif, <b>Bin2Hex</b> ignore les caractères et renvoie un nombre hexadécimal de 10 caractères. </para>
          <para>Si <b>Bin2Hex nécessite</b> plus de caractères, il génère une erreur. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas un chiffre, <b>Bin2Hex</b> génère une erreur. </para>
          <para>Si les emplacements sont négatifs, <b>Bin2Hex</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le nombre binaire à convertir. Le nombre ne peut pas contenir plus de 10 caractères (10 bits) dont le plus important est celui représentant le signe. Les neuf autres sont des bits d'ampleur. Les nombres négatifs sont représentés à l'aide d'une notation en complément à deux.</param>
        <param name="Arg2">Le nombre de caractères à utiliser. Si des caractères sont omis, <b>Bin2Oct</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre binaire en octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n’est pas un nombre binaire valide ou s’il contient plus de 10 caractères (10 bits), <b>Bin2Oct</b> génère une erreur. </para>
          <para>Si le nombre est négatif, <b>Bin2Oct</b> ignore les caractères et renvoie un nombre octal de 10 caractères. </para>
          <para>Si <b>Bin2Oct nécessite</b> plus de caractères que de caractères, il génère une erreur. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas unnumérique, <b>Bin2Oct</b> génère une erreur. </para>
          <para>Si les emplacements sont négatifs, <b>Bin2Oct</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_s - nombre de réussites dans les essais.</param>
        <param name="Arg2">Trials : nombre de essais indépendants.</param>
        <param name="Arg3">Probability_s - probabilité de réussite à chaque essai.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>True,</b>la méthode renvoie la fonction de distribution cumulative, qui est la probabilité qu’il y a au plus number_s succès ; si false , elle renvoie la fonction de probabilité de masse, qui est la probabilité qu’il y <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> number_s <b></b>succès.</param>
        <summary>Renvoie la probabilité d’une variable aléatoire discrète suivant la loi binomiale.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez la méthode <b>Binom_Dist</b> dans des problèmes contenant un nombre déterminé de tests ou de tirages, lorsque le résultat de tous les tirages est succès ou échec, lorsque les tirages sont indépendants et lorsque la probabilité de succès est constante tout au long de l’expérience. Par exemple, la <b>méthode Binom_Dist</b> calcule la probabilité que deux des trois prochains nouveaux-enfants soient des hommes. </para>
          <list type="bullet">
            <item>
              <description>Nombre_s et Tirages sont tronqués de manière à utiliser des entiers.</description>
            </item>
            <item>
              <description>Si number_s, des essais ou des probability_s sont nonnumériques, la <b>méthode Binom_Dist</b> génère une erreur. </description>
            </item>
            <item>
              <description>Si number_s &lt; 0 ou number_s &gt; d’essai, <b>la méthode Binom_Dist</b> génère une erreur. </description>
            </item>
            <item>
              <description>Si probability_s &lt; 0 ou probability_s &gt; 1, la <b>méthode Binom_Dist</b> génère une erreur. La fonction de masse de probabilité binomiale est : </description>
            </item>
          </list>
          <para>Où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para>est COMBIN(n,x).</para>
          <para>La distribution binomiale cumulative est la :</para>
          <para>Figure 3 : Distribution binomiale cumulative</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre de essais indépendants.</param>
        <param name="Arg2">Probabilité de réussite à chaque essai.</param>
        <param name="Arg3">Nombre de réussites dans les essais.</param>
        <param name="Arg4">Si elle est fournie, cette fonction renvoie la probabilité que le nombre de essais réussis se trouve entre Arg3 et Arg4.</param>
        <summary>Renvoie la probabilité d’un résultat d’essai à l’aide d’une distribution binomiale.</summary>
        <returns>Double</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Trials : nombre de essais en avant-première.</param>
        <param name="Arg2">Probability_s - probabilité de réussite à chaque essai.</param>
        <param name="Arg3">Alpha - valeur critère.</param>
        <summary>Renvoie la probabilité inverse d’une variable aléatoire discrète suivant la loi binomiale.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si Trials, Probability_s ou Alpha n’est pas unnumérique, la <b>méthode Binom_Inv</b> génère une erreur. </para>
          <para>Si Tirages n’est pas un entier, il est tronqué.</para>
          <para>Si les &lt; essais sont 0, <b>la méthode Binom_Inv</b> génère une erreur. </para>
          <para>Si Probability_s &lt; 0 ou Probability_s &gt; 1, la méthode <b>Binom_Inv</b> génère une erreur. </para>
          <para>Si Alpha &lt; 0 ou Alpha &gt; 1, la <b>méthode Binom_Inv</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre de réussites dans les essais.</param>
        <param name="Arg2">Nombre de essais indépendants.</param>
        <param name="Arg3">Probabilité de réussite à chaque essai.</param>
        <param name="Arg4">Valeur logique qui détermine la forme de la fonction. Si cumulative est <b>vrai,</b> <b>BinomDist</b> renvoie la fonction de distribution cumulative, qui est la probabilité qu’il y a au plus number_s succès ; si <b>la probabilité</b>est false, elle renvoie la fonction de probabilité de masse, qui est la probabilité qu’il y number_s succès.</param>
        <summary>Renvoie la probabilité d’une variable aléatoire discrète suivant la loi binomiale.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez <b>BinomDist</b> dans les problèmes avec un nombre fixe de tests ou de essais, lorsque les résultats d’un essai ne sont que réussite ou échec, lorsque les essais sont indépendants et lorsque la probabilité de succès est constante tout au long de l’expérience. Par exemple, <b>BinomDist</b> peut calculer la probabilité que deux des trois prochains nouveaux-enfants soient des hommes. </para>
          <para>Nombre_s et Tirages sont tronqués de manière à utiliser des entiers.</para>
          <para>Si number_s, des essais ou des probability_s n’est pas unnumérique, <b>BinomDist</b> génère une erreur. </para>
          <para>Si number_s &lt; 0 ou number_s &gt; d’essai, <b>BinomDist</b> génère une erreur. </para>
          <para>Si probability_s &lt; 0 ou probability_s &gt; 1, <b>BinomDist</b> génère une erreur. </para>
          <para>La fonction de masse de probabilité binomiale est : </para>
          <para>Figure 1 : Fonction de masse de probabilité binomiale</para>
          <para> </para>
          <para> </para>
          <para>Où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para>est COMBIN(n,x).</para>
          <para>La distribution binomiale cumulative est la :</para>
          <para>Figure 3 : Distribution binomiale cumulative</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Représentation décimale du nombre binaire à évaluer.</param>
        <param name="Arg2">Représentation décimale du nombre binaire à évaluer.</param>
        <summary>Renvoie un « And au sens des bits » de deux nombres.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Représentation décimale du nombre binaire à évaluer.</param>
        <param name="Arg2">Nombre de bits vers la gauche d’Arg1.</param>
        <summary>Renvoie un nombre de valeurs décalé à gauche shift_amount bits.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Représentation décimale du nombre binaire à évaluer.</param>
        <param name="Arg2">Représentation décimale du nombre binaire à évaluer.</param>
        <summary>Renvoie un OR de bits de 2 nombres.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Représentation décimale du nombre binaire à évaluer.</param>
        <param name="Arg2">Nombre de bits vers le côté droit d’Arg1.</param>
        <summary>Renvoie un nombre de valeurs décalé vers la droite par shift_amount bits.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Représentation décimale du nombre binaire à évaluer.</param>
        <param name="Arg2">Représentation décimale du nombre binaire à évaluer.</param>
        <summary>Renvoie un « Or exclusif » de bits de deux nombres.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - la valeur à arrondir.</param>
        <param name="Arg2">Importance  - le multiple vers lequel vous voulez arrondir.</param>
        <summary>Arrondit un nombre au multiple le plus proche de l’argument précision en s’éloignant de zéro.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> méthode.</para>
          <para>Par exemple, si vous souhaitez ne pas utiliser les petits centimes d’euro dans vos prix et que votre produit vaut 4,42 €, utilisez la formule Ceiling(4.42,0.05) pour arrondir les prix à la dizaine de centime d’euro la plus proche.</para>
          <para>Si l’un des arguments n’est pas un nombre, <b>Ceiling</b> génère une erreur.</para>
          <para>Indépendamment du signe du nombre, une valeur est arrondie lorsqu’elle n’est pas égale à zéro. Si le nombre est un multiple exact de l’argument précision, aucun arrondi n’est appliqué.</para>
          <para>Si le nombre et l’argument précision n’ont pas le même signe, <b>Ceiling</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valeur à arrondir.</param>
        <param name="Arg2">Multiple vers lequel vous souhaitez arrondir.</param>
        <param name="Arg3">Lorsqu’elle est donnée et non nulle, cette fonction est arrondie à zéro.</param>
        <summary>Arrondit un nombre à l’integer le plus proche ou au multiple le plus proche de l’importance.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - la valeur à arrondir.</param>
        <param name="Arg2">Importance  - le multiple vers lequel vous voulez arrondir.</param>
        <summary>Renvoie le nombre spécifié arrondi au multiple le plus proche de l’argument précision en s’éloignant de zéro.</summary>
        <returns>To be added.</returns>
        <remarks><para>Par exemple, si vous souhaitez ne pas utiliser les petits centimes d’euro dans vos prix et que votre produit vaut 4,42 €, utilisez la formule Ceiling(4.42,0.05) pour arrondir les prix à la dizaine de centime d’euro la plus proche.</para>
          <para>Selon le signe du nombre et des arguments précision, la méthode <b>Ceiling_Precise</b> arrondit en tendant vers zéro ou en direction inverse de zéro.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Arrondit en tendant vers zéro.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Arrondit en direction inverse de zéro.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Arrondit en tendant vers zéro.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Arrondit en direction inverse de zéro.</description>
            </item>
          </list>
          <para>Si l’un des arguments n’est pas un nombre, <b>Ceiling_Precise</b> génère une erreur.</para>
          <para>Si le nombre est un multiple exact de l’argument précision, aucun arrondi n’est appliqué.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur à laquelle évaluer la distribution.</param>
        <param name="Arg2">Le nombre de degrés de liberté.</param>
        <summary>Renvoie la probabilité d’une variable aléatoire continue suivant une loi unilatérale du Khi-deux.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> fonctions.</para>
          <para>La distribution χ2 est associée à un test χ2. Utilisez le test χ2 pour comparer les valeurs observées et attendues.</para>
          <para>Par exemple, une expérience génétique peut émettre l’hypothèse que la prochaine génération de plantes aura une certaine gamme de couleurs. En comparant les résultats observés et les résultats prévus, vous pouvez valider ou non votre hypothèse d’origine.</para>
          <para>Si l’un des arguments n’est pas un chiffre, <b>ChiDist</b> génère une erreur. </para>
          <para>Si x est négatif, <b>ChiDist</b> génère une erreur. </para>
          <para>Si degrés_liberté n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom &lt; 1 ou degrees_freedom &gt; 10^10, <b>ChiDist</b> génère une erreur. </para>
          <para>
            <b>ChiDist est</b> calculé comme ChiDist = P(X x), où X est une &gt; variable aléatoire χ2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une probabilité associée à la distribution khi-deux.</param>
        <param name="Arg2">Le nombre de degrés de liberté.</param>
        <summary>Renvoie l’inverse de la probabilité d’une variable aléatoire continue suivant une loi unilatérale du Khi-deux.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> fonctions.</para>
          <para>Si probabilité = ChiDist(x,...), alors ChiInv(probabilité,...) = x. Cette fonction permet de comparer les résultats observés avec les résultats prévus pour valider ou non une hypothèse de départ.</para>
          <para>Si l’un des arguments n’est pas un chiffre, <b>ChiInv</b> génère une erreur. </para>
          <para>Si probabilité &lt; 0 ou probabilité &gt; 1, <b>ChiInv</b> génère une erreur. </para>
          <para>Si degrés_liberté n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom &lt; 1 ou degrees_freedom ≥ 10^10, <b>ChiInv</b> génère une erreur.</para>
          <para>Pour une probabilité donnée, <b>ChiInv</b> recherche cette valeur x de telle telle que ChiDist(x, degrees_freedom) = probabilité. Ainsi, la précision de <b>ChiInv dépend</b> de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" /> . <b>ChiInv utilise</b> une technique de recherche itérative. Si la recherche n’a rien donné après 64 itérations, la fonction génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur à laquelle vous souhaitez évaluer la distribution.</param>
        <param name="Arg2">Deg_freedom - Nombre de degrés de liberté.</param>
        <param name="Arg3">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b>CHISQ_DIST renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution Khi-deux.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas numérique, CHISQ_DIST renvoie la valeur d’erreur #VALUE!. </para>
          <para>Si x est négatif, CHISQ_DIST renvoie la valeur d’erreur #NUM!. </para>
          <para>Si degrés_liberté n’est pas un entier, l’argument est tronqué. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur à laquelle évaluer la distribution.</param>
        <param name="Arg2">Le nombre de degrés de liberté.</param>
        <summary>Renvoie la probabilité unilatérale à droite de la distribution khi-deux.</summary>
        <returns>To be added.</returns>
        <remarks><para>La distribution χ2 est associée à un test χ2. Utilisez le test χ2 pour comparer les valeurs observées et attendues.</para>
          <para>Par exemple, une expérience génétique peut émettre l’hypothèse que la prochaine génération de plantes aura une certaine gamme de couleurs. En comparant les résultats observés et les résultats prévus, vous pouvez valider ou non votre hypothèse d’origine.</para>
          <para>Si l’un des arguments n’est pas <b>un ChiSq_Dist_RT</b> génère une erreur. </para>
          <para>Si x est négatif, <b>ChiSq_Dist_RT</b> génère une erreur. </para>
          <para>Si degrés_liberté n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom &lt; 1 ou degrees_freedom &gt; 10^10, <b>ChiSq_Dist_RT</b> génère une erreur. <b>ChiSq_Dist_RT</b> est calculé comme ChiSq_Dist_RT = P(X x), où X est &gt; une variable aléatoire χ2.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité : probabilité associée à la distribution de ci-après.</param>
        <param name="Arg2">Deg_freedom - Nombre de degrés de liberté.</param>
        <summary>Renvoie, pour une probabilité unilatérale à gauche donnée, la valeur d’une variable aléatoire suivant une loi du Khi-deux.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas <b>unnumérique, ChiSq_Inv</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou probabilité &gt; 1, <b>ChiSq_Inv</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté n’est pas un entier, l’argument est tronqué.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une probabilité associée à la distribution khi-deux.</param>
        <param name="Arg2">Le nombre de degrés de liberté.</param>
        <summary>Renvoie, pour une probabilité unilatérale à droite donnée, la valeur d’une variable aléatoire suivant une loi du Khi-deux.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si probabilité = ChiSq_Dist_RT(x,...), alors ChiSq_Inv_RT(probabilité,...) = x. Cette fonction permet de comparer les résultats observés avec les résultats prévus pour valider ou non une hypothèse de départ.</para>
          <para>Si l’un des arguments n’est pas <b>un ChiSq_Inv_RT</b> génère une erreur. </para>
          <para>Si probabilité &lt; 0 ou probabilité &gt; 1, <b>ChiSq_Inv_RT</b> génère une erreur. </para>
          <para>Si degrés_liberté n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom &lt; 1 ou degrees_freedom ≥ 10^10, <b>ChiSq_Inv_RT</b> génère une erreur.</para>
          <para>Pour une probabilité donnée, <b>ChiSq_Inv_RT</b> recherche cette valeur x de telle ChiSq_Dist_RT(x, degrees_freedom) = probabilité. Ainsi, la précision des <b>ChiSq_Inv_RT</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> . <b>ChiSq_Inv_RT</b> utilise une technique de recherche itérative. Si la recherche n’a rien donné après 64 itérations, la fonction génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La plage de données contenant les observations à tester par rapport aux valeurs prévues.</param>
        <param name="Arg2">La plage de données contenant le rapport du produit des totaux de lignes et des totaux de colonnes sur le total général.</param>
        <summary>Renvoie le test d’indépendance.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b> renvoie la valeur de la distribution chi-squared (χ2) pour la statistique et les degrés de liberté appropriés. Vous pouvez utiliser les tests χ2 pour déterminer si les résultats hypothétiques sont vérifiés par une expérience.</para>
          <para>Si actual_range et expected_range ont un nombre de points de données <b>différent,</b> ChiSq_Test renvoie la valeur d’erreur #N/A. </para>
          <para>Le test χ2 calcule d’abord une statistique χ2 à l’aide de la formule : </para>
          <para>Figure 1 : Formule pour le test au carré x</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <list type="bullet">
            <item>
              <description>Aij = fréquence réelle dans la i-e ligne, colonne j-e</description>
            </item>
            <item>
              <description>Eij = fréquence attendue dans la i-e ligne, colonne j-e</description>
            </item>
            <item>
              <description>r = nombre ou lignes</description>
            </item>
            <item>
              <description>c = nombre de colonnes</description>
            </item>
          </list>
          <para>Une faible valeur de χ2 est un indicateur d’indépendance. Comme le permet la formule, χ2 est toujours positif ou 0, et est 0 uniquement si Aij = Eij pour chaque i,j.</para>
          <para>
            <b>ChiSq_Test</b> renvoie la probabilité qu’une valeur de la statistique χ2 au moins aussi élevée que la valeur calculée par la formule ci-dessus se soit produite par hasard dans le cadre de l’hypothèse de l’indépendance. Pour calculer cette probabilité, <b>ChiSq_Test</b> la distribution χ2 avec un nombre approprié de degrés de liberté, df. Si r &gt; 1 et c &gt; 1, alors df = (r - 1)(c - 1). Si r = 1 et c &gt; 1, alors df = c - 1 ou si r 1 et &gt; c = 1, alors df = r - 1. r = c= 1 n’est pas autorisé et génère une erreur.</para>
          <para><b>L’utilisation ChiSq_Test</b> est plus appropriée lorsque les Eij ne sont pas trop petits. Certains statisticiens suggèrent que chaque Eij doit être supérieur ou égal à 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La plage de données contenant les observations à tester par rapport aux valeurs prévues.</param>
        <param name="Arg2">ImportantThis function has been replaced with one or more new functions that may provide improved accuracy and whose names better reflect their usage. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> méthode. La plage de données contenant le rapport du produit des totaux de lignes et des totaux de colonnes sur le total général.</param>
        <summary>Renvoie le test d’indépendance.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiTest</b> renvoie la valeur de la distribution chi-squared (χ2) pour la statistique et les degrés de liberté appropriés. Vous pouvez utiliser les tests χ2 pour déterminer si les résultats hypothétiques sont vérifiés par une expérience.</para>
          <para>Si actual_range et expected_range ont un nombre différent de points de données, <b>ChiTest</b> renvoie la valeur d’erreur #N/A. </para>
          <para>Le test χ2 calcule d’abord une statistique χ2 à l’aide de la formule : </para>
          <para>Figure 1 : Formule pour le test au carré x</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <list type="bullet">
            <item>
              <description>Aij = fréquence réelle dans la i-e ligne, colonne j-e</description>
            </item>
            <item>
              <description>Eij = fréquence attendue dans la i-e ligne, colonne j-e</description>
            </item>
            <item>
              <description>r = nombre ou lignes</description>
            </item>
            <item>
              <description>c = nombre de colonnes</description>
            </item>
          </list>
          <para> </para>
          <para>Une faible valeur de χ2 est un indicateur d’indépendance. Comme le permet la formule, χ2 est toujours positif ou 0, et est 0 uniquement si Aij = Eij pour chaque i,j.</para>
          <para>
            <b>ChiTest</b> renvoie la probabilité qu’une valeur de la statistique χ2 au moins aussi élevée que la valeur calculée par la formule ci-dessus aurait pu se produire par hasard dans le cadre de l’hypothèse de l’indépendance. Pour calculer cette probabilité, <b>ChiTest</b> utilise la distribution χ2 avec un nombre approprié de degrés de liberté, df. Si r &gt; 1 et c &gt; 1, alors df = (r - 1)(c - 1). Si r = 1 et c &gt; 1, alors df = c - 1 ou si r 1 et &gt; c = 1, alors df = r - 1. r = c= 1 n’est pas autorisé et génère une erreur.</para>
          <para>L’utilisation <b>de ChiTest</b> est plus appropriée lorsque les Eij ne sont pas trop petites. Certains statisticiens suggèrent que chaque Eij doit être supérieur ou égal à 5.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Spécifie l'argument de valeur sélectionné. Arg1 doit être un nombre entre 1 et 29, ou une formule ou une référence à une cellule contenant un nombre compris entre 1 et 29.</param>
        <param name="Arg2">1 à 29 arguments de valeurs parmi lesquels la méthode Choose sélectionne une valeur ou une action à effectuer en fonction de Arg1. Les arguments peuvent être des nombres, des références à des cellules, des noms définis, des formules, des fonctions ou du texte.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Utilise <paramref name="Arg1" /> comme index pour renvoyer une valeur à partir de la liste des arguments de valeur.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la valeur est 1, Choose renvoie la valeur1 ; si elle est <paramref name="Arg1" /> 2, <b>Choose</b> renvoie <b></b> la valeur2; et ainsi de suite. </para>
          <para>Si la valeur est inférieure à 1 ou supérieure au nombre de la dernière valeur de la <paramref name="Arg1" /> liste, <b>Choose</b> génère une erreur. </para>
          <para>S’il s’agit d’une fraction, elle est tronquée à l’integer le plus <paramref name="Arg1" /> bas avant d’être utilisée. </para>
          <para><paramref name="Arg1" />S’il s’agit d’un tableau, chaque valeur est évaluée lorsque <b>Choose</b> est évalué. </para>
          <para>Les arguments de valeur à <b>choisir</b> peuvent être des références de plage ainsi que des valeurs simples. Par exemple, la formule :</para>
          <para>=SUM(Choose(2,A1:A10,B1:B10,C1:C10))</para>
          <para>évalue :</para>
          <para>=SUM(B1:B10)</para>
          <para>qui renvoie ensuite une valeur basée sur les valeurs de la plage B1:B10.</para>
          <para>La <b>fonction Choose</b> est évaluée en premier, en renvoyant la référence B1:B10. La fonction SUM est ensuite évaluée à l’aide de B1:B10, le résultat de la fonction <b>Choose,</b> comme argument.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Toute information de feuille de calcul dont vous souhaitez supprimer les caractères non imprimables.</param>
        <summary>Supprime tous les caractères non imprimables du texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez <b>Clean sur</b> du texte importé à partir d’autres applications qui contient des caractères qui peuvent ne pas être imprimés avec votre système d’exploitation. Par exemple, vous pouvez utiliser <b>Clean</b> pour supprimer du code informatique de bas niveau qui se trouve fréquemment au début et à la fin des fichiers de données et qui ne peut pas être imprimé.</para>
          <para>
            <b>Important</b>: la <b>fonction Clean</b> a été conçue pour supprimer les 32 premiers caractères non imprimants du code ASCII 7 bits (valeurs 0 à 31) du texte. Dans le jeu de caractères Unicode, d'autres caractères non imprimables existent (valeurs 127, 129, 141, 143, 144 et 157). En soi, la <b>fonction Clean</b> ne supprime pas ces caractères non imprimants supplémentaires.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">le nombre d’éléments ;</param>
        <param name="Arg2">Le nombre d'éléments dans chaque combinaison.</param>
        <summary>Renvoie le nombre de combinaisons pour un nombre donné d'éléments. Utilisez <b>Combin</b> pour déterminer le nombre total possible de groupes pour un nombre donné d’éléments.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments numériques sont raccourcis à des entiers.</para>
          <para>Si l’un des arguments n’est pas un chiffre, <b>Combin</b> génère une erreur. </para>
          <para>Si le nombre 0, number_chosen 0 ou le numéro &lt; &lt; &lt; number_chosen, <b>Combin</b> génère une erreur. </para>
          <para>Une combinaison est tout ensemble ou sous-ensemble d'éléments, indépendamment de leur ordre interne. Les combinaisons se distinguent des permutations, pour lesquelles l'ordre interne est important.</para>
          <para>Le nombre de combinaisons est le suivant, où nombre = n et number_chosen = k : </para>
          <para>Figure 1 : Nombre de combinaisons</para>
          <para> </para>
          <para> </para>
          <para>Où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre total d’éléments.</param>
        <param name="Arg2">Le nombre d'éléments dans chaque combinaison.</param>
        <summary>Renvoie le nombre de combinaisons avec répétitions pour un nombre donné d’éléments.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le coefficient réel du nombre complexe.</param>
        <param name="Arg2">Le coefficient imaginaire du nombre complexe.</param>
        <param name="Arg3">Le suffixe du composant imaginaire du nombre complexe. S'il est omis, le suffixe est supposé avoir la valeur « i » par défaut.</param>
        <summary>Convertit des coefficients réels et imaginaires en un nombre complexe de type x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Toutes les fonctions de nombre complexe acceptent « i » et « j » comme suffixe, mais pas « I » ni « J ». L'utilisation de majuscules génère une erreur. Toutes les fonctions acceptant au moins deux nombres complexes exigent la correspondance de tous les suffixes.</para>
          <para><paramref name="Arg1" />S’il n’est pas un chiffre, <b>Complex</b> génère une erreur. </para>
          <para><paramref name="Arg2" />S’il n’est pas un chiffre, <b>Complex</b> génère une erreur. </para>
          <para>Si <paramref name="Arg3" /> ce n’est ni « i » ni « j », <b>Complex</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le seuil de pertinence utilisé pour le calcul du seuil de confiance. Ce dernier est égal à 100*(1 - alpha)%. Autrement dit, une valeur alpha de 0,05 indique un seuil de confiance de 95 %.</param>
        <param name="Arg2">L’écart-type de population pour la plage de données, supposé être connu.</param>
        <param name="Arg3">La taille de l’échantillon.</param>
        <summary>Renvoie une valeur que vous pouvez utiliser pour construire un intervalle de confiance pour une moyenne de population.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> fonctions.</para>
          <para>L’intervalle de confiance est une plage de valeurs. Votre moyenne d’échantillon, x, est au centre de cette plage et la plage est x ± <b>confiance</b>. Par exemple, si x est la moyenne d’échantillon des délais de livraison pour les produits commandés par courrier électronique, x ± <b>Confidence</b> est une plage de moyennes de population. Pour toute moyenne de population, μ0, dans cette plage, la probabilité d’obtenir une moyenne d’échantillon supérieure à μ0 à x est supérieure à alpha ; pour toute moyenne de population, μ0, non dans cette plage, la probabilité d’obtenir un échantillon plus loin de μ0 que x est inférieure à alpha. En d’autres termes, supposons que nous utilisons x, standard_dev et la taille pour construire un test à deux points au niveau de pertinence alpha de l’hypothèse que la moyenne de population est μ0. Ensuite, nous ne rejetons pas cette hypothèse si μ0 est dans l’intervalle de confiance et rejetons cette hypothèse si μ0 n’est pas dans l’intervalle de confiance. L’intervalle de confiance ne nous permet pas de déduire qu’il existe une probabilité 1 – alpha que notre prochain colis aura un temps de livraison compris dans l’intervalle de confiance. </para>
          <para>Si un argument n’est pas unnumérique, <b>Confidence</b> génère une erreur. </para>
          <para>Si alpha ≤ 0 ou alpha ≥ 1, <b>Confidence</b> génère une erreur. </para>
          <para>Si standard_dev ≤ 0, <b>Confidence</b> génère une erreur. </para>
          <para>Si taille n’est pas un entier, il est tronqué.</para>
          <para>Si la taille &lt; 1, <b>confidence</b> génère une erreur. </para>
          <para>Si nous supposons qu’alpha est égal à 0,05, nous devons calculer la zone sous la courbe normale standard égale à (1 - alpha) ou 95 %. Cette valeur est ± 1.96. L’intervalle de confiance est donc : 

</para>
          <para>Figure 1 : Intervalle de confiance</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le seuil de pertinence utilisé pour le calcul du seuil de confiance. Ce dernier est égal à 100*(1 - alpha)%. Autrement dit, une valeur alpha de 0,05 indique un seuil de confiance de 95 %.</param>
        <param name="Arg2">L’écart-type de population pour la plage de données, supposé être connu.</param>
        <param name="Arg3">La taille de l’échantillon.</param>
        <summary>Renvoie une valeur que vous pouvez utiliser pour construire un intervalle de confiance pour une moyenne de population.</summary>
        <returns>To be added.</returns>
        <remarks><para>L’intervalle de confiance est une plage de valeurs. Votre moyenne d’échantillon, x, est au centre de cette plage et la plage est x ± <b>Confidence_Norm</b>. Par exemple, si x est la moyenne d’échantillon des délais de livraison pour les produits commandés par courrier électronique, x ± <b>Confidence_Norm</b> est une plage de moyennes de population. Pour toute moyenne de population, μ0, dans cette plage, la probabilité d’obtenir une moyenne d’échantillon supérieure à μ0 à x est supérieure à alpha ; pour toute moyenne de population, μ0, non dans cette plage, la probabilité d’obtenir un échantillon plus loin de μ0 que x est inférieure à alpha. En d’autres termes, supposons que x, standard_dev et la taille sont utilisés pour construire un test à deux points au niveau de pertinence alpha de l’hypothèse que la moyenne de population est μ0. Ensuite, nous ne rejetons pas cette hypothèse si μ0 est dans l’intervalle de confiance et rejetons cette hypothèse si μ0 n’est pas dans l’intervalle de confiance. L’intervalle de confiance ne permet pas d’inférence qu’il existe une probabilité 1 – alpha que le package suivant prendra un temps de livraison qui se trouve dans l’intervalle de confiance.</para>
          <para>Si un argument n’est pas <b>un</b> Confidence_Norm génère une erreur. </para>
          <para>Si alpha ≤ 0 ou alpha ≥ 1, <b>Confidence_Norm</b> génère une erreur. </para>
          <para>Si standard_dev ≤ 0, <b>Confidence_Norm</b> génère une erreur. </para>
          <para>Si taille n’est pas un entier, il est tronqué.</para>
          <para>Si la &lt; taille 1 est <b>Confidence_Norm</b> génère une erreur. </para>
          <para>Si nous supposons qu’alpha est égal à 0,05, calculez la zone sous la courbe normale standard égale à (1 - alpha) ou 95 %. Cette valeur est ± 1,96. L’intervalle de confiance est donc : 

</para>
          <para>Figure 1 : Intervalle de confiance</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alpha : niveau de pertinence utilisé pour calculer le niveau de confiance. Le niveau de confiance est égal à 100*(1 - alpha)%, ou en d’autres termes, un alpha de 0,05 indique un niveau de confiance de 95 %.</param>
        <param name="Arg2">Standard_dev - Écart-type de population pour la plage de données et est supposé être connu.</param>
        <param name="Arg3">Taille : taille de l’échantillon.</param>
        <summary>Renvoie l’intervalle de confiance pour la moyenne d’une population, à l’aide de la probabilité d’une variable aléatoire suivant une loi T de Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas <b>unnumérique, Confidence_T</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si alpha ≤ 0 ou alpha ≥ <b>1,</b> Confidence_T renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si standard_dev ≤ 0, <b>Confidence_T</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si taille n’est pas un entier, il est tronqué.</para>
          <para>Si la taille est égale à 1, <b>Confidence_T</b> renvoie #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la taille est égale à 1, <b>Confidence_T</b> renvoie #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La valeur dans unité_de à convertir.</param>
        <param name="Arg2">Les unités pour le nombre.</param>
        <param name="Arg3">Les unités du résultat. <b>Convert</b> accepte les valeurs de texte suivantes (entre guillemets) pour from_unit et to_unit qui sont répertoriés dans la section Remarques ci-dessous.</param>
        <summary>Convertit un nombre d'un système de mesure vers un autre. Par exemple, <b>Convert</b> peut convertir un tableau de distances en miles en une table de distances en kilomètres.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Gram</term>
              <description>« g »</description>
            </item>
            <item>
              <term>Sous-groupe</term>
              <description>« sg »</description>
            </item>
            <item>
              <term>Livre (avoirdupois)</term>
              <description>« lbm »</description>
            </item>
            <item>
              <term>U (unité de masse atomique)</term>
              <description>« u »</description>
            </item>
            <item>
              <term>Once (avoirdupois)</term>
              <description>« ozm »</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Meter</term>
              <description>« m »</description>
            </item>
            <item>
              <term>Mille terrestre</term>
              <description>« mi »</description>
            </item>
            <item>
              <term>Mille nautique</term>
              <description>« Nmi »</description>
            </item>
            <item>
              <term>Inch</term>
              <description>« in »</description>
            </item>
            <item>
              <term>Foot</term>
              <description>« ft »</description>
            </item>
            <item>
              <term>yard</term>
              <description>« yd »</description>
            </item>
            <item>
              <term>Anggul</term>
              <description>« ang »</description>
            </item>
            <item>
              <term>Pica (1/72 in.)</term>
              <description>« Pica »</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Year</term>
              <description>« yr »</description>
            </item>
            <item>
              <term>Day</term>
              <description>« day »</description>
            </item>
            <item>
              <term>Heure</term>
              <description>« hr »</description>
            </item>
            <item>
              <term>Minute</term>
              <description>« mn »</description>
            </item>
            <item>
              <term>Deuxième</term>
              <description>« sec »</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pascal</term>
              <description>"Pa" ( ou "p ")</description>
            </item>
            <item>
              <term>Antélité</term>
              <description>"atm" (ou "at")</description>
            </item>
            <item>
              <term>mm de Mercure</term>
              <description>« mmHg »</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Newton</term>
              <description>« N »</description>
            </item>
            <item>
              <term>Driez</term>
              <description>"dyn" ( ou "Dy ")</description>
            </item>
            <item>
              <term>Force en livre</term>
              <description>« lbf »</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Joule</term>
              <description>« J »</description>
            </item>
            <item>
              <term>Erg</term>
              <description>« e »</description>
            </item>
            <item>
              <term>Calorie thermodynamique</term>
              <description>« c »</description>
            </item>
            <item>
              <term>Calorie IL</term>
              <description>« cal »</description>
            </item>
            <item>
              <term>Électronvolt</term>
              <description>"eV" ( ou "eV ")</description>
            </item>
            <item>
              <term>Heure de puissance</term>
              <description>"HPh" ( ou "hh ")</description>
            </item>
            <item>
              <term>Heure-heure</term>
              <description>« Wh » (ou « wh »)</description>
            </item>
            <item>
              <term>Pied/livre</term>
              <description>« flb »</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU" ( ou "Btu ")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Puissance</term>
              <description>"HP" ( ou "h ")</description>
            </item>
            <item>
              <term>Yézy</term>
              <description>"W" ( ou "w ")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Magasins</term>
              <description>« T »</description>
            </item>
            <item>
              <term>Gauss</term>
              <description>« ga »</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Degré Celsius</term>
              <description>"C" ( ou "cel ")</description>
            </item>
            <item>
              <term>Degré Fahrenheit</term>
              <description>"Fa" ( ou "fah ")</description>
            </item>
            <item>
              <term>Station d’été</term>
              <description>"K" ( ou "kel ")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Sondée</term>
              <description>« tsp »</description>
            </item>
            <item>
              <term>Résoe</term>
              <description>« tbs »</description>
            </item>
            <item>
              <term>Once liquide</term>
              <description>« oz »</description>
            </item>
            <item>
              <term>Coupe</term>
              <description>« cup »</description>
            </item>
            <item>
              <term>Pinte américaine</term>
              <description>"pt" ( ou "us_pt ")</description>
            </item>
            <item>
              <term>Pinte anglaise</term>
              <description>« uk_pt »</description>
            </item>
            <item>
              <term>Quart</term>
              <description>« qt »</description>
            </item>
            <item>
              <term>Tyz</term>
              <description>« gal »</description>
            </item>
            <item>
              <term>Tyz</term>
              <description>"l" ( ou "lt ")</description>
            </item>
          </list>
          <para>Les préfixes suivants d'unité abrégée peuvent être ajoutés à toute valeur unité_de ou unité_vers métrique.</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>« E »</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>« P »</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>« T »</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>« G »</description>
            </item>
            <item>
              <term>méga</term>
              <description>1E+06</description>
              <description>« M »</description>
            </item>
            <item>
              <term>kilo</term>
              <description>1E+03</description>
              <description>« k »</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>« h »</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>« e »</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>« d »</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>« c »</description>
            </item>
            <item>
              <term>milli</term>
              <description>1E-03</description>
              <description>« m »</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>« u »</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>« n »</description>
            </item>
            <item>
              <term>contrôle</term>
              <description>1E-12</description>
              <description>« p »</description>
            </item>
            <item>
              <term>femto</term>
              <description>1E-15</description>
              <description>« f »</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>« a »</description>
            </item>
          </list>
          <para>Si les types de données d’entrée sont incorrects, <b>Convert</b> génère une erreur. </para>
          <para>Si l’unité n’existe pas, <b>Convert</b> génère une erreur. </para>
          <para>Si l’unité ne prend pas en charge un préfixe d’unité abrégé, <b>Convert</b> génère une erreur. </para>
          <para>Si les unités sont dans des groupes différents, <b>Convert</b> génère une erreur. </para>
          <para>Les noms d'unité et les préfixes respectent le casse.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Plage de valeurs de cellule.</param>
        <param name="Arg2">Seconde plage de valeurs de cellule.</param>
        <summary>Renvoie le coefficient de corrélation des <paramref name="Arg1" /> plages de <paramref name="Arg2" /> cellules et des plages.</summary>
        <returns>To be added.</returns>
        <remarks><para>Le coefficient de corrélation permet de déterminer la relation entre deux propriétés. Par exemple, vous pouvez examiner la relation entre la température moyenne d'un endroit et l'utilisation de climatiseurs.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Si correl génère une erreur et qu’il a un nombre différent <paramref name="Arg1" /> <paramref name="Arg2" /> de points de données. <b></b> </para>
          <para>Si l’un ou l’autre est vide <paramref name="Arg1" /> ou si s <paramref name="Arg2" /> (l’écart-type) de leurs valeurs est égal à zéro, <b>Correl</b> génère une erreur. </para>
          <para>L’équation du coefficient de corrélation est la suivante :</para>
          <para>Figure 1 : Équation du coefficient de corrélation</para>
          <para> </para>
          <para> </para>
          <para>où x et y sont les moyennes d’échantillon Average(Arg1) et Average(Arg2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tout nombre réel pour lequel vous souhaitez trouver le cosinus hyperbolique.</param>
        <summary>Renvoie le cosinus hyperbolique d'un nombre.</summary>
        <returns>To be added.</returns>
        <remarks><para>La formule pour le cosinus hyperbolique est : </para>
          <para>Figure 1 : Formule du cosine hyperbolique</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle en radians pour lequel vous souhaitez la cotangente.</param>
        <summary>Renvoie la cotangente d’un angle.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle en radians pour lequel vous souhaitez la cotangente hyperbolique.</param>
        <summary>Renvoie la cotangente hyperbolique d’un nombre.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 à 30 arguments qui peuvent contenir ou faire référence à un certain nombre de types de données différents, mais seuls les nombres sont comptabilisés.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Compte le nombre de cellules contenant des nombres, ainsi que les nombres de la liste d'arguments.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez <b>Count</b> pour obtenir le nombre d’entrées dans un champ numérique qui se trouve dans une plage ou un tableau de nombres. </para>
          <para>Les arguments ayant la forme de nombres, de dates ou de transcriptions textuelles sont comptabilisés.</para>
          <para>Les valeurs logiques et les transcriptions textuelles des nombres que vous entrez directement dans la liste d'arguments sont comptabilisées.</para>
          <para>Les arguments représentant des valeurs d'erreur ou du texte ne pouvant pas être converti en nombre sont ignorés.</para>
          <para>Si un argument est une matrice ou une référence, seuls les nombre qu'elles contiennent sont comptabilisés. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur sont ignorés.</para>
          <para>Si vous souhaitez compter des valeurs logiques, du texte ou des valeurs d’erreur, utilisez la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> fonction.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 à 30 arguments représentant les valeurs à compter.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Compte le nombre de cellules non vides, ainsi que les valeurs dans la liste d'arguments.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez <b>CountA pour</b> compter le nombre de cellules qui contiennent des données dans une plage ou un tableau.</para>
          <para>Une valeur peut être n'importe quel type d'informations, notamment des valeurs d'erreur et du texte vide (""). Les cellules vides ne sont pas des valeurs.</para>
          <para>Si un argument est une matrice ou une référence, seules leurs valeurs sont utilisées. Les cellules vides et le texte sont ignorés.</para>
          <para>Si vous n’avez pas besoin de compter les valeurs logiques, le texte ou les valeurs d’erreur, utilisez la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> fonction.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">La plage dans laquelle vous voulez compter les cellules vides.</param>
        <summary>Compte les cellules vides d'une plage de cellules donnée.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les cellules contenant des formules qui renvoient "" (texte vide) sont également comptabilisées. Les cellules contenant des valeurs zéro sont ignorées.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La plage de cellules dans laquelle vous voulez compter les cellules.</param>
        <param name="Arg2">Critères sous la forme d’un nombre, d’une expression, d’une référence de cellule ou d’un texte qui définit les cellules à compter. Par exemple, les critères peuvent être exprimés comme 32, « 32 », « 32 », « apples » &gt; ou B4.</param>
        <summary>Compte le nombre de cellules à l'intérieur d'une plage qui répondent aux critères donnés.</summary>
        <returns>Renvoie <see cref="T:System.Double" /> .</returns>
        <remarks><para>Vous pouvez inclure les caractères génériques suivants dans les critères : le point d'interrogation (?) et l'astérisque (*). Le premier correspond à tout caractère unique et le second à toute séquence de caractères. Pour rechercher un réel point d'interrogation ou astérisque, entrez un tilde (~) devant le caractère.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une ou plusieurs plages dans lesquelles évaluer les critères associés.</param>
        <param name="Arg2">Au moins un critère sous la forme d'un nombre, d'une expression, d'une référence de cellule ou de texte qui définit quelles cellules seront comptées. Par exemple, les critères peuvent être exprimés comme 32, « 32 », « 32 », « apples » &gt; ou B4.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Compte le nombre de cellules à l'intérieur d'une plage qui répondent à plusieurs critères.</summary>
        <returns>To be added.</returns>
        <remarks><para>Une cellule de la plage est comptabilisée uniquement si tous les critères spécifiés se vérifient pour cette cellule.</para>
          <para>Si une cellule d’un argument est une cellule vide, <b>CountIfs</b> la traite comme une valeur 0. </para>
          <para>Vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans criteria. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La date d'escompte du titre. Il s'agit de la date suivant la date d'émission à laquelle le titre est échangé à l'acheteur.</param>
        <param name="Arg2">La date d'échéance du titre. Il s'agit de la date d'expiration du titre.</param>
        <param name="Arg3">Le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg4">Type de base de décompte des jours à utiliser.</param>
        <summary>Renvoie le nombre de jours entre le début de la période de coupon et la date d'escompte.</summary>
        <returns>To be added.</returns>
        <remarks><para>Le tableau suivant contient la liste des valeurs pour <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date d'escompte est la date à laquelle un acheteur achète un coupon, comme un titre. La date d'échéance est la date d'expiration du coupon. Par exemple, supposons qu'un titre valable 30 ans est émis le 1er janvier 2008 et qu'il est acheté six mois plus tard. La date d'émission est alors le 1er janvier 2008, la date d'escompte le 1er juillet 2008 et la date d'échéance le 1er janvier 2038, c'est-à-dire 30 ans après la date d'émission du 1er janvier 2008.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>CoupDayBs</b> génère une erreur. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>CoupDayBs</b> génère une erreur. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>CoupDayBs</b> génère une erreur. </para>
          <para>Si le règlement ≥ échéance, <b>CoupDayBs</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La date d'escompte du titre. Il s'agit de la date suivant la date d'émission à laquelle le titre est échangé à l'acheteur.</param>
        <param name="Arg2">La date d'échéance du titre. Il s'agit de la date d'expiration du titre.</param>
        <param name="Arg3">Le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg4">Type de base de décompte des jours à utiliser.</param>
        <summary>Renvoie le nombre de jours dans la période du coupon contenant la date d'escompte.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <para>Le tableau suivant contient les valeurs utilisées dans <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date d'escompte est la date à laquelle un acheteur achète un coupon, comme un titre. La date d'échéance est la date d'expiration du coupon. Par exemple, supposons qu'un titre valable 30 ans est émis le 1er janvier 2008 et qu'il est acheté six mois plus tard. La date d'émission est alors le 1er janvier 2008, la date d'escompte le 1er juillet 2008 et la date d'échéance le 1er janvier 2038, c'est-à-dire 30 ans après la date d'émission du 1er janvier 2008.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>CoupDays</b> génère une erreur. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>CoupDays</b> génère une erreur. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>CoupDays</b> génère une erreur. </para>
          <para>Si le règlement ≥ échéance, <b>CoupDays</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La date d'escompte du titre. Il s'agit de la date suivant la date d'émission à laquelle le titre est échangé à l'acheteur.</param>
        <param name="Arg2">La date d'échéance du titre. Il s'agit de la date d'expiration du titre.</param>
        <param name="Arg3">Le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg4">Type de base de décompte des jours à utiliser.</param>
        <summary>Renvoie le nombre de jours séparant la date d'escompte de la date du prochain coupon.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <para>Le tableau suivant contient les valeurs utilisées dans <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>CoupDaysNc</b> génère une erreur. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>CoupDaysNc</b> génère une erreur. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>CoupDaysNc</b> génère une erreur. </para>
          <para>Si le règlement ≥ échéance, <b>CoupDaysNc</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La date d'escompte du titre. Il s'agit de la date suivant la date d'émission à laquelle le titre est échangé à l'acheteur.</param>
        <param name="Arg2">La date d'échéance du titre. Il s'agit de la date d'expiration du titre.</param>
        <param name="Arg3">Le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg4">Type de base de décompte des jours à utiliser.</param>
        <summary>Renvoie un nombre représentant la prochaine date de coupon après la date d'escompte.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <para>Le tableau suivant contient les valeurs utilisées dans <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>CoupNcd</b> génère une erreur. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>CoupNcd</b> génère une erreur. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>CoupNcd</b> génère une erreur. </para>
          <para>Si le règlement ≥ échéance, <b>CoupNcd</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La date d'escompte du titre. Il s'agit de la date suivant la date d'émission à laquelle le titre est échangé à l'acheteur.</param>
        <param name="Arg2">La date d'échéance du titre. Il s'agit de la date d'expiration du titre.</param>
        <param name="Arg3">Le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg4">Type de base de décompte des jours à utiliser.</param>
        <summary>Renvoie le nombre de coupons à régler entre la date d'escompte et la date d'échéance, arrondi au plus proche coupon entier.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <para>Le tableau suivant contient les valeurs utilisées dans <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>CoupNum</b> génère une erreur. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>CoupNum</b> génère une erreur. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>CoupNum</b> génère une erreur. </para>
          <para>Si le règlement ≥ échéance, <b>CoupNum</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La date d'escompte du titre. Il s'agit de la date suivant la date d'émission à laquelle le titre est échangé à l'acheteur.</param>
        <param name="Arg2">La date d'échéance du titre. Il s'agit de la date d'expiration du titre.</param>
        <param name="Arg3">Le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg4">Type de base de décompte des jours à utiliser.</param>
        <summary>Renvoie la date de coupon précédente avant la date de règlement.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <para>Le tableau suivant contient les valeurs utilisées dans <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>CoupPcd</b> génère une erreur. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>CoupPcd</b> génère une erreur. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>CoupPcd</b> génère une erreur. </para>
          <para>Si le règlement ≥ échéance, <b>CoupPcd</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La première plage de cellules d’entiers.</param>
        <param name="Arg2">La deuxième plage de cellules d’entiers.</param>
        <summary>Renvoie la covariance, moyenne du produit des écarts de chaque paire de points.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> la méthode et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> méthode.</para>
          <para>La covariance permet de déterminer la relation entre deux ensembles de données. Par exemple, vous pouvez examiner si des revenus plus importants impliquent des niveaux d’éducation plus élevés.</para>
          <para>Les arguments doivent être des nombres ou des noms, des matrices ou des références contenant des nombres.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Si et que le nombre de points de données est <paramref name="Arg1" /> <paramref name="Arg2" /> différent, <b>Covar</b> génère une erreur. </para>
          <para>Si <paramref name="Arg1" /> <paramref name="Arg2" /> l’une ou l’autre est vide, <b>Covar</b> génère une erreur. </para>
          <para>La covariance est : </para>
          <para>Figure 1 : Équation de la covariance</para>
          <para> </para>
          <para> </para>
          <para>où x et y sont les moyennes d’échantillon AVERAGE(array1) et AVERAGE(array2), et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La première plage de cellules d’entiers.</param>
        <param name="Arg2">La deuxième plage de cellules d’entiers.</param>
        <summary>Renvoie la covariance de population, moyenne des produits des écarts pour chaque série d’observations.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez <b>Covariance_P</b> pour déterminer la relation entre deux jeux de données. Par exemple, vous pouvez examiner si des revenus plus importants impliquent des niveaux d’éducation plus élevés.</para>
          <para>Les arguments doivent être des nombres ou des noms, des matrices ou des références contenant des nombres.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Si <paramref name="Arg1" /> vous avez différents <paramref name="Arg2" /> nombres de points de données, <b>Covariance_P</b> génère une erreur. </para>
          <para>Si <paramref name="Arg1" /> <paramref name="Arg2" /> l’une ou <b>l’autre est vide, Covariance_P</b> génère une erreur. </para>
          <para>La covariance est : </para>
          <para>Figure 1 : Équation de la covariance</para>
          <para> </para>
          <para> </para>
          <para>où x et y sont les moyennes d’échantillon AVERAGE(array1) et AVERAGE(array2), et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 : première plage de cellules d’nombres integers.</param>
        <param name="Arg2">Array2 : deuxième plage de cellules d’nombres integers.</param>
        <summary>Renvoie la covariance d’échantillon, moyenne des produits des écarts pour chaque paire de points de deux séries.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des matrices ou des références contenant des nombres.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Si matrice1 et matrice2 ont différents nombres de points de données, <b>Covariance_S</b> renvoie la valeur d#N/A. </para>
          <para>Si matrice1 ou matrice2 est vide ou contient seulement 1 point de données <b>chacun,</b> Covariance_S renvoie la #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Renvoie un nombre entier de 32 bits qui indique l’application dans laquelle cet objet a été créé. En lecture seule <b>integer</b> (int in C#).</summary>
        <value>To be added.</value>
        <remarks><para>Si l'objet a été créé dans Microsoft Excel, cette propriété renvoie la chaîne XCEL, qui équivaut au nombre hexadécimal 5843454C. La propriété <b>Creator</b> est conçue pour être utilisée dans Microsoft Excel pour Macintosh, dans lequel chaque application possède un code de créateur à quatre caractères. Par exemple, Microsoft Excel possède le code de créateur XCEL.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le nombre de tirages de Bernoulli.</param>
        <param name="Arg2">La probabilité d'obtenir un succès à chaque tirage.</param>
        <param name="Arg3">La valeur critère.</param>
        <summary>Renvoie la plus petite valeur pour laquelle la distribution binomiale cumulée est supérieure ou égale à une valeur critère.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez cette fonction pour les applications d'assurance qualité. Par exemple, utilisez <b>CritBinom</b> pour déterminer le plus grand nombre de parties défectueuses autorisées à sortir d’une ligne d’assembly sans rejeter le lot entier.</para>
          <para>Si un argument n’est pas unnumérique, <b>CritBinom</b> génère une erreur. </para>
          <para>Si tirages n'est pas un entier, il est tronqué.</para>
          <para>Si les &lt; essais sont 0, <b>CritBinom</b> génère une erreur. </para>
          <para>Si probability_s est &lt; 0 ou probability_s &gt; 1, <b>CritBinom</b> génère une erreur. </para>
          <para>Si alpha &lt; 0 ou alpha &gt; 1, <b>CritBinom</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle en radians pour lequel vous souhaitez la cosécante.</param>
        <summary>Renvoie la cosécante d’un angle.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle en radians pour lequel vous souhaitez la cosécante hyperbolique.</param>
        <summary>Renvoie la cosécante hyperbolique d’un angle.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le taux d'intérêt.</param>
        <param name="Arg2">Le nombre total de périodes de remboursement.</param>
        <param name="Arg3">La valeur actuelle.</param>
        <param name="Arg4">La première période dans le calcul. Les périodes de remboursement sont numérotées en commençant par 1.</param>
        <param name="Arg5">La dernière période du calcul.</param>
        <param name="Arg6">La durée du remboursement.</param>
        <summary>Renvoie l'intérêt cumulé payé sur un prêt entre période_début et période_fin.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les tableaux suivants répertorient les valeurs utilisées dans <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (zéro)</term>
              <description>Remboursement à la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Remboursement au début de la période</description>
            </item>
          </list>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous faites des paiements mensuels sur un prêt de quatre ans à un taux d’intérêt annuel de 12 %, utilisez 12 %/12 pour le taux et 4*12 pour <paramref name="Arg2" /> . Si vous faites des paiements annuels sur le même prêt, utilisez 12 % pour le taux et 4 pour <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> <paramref name="Arg5" /> et le type sont tronqués en integers. </para>
          <para>Si le taux ≤ 0, ≤ 0 ou <paramref name="Arg2" /> <paramref name="Arg3" /> ≤ 0, <b>CumIPmt</b> génère une erreur. </para>
          <para>Si <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 ou <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumIPmt</b> génère une erreur. </para>
          <para><paramref name="Arg6" />S’il s’agit d’un nombre autre que 0 ou 1, <b>CumIPmt</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Le taux d'intérêt.</param>
        <param name="Arg2">Le nombre total de périodes de remboursement.</param>
        <param name="Arg3">La valeur actuelle.</param>
        <param name="Arg4">La première période dans le calcul. Les périodes de remboursement sont numérotées en commençant par 1.</param>
        <param name="Arg5">La dernière période du calcul.</param>
        <param name="Arg6">La dernière période du calcul.</param>
        <summary>Renvoie le montant cumulé du remboursement du capital entre période_début et période_fin.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les tableaux suivants répertorient les valeurs utilisées dans <paramref name="Arg6" /> .</para>
          <list type="table">
            <item>
              <term>0 (zéro)</term>
              <description>Remboursement à la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Remboursement au début de la période</description>
            </item>
          </list>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous faites des paiements mensuels sur un prêt de quatre ans à un taux d’intérêt annuel de 12 %, utilisez 12 %/12 pour le taux et 4*12 pour <paramref name="Arg2" /> . Si vous faites des paiements annuels sur le même prêt, utilisez 12 % pour le taux et 4 pour <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" /> <paramref name="Arg5" /> et le type sont tronqués en integers. </para>
          <para>Si le taux ≤ 0, ≤ 0 ou <paramref name="Arg2" /> <paramref name="Arg3" /> ≤ 0, <b>CumPrinc</b> génère une erreur. </para>
          <para>Si <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 ou <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumPrinc</b> génère une erreur. </para>
          <para><paramref name="Arg6" />S’il s’agit d’un nombre autre que 0 ou 1, <b>CumPrinc</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">La plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">La plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Donne la moyenne des valeurs dans la colonne d'une liste ou d'une base de données qui correspondent aux conditions que vous avez spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où entryis le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) et end_date (Arg1) sont les deux dates entre lesquelles vous souhaitez connaître le nombre de jours.</param>
        <param name="Arg2">start_date(Arg2) et end_date (Arg1) sont les deux dates entre lesquelles vous souhaitez connaître le nombre de jours.</param>
        <summary>Renvoie le nombre de jours entre les deux dates.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Les deux dates entre lesquelles vous souhaitez connaître le nombre de jours. Si date_début (Arg1) survient après date_fin (Arg2), Days360 renvoie un nombre négatif. Il convient d'entrer les dates à l'aide de la fonction DATE ou en tant que résultats d'autres formules ou fonctions.</param>
        <param name="Arg2">Les deux dates entre lesquelles vous souhaitez connaître le nombre de jours. Si date_début (Arg1) survient après date_fin (Arg2), Days360 renvoie un nombre négatif. Il convient d'entrer les dates à l'aide de la fonction DATE ou en tant que résultats d'autres formules ou fonctions.</param>
        <param name="Arg3">Valeur boolé européenne qui spécifie s’il faut utiliser la méthode américaine ou européenne dans le calcul.</param>
        <summary>Renvoie le nombre de jours entre deux dates sur la base d'une année de 360 jours (douze mois de 30 jours) qui est utilisée dans certains calculs comptables.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez cette fonction pour vous aider à calculer les paiements si votre système de comptabilité est basé sur douze mois de 30 jours. Les tableaux suivants contiennent les valeurs pour <paramref name="Arg3" /> .</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> ou omis</term>
              <description>Méthode américaine (NASD). Si la date de départ est le 31 d'un mois, elle devient égale au 30 du même mois. Si la date de fin est le 31 d'un mois et la date de début est antérieure au 30 d'un mois, la date de fin devient égale au 1er du mois suivant ; sinon, la date de fin devient égale au 30 du même mois.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Méthode européenne. Les dates de début et de fin survenant le 31 d'un mois deviennent égales au 30 du même mois.</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coût - coût initial de l'immobilisation.</param>
        <param name="Arg2">Récupération - valeur à la fin de l'amortissement (parfois appelée valeur de récupération de l'immobilisation).</param>
        <param name="Arg3">Vie, le nombre de périodes sur lesquelles l'immobilisation est amortie (parfois appelée durée de vie utile du bien).</param>
        <param name="Arg4">Période, la période pour laquelle vous souhaitez calculer l'amortissement. La période et la vie doivent être exprimées dans la même unité.</param>
        <param name="Arg5">Mois, le nombre de mois dans la première année. Si aucune valeur n'est spécifiée, la valeur par défaut utilisée est 12.</param>
        <summary>Renvoie l'amortissement d'un bien durant une période spécifiée en utilisant la méthode de l'amortissement dégressif à taux fixe.</summary>
        <returns>To be added.</returns>
        <remarks><para>La méthode de l'amortissement dégressif à taux fixe calcule l'amortissement à un taux fixe. La base de données utilise les formules suivantes pour calculer l’amortissement sur une période :</para>
          <para>(coût - amortissement total des périodes précédentes) * taux</para>
          <para>où :</para>
          <para>taux = 1 - ((récupération /coût) ^ (1 /vie)), arrondi à trois décimales</para>
          <para>L'amortissement de la première et de la dernière période est un peu particulier. Pour la première période, la base de données utilise cette formule :</para>
          <para>coût * taux * mois / 12</para>
          <para>Pour la dernière période, la base de données utilise cette formule :</para>
          <para>((coût - amortissement total des périodes précédentes) * taux * (12 - mois)) / 12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texte ou référence à une cellule contenant le texte à modifier.</param>
        <summary>Cette méthode convertit les caractères à demi-chasse (un seul octet) en une chaîne de caractères à pleine chasse (sur deux octets). Le nom de la fonction (et les caractères qu'elle convertit) dépend des paramètres de langue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'il inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Compte les cellules contenant des nombres dans une colonne d'une liste ou d'une base de données qui répondent aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Compte les cellules non vides dans une colonne d'une liste ou d'une base de données qui répondent aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coût - coût initial de l'immobilisation.</param>
        <param name="Arg2">Récupération, la valeur au terme de l'amortissement (parfois appelée valeur de récupération). Cette valeur peut être égale à 0.</param>
        <param name="Arg3">Vie, le nombre de périodes sur lesquelles l'immobilisation est amortie (parfois appelée durée de vie utile du bien).</param>
        <param name="Arg4">Période, la période pour laquelle vous souhaitez calculer l'amortissement. La période et la vie doivent être exprimées dans la même unité.</param>
        <param name="Arg5">Facteur, le taux auquel l'amortissement décline. Si vous omettez le facteur, sa valeur est 2 par défaut (la méthode d'amortissement dégressif à taux double).</param>
        <summary>Renvoie l'amortissement d'un bien durant une période spécifiée suivant la méthode de l'amortissement dégressif à taux double ou selon un coefficient à spécifier.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les cinq arguments doivent être des nombres positifs.</para>
          <para>La méthode d’amortissement dégressif à taux double calcule l’amortissement à un taux accéléré. L’amortissement est plus important au cours de la première période, puis ralentit au cours des périodes suivantes <b>Ddb utilise</b> la formule suivante pour calculer l’amortissement pour une période :</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Modifiez le facteur si vous ne voulez pas utiliser la méthode d'amortissement dégressif à taux double.</para>
          <para>Utilisez la fonction si vous souhaitez basculer vers la méthode d’amortissement linéaire lorsque l’amortissement est supérieur au calcul de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> l’amortissement décroissement.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, l'entier décimal à convertir. Si le nombre est négatif, les valeurs de position valides sont ignorées et <b>Dec2Bin</b> renvoie un nombre binaire de 10 caractères (10 bits) dans lequel le bit le plus significatif est le bit de signe. Les neuf autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <param name="Arg2">Nb_car - nombre de caractères à utiliser. Si des caractères sont <b>omis, Dec2Bin</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre décimal en binaire.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le &lt; nombre est -512 ou s’il est &gt; 511, <b>Dec2Bin</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le nombre n’est pas un nombre, <b>Dec2Bin</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si <b>Dec2Bin</b> nécessite plus de caractères, il renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas unnumérique, <b>Dec2Bin</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs sont zéro ou négatives, <b>Dec2Bin</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, l'entier décimal à convertir. Si le nombre est négatif, les caractères sont ignorés et <b>Dec2Hex</b> renvoie un nombre hexadécimal de 10 caractères (40 bits) dans lequel le bit le plus significatif est le bit de signe. Les 39 autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <param name="Arg2">Nb_car - nombre de caractères à utiliser. Si des caractères sont <b>omis, Dec2Hex</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre décimal en hexadécimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre &lt; est -549 755 813 888 ou s’il est &gt; 549 755 813 887, <b>Dec2Hex</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le nombre n’est pas un nombre, <b>Dec2Hex</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si <b>Dec2Hex</b> requiert plus de caractères que de caractères, il renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas unnumérique, <b>Dec2Hex</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs sont <b>négatives, Dec2Hex</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, l'entier décimal à convertir. Si le nombre est négatif, les caractères sont ignorés et <b>Dec2Oct</b> renvoie un nombre octal de 10 caractères (30 bits) dans lequel le bit le plus significatif est le bit de signe. Les 29 autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <param name="Arg2">Nb_car - nombre de caractères à utiliser. Si des caractères sont <b>omis, Dec2Oct</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre décimal en octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre &lt; est -536 870 912 ou s’il est &gt; 536 870 911, <b>Dec2Oct</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le nombre n’est pas un nombre, <b>Dec2Oct</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si <b>Dec2Oct</b> nécessite plus de caractères que de caractères, il renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas unnumérique, <b>Dec2Oct</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs sont <b>négatives, Dec2Oct</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre à convertir.</param>
        <param name="Arg2">Radix de base du nombre que vous convertissez.</param>
        <summary>Convertit une représentation textuelle d’un nombre dans une base donnée en nombre décimal.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle, l'angle en radians que vous convertissez.</param>
        <summary>Convertit des radians en degrés.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, le premier nombre.</param>
        <param name="Arg2">Nombre2, le second nombre. S'il est omis, sa valeur par défaut est zéro.</param>
        <summary>Vérifie si deux valeurs sont égales. Renvoie 1 si nombre1 = nombre2 ; sinon, renvoie 0.</summary>
        <returns>To be added.</returns>
        <remarks><para>Utilisez cette fonction pour filtrer un ensemble de valeurs. Par exemple, en additionant plusieurs <b>fonctions Delta,</b> vous calculez le nombre de paires égales. Cette fonction est aussi appelée fonction delta de Kronecker.</para>
          <para>Si number1 n’est pas un nombre, <b>Delta</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si number2 n’est pas un nombre, <b>Delta</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numéro1, numéro2, ... - sont 1 à 30 arguments pour lesquels vous souhaitez calculer la sommes des écarts carrés. Vous pouvez également utiliser une matrice unique ou une référence à une matrice au lieu des arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la somme des carrés des écarts entre les points de données et leur moyenne échantillonnée.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres. </para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte. </para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses. </para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs. </para>
          <para>L'équation de la somme des écarts carrés est : 

 </para>
          <para>Figure 1 : Équation de la somme des écarts carrés</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Extrait une valeur unique d'une colonne d'une liste ou d'une base de données répondant aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Pr, le prix du titre pour une valeur nominale de 100 $.</param>
        <param name="Arg4">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg5">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le taux d'escompte d'un titre.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte. </para>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date d'escompte est la date à laquelle un acheteur achète un coupon, comme un titre. La date d'échéance est la date d'expiration du coupon. Par exemple, supposons qu'un titre valable 30 ans est émis le 1er janvier 2008 et qu'il est acheté six mois plus tard. La date d'émission est alors le 1er janvier 2008, la date d'escompte le 1er juillet 2008 et la date d'échéance le 1er janvier 2038, c'est-à-dire 30 ans après la date d'émission du 1er janvier 2008.</para>
          <para>La date de règlement, la date d'échéance et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas un numéro de date série valide, <b>Disc</b> renvoie le #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si pr ≤ 0 ou si l’échange ≤ 0, <b>Disc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>Disc</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>Disc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>Le disque</b> est calculé comme suit : </para>
          <para>Figure 1 : Équation pour le calcul de la méthode Disc</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>B = nombre de jours dans une année, en fonction de l’année.</para>
          <para>DSM = nombre de jours entre le règlement et l’échéance.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Renvoie le plus grand nombre dans une colonne d'une liste ou d'une base de données répondant aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Renvoie le plus petit nombre dans une colonne d'une liste ou d'une base de données répondant aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, un nombre, une référence à une cellule contenant un nombre ou une formule qui renvoie un nombre.</param>
        <param name="Arg2">Décimales, le nombre de chiffres à droite de la virgule. Si la valeur est négative, le nombre est arrondi à gauche de la virgule. Si vous omettez les décimales, la valeur par défaut est 2.</param>
        <summary>La fonction présentée dans cette rubrique d'aide permet de convertir un nombre au format texte et d'appliquer un symbole de devise. Le nom de la fonction (et le symbole qu'elle applique) dépend de vos paramètres de langue.</summary>
        <returns>To be added.</returns>
        <remarks><para>La principale différence entre la mise en forme d’une cellule contenant un nombre à l’aide de la commande Cells (menu Format) et la mise en forme d’un nombre directement avec la fonction <b>Dollar</b> est que <b>Dollar</b> convertit son résultat en texte. Un nombre formaté avec la commande Cellules reste un nombre. Vous pouvez continuer à utiliser des nombres au format <b>Dollar</b> dans les formules, car Microsoft Excel convertit les nombres entrés en tant que valeurs de texte en nombres lors du calcul.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fraction_dollar, nombre exprimé sous forme de fraction.</param>
        <param name="Arg2">Fraction, l'entier à utiliser dans le dénominateur de la fraction.</param>
        <summary>Convertit un prix en dollars exprimé sous forme de fraction en un prix en dollars exprimé sous forme de nombre décimal. DOLLARDE permet de converter des nombres fractionnels en dollars, comme des prix de titres, en nombres décimaux.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la fraction n'est pas un entier, elle est tronquée.</para>
          <para>Si la fraction est inférieure à 0, <b>DollarDe</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la fraction est 0, <b>DollarDe</b> renvoie la #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Dollar_décimal, représente un nombre décimal.</param>
        <param name="Arg2">Fraction, l'entier à utiliser dans le dénominateur d'une fraction.</param>
        <summary>Convertit un prix en dollars exprimé sous forme de nombre décimal en prix en dollars exprimé sous forme de fraction. DOLLARFR permet de convertir des nombres décimaux en nombres fractionnels en dollars, comme les prix des titres.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la fraction n'est pas un entier, elle est tronquée.</para>
          <para>Si la fraction est inférieure à 0, <b>DollarFr renvoie</b> la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la fraction est 0, <b>DollarFr renvoie</b> la #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Multiplie les valeurs dans la colonne d'une liste ou d'une base de données qui correspondent aux conditions que vous avez spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Estime l'écart-type d'une population basée sur un échantillon à l'aide des nombres d'une colonne d'une liste ou d'une base de données répondant aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Calcule l'écart-type d'une population basée sur l'ensemble de la population à l'aide des nombres d'une colonne d'une liste ou d'une base de données répondant aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Multiplie les nombres d'une colonne d'une liste ou d'une base de données qui correspondent aux conditions que vous avez spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Réservé à un usage interne. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Coupon, le taux de coupon annuel du titre.</param>
        <param name="Arg4">Rdt - rendement annuel du titre.</param>
        <param name="Arg5">Fréquence, le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg6">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie la durée de Macauley pour une valeur nominale supposée de 100 $. La durée se définie comme la moyenne pondérée de la valeur actuelle des flux financiers et est utilisée comme mesure de la réponse d'un prix d'obligation à des changements de rendement.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Le règlement, l'échéance, la fréquence et la base sont raccourcis à des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>Duration</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si coupon &lt; 0 ou si yld &lt; 0, <b>Duration</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>Duration</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>Duration</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>Duration</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Estime la variance d'une population basée sur un échantillon à l'aide des nombres d'une colonne d'une liste ou d'une base de données répondant aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Base de données, la plage de cellules constituant la liste ou la base de données. Une base de données est une liste de données connexes dans laquelle les lignes d'informations connexes sont des enregistrements et les colonnes de données des champs. La première ligne de la liste contient l'intitulé de chaque colonne.</param>
        <param name="Arg2">Champ, indique la colonne utilisée dans la fonction. Entrez l'intitulé de la colonne entre guillemets doubles, par exemple "Age" ou "Rendement", ou un nombre (sans les guillemets) représentant la position de la colonne dans la liste : 1 pour la première colonne, 2 pour la seconde, etc.</param>
        <param name="Arg3">Critère, la plage de cellules contenant les conditions spécifiées. Vous pouvez utiliser n'importe quelle plage comme argument de critère tant qu'elle inclut au moins un intitulé de colonne et au moins une cellule sous l'intitulé de la colonne dans laquelle vous spécifiez une condition pour la colonne.</param>
        <summary>Calcule la variance d'une population basée sur l'ensemble de la population à l'aide des nombres d'une colonne d'une liste ou d'une base de données répondant aux conditions spécifiées.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans la mesure où le signe égal représente une formule lorsque vous entrez du texte ou une valeur dans une cellule, Microsoft Excel calcule ce que vous entrez ; cependant, ceci peut causer des résultats de filtre inattendus. Pour indiquer un opérateur de comparaison d’égalité pour du texte ou une valeur, tapez les critères sous forme d’expression de chaîne dans la cellule appropriée de la plage de critères : </para>
          <para>=''=entry''</para>
          <para>Où l’entrée est le texte ou la valeur que vous souhaitez trouver. Par exemple :</para>
          <list type="table">
            <item>
              <term>="=Davolio »</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000 »</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Lors du filtrage des données de texte, Excel ne fait pas la distinction entre les caractères en minuscules et en minuscules. Vous pouvez cependant utiliser une formule permettant de faire cette distinction pendant une recherche.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Date_début - une date représentant la date de début. Il convient d'entrer les dates à l'aide de la fonction DATE ou en tant que résultats d'autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</param>
        <param name="Arg2">Mois, le nombre de mois avant et après date_début. Une valeur positive représente une date à venir, une valeur négative une date passée.</param>
        <summary>Renvoie le numéro de série représentant le nombre de mois indiqués avant ou après une date spécifiée (la date_début). EDATE permet de calculer les dates d'échéance survenant le même jour du mois que la date d'émission.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Si start_date n’est pas une date valide, <b>EDate</b> renvoie la date #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si mois n'est pas un entier, il est tronqué.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux_nominal, le taux d'intérêt nominal.</param>
        <param name="Arg2">Nbparan - nombre de périodes par an.</param>
        <summary>Renvoie le taux effectif à partir du taux nominal et du nombre de périodes par an.</summary>
        <returns>To be added.</returns>
        <remarks><para>Nbparan est tronqué de manière à utiliser un entier.</para>
          <para>Si l’un des arguments n’est pas unnumérique, <b>Effect</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si nominal_rate ≤ 0 ou npery &lt; 1, <b>Effect</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>L’effet</b> est calculé comme suit : </para>
          <para>Figure 1 : Équation pour le calcul de la méthode Effect</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texte à coder.</param>
        <summary>L’URL code l’argument.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Date_début - une date représentant la date de début. Il convient d'entrer les dates à l'aide de la fonction DATE ou en tant que résultats d'autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</param>
        <param name="Arg2">Mois, le nombre de mois avant et après date_début. Une valeur positive représente une date à venir, une valeur négative une date passée.</param>
        <summary>Renvoie le numéro de série du dernier jour du mois correspondant au nombre de mois indiqué avant ou après la date_début. EOMONTH permet de calculer les dates d'échéance qui surviennent le dernier jour du mois.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Si start_date n’est pas une date valide, <b>EoMonth</b> renvoie la date #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si start_date plus mois produit une date non valide, <b>EoMonth</b> renvoie la date #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit - limite inférieure pour l’intégration <b>d’Erf</b>.</param>
        <param name="Arg2">Upper_limit - limite supérieure pour l’intégration <b>d’Erf</b>. S’il est omis, Erf s’intègre entre zéro et lower_limit.</param>
        <summary>Renvoie une fonction d’erreur intégrée entre limite_inf et limite_sup.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> méthode.</para>
          <para>Si lower_limit n’est pas unnumérique, <b>Erf</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si lower_limit est négatif, <b>Erf</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si upper_limit n’est pas unnumérique, <b>Erf</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si upper_limit est négatif, <b>Erf</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Figure 1 : Équation pour le calcul de la méthode Erf</para>
          <para> </para>
          <para> </para>
          <para>Figure 2 : Équation pour le calcul de la méthode Erf</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Limite_inf, la limite inférieure pour l’intégration d’ERF.</param>
        <summary>Renvoie la fonction d’erreur intégrée entre zéro et la limite inférieure.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si limite_inf n’est pas un nombre, <b>Erf_Precise</b> génère une erreur. Si limite_inf est négatif, <b>Erf_Precise</b> génère une erreur.</para>
          <para>Figure 1 : Équation pour le calcul de Erf_Precise méthode</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Premier argument.</param>
        <summary>Cette méthode renvoie la valeur de la fonction ERF complémentaire entre le paramètre spécifié et l’infini.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> méthode.</para>
          <para>Si cette fonction n’est pas disponible et renvoie l’erreur #NAME?, vous devez installer et charger le complément Utilitaire d’analyse.</para>
          <para>Si le paramètre n’est pas unnumérique, <b>ErfC</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>Si le paramètre est négatif, <b>ErfC</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valeur servant au calcul.</param>
        <summary>Renvoie la fonction d’erreur complémentaire entre la valeur spécifiée et l’infini.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la valeur spécifiée n’est pas un nombre, <b>ErfC_Precise</b> génère une erreur.</para>
          <para>Si la valeur spécifiée est négative, <b>ErfC_Precise</b> génère une erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, la valeur à arrondir.</param>
        <summary>Renvoie un nombre arrondi à l'entier pair le plus proche. Cette fonction permet de traiter des articles regroupés par deux. Par exemple, une caisse de conditionnement accepte des lignes d'un ou deux articles. La caisse est pleine lorsque le nombre d'articles, arrondi au nombre pair le plus proche, atteint la capacité de la caisse.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n’est pas un nombre, <b>Even</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Indépendamment du signe du nombre, une valeur est arrondie lorsqu'elle n'est pas égale à zéro. Si le nombre est un entier pair, aucun arrondi n'est appliqué.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur de la fonction.</param>
        <param name="Arg2">Lambda, la valeur de paramètre.</param>
        <param name="Arg3">Cumulative, une valeur logique indiquant la forme de fonction exponentielle à fournir. Si cumulative est <b>true,</b> <b>Expon_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution exponentielle. Utilisez la fonction LOI.EXPONENTIELLE.N pour prévoir la durée séparant des événements, tel le temps mis par un distributeur automatique bancaire pour délivrer de l’argent. Par exemple, vous pouvez utiliser LOI.EXPONENTIELLE.N pour calculer la probabilité que l’opération dure moins d’une minute.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x ou lambda n’est pas unnumérique, <b>Expon_Dist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>Expon_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si lambda ≤ 0, <b>Expon_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la fonction de densité de probabilité est la suivante : 

 </para>
          <para>Figure 1 : Équation de la fonction densité de probabilité</para>
          <para> </para>
          <para> </para>
          <para>L’équation de la fonction de distribution cumulative est la suivante : 

</para>
          <para>Figure 2 : Équation de la fonction de distribution cumulative</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur de la fonction.</param>
        <param name="Arg2">Lambda, la valeur de paramètre.</param>
        <param name="Arg3">Cumulative, une valeur logique indiquant la forme de fonction exponentielle à fournir. Si cumulative est <b>true</b>, <b>ExponDist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution exponentielle. Utilisez <b>ExponDist pour</b> modéliser le temps entre les événements, par exemple le temps qu’un caissier bancaire automatisé met pour remettre de l’argent. Par exemple, vous pouvez utiliser <b>ExponDist</b> pour déterminer la probabilité que le processus prenne au maximum 1 minute.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Si x ou lambda n’est pas unnumérique, <b>ExponDist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>ExponDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si lambda ≤ 0, <b>ExponDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la fonction de densité de probabilité est la suivante : 

 </para>
          <para>Figure 1 : Équation de la fonction densité de probabilité</para>
          <para> </para>
          <para> </para>
          <para>L’équation de la fonction de distribution cumulative est la suivante : 

</para>
          <para>Figure 2 : Équation de la fonction de distribution cumulative</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">Deg_freedom1 - Degrés de liberté du numérateur.</param>
        <param name="Arg3">Deg_freedom2 - Degrés de liberté du dénominateur.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>F_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution de probabilité F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas <b>unnumérique, F_Dist</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x est négatif, <b>F_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté1 ou degrés_liberté2 n’est pas un entier, il est tronqué.</para>
          <para>Si deg_freedom1 &lt; 1, <b>F_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si deg_freedom &lt; 1, <b>F_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">Degrés_liberté1, les degrés de liberté du numérateur.</param>
        <param name="Arg3">Degrés_liberté2, les degrés de liberté du dénominateur.</param>
        <summary>Renvoie la distribution de probabilité unilatérale à droite suivant une loi F. Cette fonction permet de déterminer si deux ensembles de données ont des degrés de diversité différents. Par exemple, vous pouvez étudier les notes d’admission à l’université des hommes et des femmes et déterminer si la variabilité chez les femmes est différente de celle des hommes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>F_Dist_RT</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x est négatif, <b>F_Dist_RT</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté1 ou degrés_liberté2 n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b></b> F_Dist_RT renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b></b> F_Dist_RT renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>F_Dist_RT</b> est calculée comme F_DIST_RT=P( F x ), où F est une variable aléatoire avec une distribution F avec degrees_freedom1 et &gt; degrees_freedom2 degrés de liberté.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité : probabilité associée à la distribution cumulative F.</param>
        <param name="Arg2">Deg_freedom1 - Degrés de liberté du numérateur.</param>
        <param name="Arg3">Deg_freedom2 - Degrés de liberté du dénominateur.</param>
        <summary>Renvoie l’inverse de la distribution de probabilité F.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>F_Inv</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou &gt; probabilité 1, <b>F_Inv</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté1 ou degrés_liberté2 n’est pas un entier, il est tronqué.</para>
          <para>Si deg_freedom1 &lt; 1 ou deg_freedom2 &lt; 1, <b></b> F_Inv renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité, une probabilité associée à la distribution F cumulative.</param>
        <param name="Arg2">Degrés_liberté1, les degrés de liberté du numérateur.</param>
        <param name="Arg3">Degrés_liberté2, les degrés de liberté du dénominateur.</param>
        <summary>Renvoie l’inverse de la distribution de probabilité F unilatérale à droite. Si p = LOI.F.DROITE(x,...), alors INVERSE.LOI.F.DROITE(p,...) = x..</summary>
        <returns>To be added.</returns>
        <remarks><para>Vous pouvez utiliser la distribution F dans un test F qui compare le degré de variabilité de deux ensembles de données. Vous pouvez par exemple analyser les distributions de revenus aux États-Unis et au Canada pour déterminer si les deux pays ont un même degré de diversité de revenus.</para>
          <para>Si un argument n’est pas unnumérique, <b>F_Inv_RT</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou &gt; probabilité 1, <b>F_Inv_RT</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté1 ou degrés_liberté2 n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b></b> F_Inv_RT renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b></b> F_Inv_RT renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>
            <b>F_Inv_RT</b> pouvez utiliser pour renvoyer des valeurs critiques à partir de la distribution F. Par exemple, la sortie d’un calcul AOVA inclut souvent des données pour la statistique F, la probabilité F et la valeur critique F au niveau de 0,05. Pour renvoyer la valeur critique de F, utilisez le niveau de probabilité comme argument de probabilité <b>pour F_Inv_RT</b>.</para>
          <para>Pour une probabilité donnée, <b>F_Inv_RT</b> recherche cette valeur x de telle F_DIST_RT(x, degrees_freedom1, degrees_freedom2) = probabilité. Ainsi, la précision des <b>F_Inv_RT</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> . <b>F_Inv_RT</b> utilise une technique de recherche itérative. Si la recherche n’a rien donné après 64 itérations, la fonction renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tableau1, le premier tableau ou la première plage de données.</param>
        <param name="Arg2">Tableau2, le deuxième tableau ou la deuxième plage de données.</param>
        <summary>Renvoie le résultat d’un test F. Un test F renvoie la probabilité bilatérale que les variances du tableau1 et du tableau2 ne sont pas très différentes. Cette fonction permet de déterminer si deux échantillons ont des variances différentes. Prenons l’exemple de notes de tests provenant d’écoles publiques et privées. Vous pouvez évaluer si ces écoles ont des niveaux différents de diversité des notes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des matrices ou des références contenant des nombres.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Si le nombre de points de données dans array1 ou array2 est inférieur à 2, ou si la variance de array1 ou array2 est zéro, <b>F_Test</b> renvoie la valeur #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, le nombre non négatif dont vous souhaitez obtenir la factorielle. Si nombre n'est pas un entier, il est tronqué.</param>
        <summary>Renvoie la factorielle d’un nombre. La factorielle d’un nombre est égale à 1 *2**3...* nombre.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, la valeur pour laquelle vous souhaitez renvoyer la factorielle double. Si nombre n'est pas un entier, il est tronqué.</param>
        <summary>Renvoie la factorielle double d'un nombre.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n’est pas un nombre, <b>FactDouble</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le nombre est négatif, <b>FactDouble</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le nombre est pair : 

 </para>
          <para>Figure 1 : Équation pour even</para>
          <para> </para>
          <para> </para>
          <para>Si le nombre est impair : 

</para>
          <para>Figure 2 : Équation pour impair</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">Degrés_liberté1, les degrés de liberté du numérateur.</param>
        <param name="Arg3">Degrés_liberté2, les degrés de liberté du dénominateur.</param>
        <summary>Renvoie la distribution de probabilité F. Cette fonction permet de déterminer si deux ensembles de données ont des degrés de diversité différents. Par exemple, vous pouvez étudier les notes d’admission à l’université des hommes et des femmes et déterminer si la variabilité chez les femmes est différente de celle des hommes.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> fonctions.</para>
          <para>Si un argument n’est pas unnumérique, <b>FDist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x est négatif, <b>FDist</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté1 ou degrés_liberté2 n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b>FDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b>FDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>FDist</b> est calculé comme FDIST=P( F x ), où F est une variable aléatoire avec une distribution F avec degrees_freedom1 et &gt; degrees_freedom2 degrés de liberté.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Chaîne xml valide.</param>
        <param name="Arg2">Chaîne de requête XPath.</param>
        <summary>Obtenir des données spécifiques à partir du XML renvoyé, généralement à partir <b>d’un appel de fonction WebService.</b></summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>Le paramètre XPath est limité à 1 024 caractères.</para>
          <para>La <b>fonction FILTERXML</b> renvoie des résultats qui sont analyses via les paramètres régionaux de données spécifiés par l’utilisateur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nom de la feuille de calcul.</param>
        <param name="Arg2">Nom de la plage.</param>
        <param name="Arg3">Nom d’un argument permettant d’affiner la recherche.</param>
        <summary>Recherche des informations spécifiques dans une feuille de calcul.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - texte à rechercher.</param>
        <param name="Arg2">Dans_texte, le texte contenant le texte à rechercher.</param>
        <param name="Arg3">Num_départ, indique le caractère à partir duquel démarrer la recherche. Le premier caractère de dans_texte a le numéro 1. Si vous omettez num_départ, sa valeur par défaut est 1.</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> et <b>FindB</b> localisez une chaîne de texte dans une deuxième chaîne de texte et renvoyez le numéro de la position de départ de la première chaîne de texte à partir du premier caractère de la deuxième chaîne de texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: est destiné à être utilisé avec des langues qui utilisent le jeu de caractères sur un seul sur deux caractères (SBCS), tandis que FindB est destiné à être utilisé avec les langues qui utilisent le jeu de caractères sur deux <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> caractères <b></b> (DBCS). Le paramètre de langue par défaut de l'ordinateur affecte la valeur renvoyée de la manière suivante :</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> compte toujours chaque caractère, qu’il s’agit d’un seul caractère ou d’un sur deux caractères, comme 1, quel que soit le paramètre de langue par défaut.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> compte chaque caractère sur deux caractères sur deux caractères comme 2 lorsque vous avez activé la modification d’une langue qui prend en charge DBCS, puis que vous l’avez définie comme langue par défaut. Sinon, <b>FindB compte</b> chaque caractère comme 1.</description>
            </item>
          </list>
          <para>Les langues qui prennent en charge les caractères codés sur deux octets sont le japonais, le chinois (simplifié), le chinois (traditionnel) et le coréen.</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /><b>Et FindB sont sensibles</b> à la cas et n’autorisent pas les caractères génériques. Si vous ne souhaitez pas effectuer de recherche sensible à la cas ou utiliser des caractères génériques, vous pouvez utiliser <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> et <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> . </para>
          <para>Si find_text est « » (texte vide), correspond au premier caractère de la chaîne de recherche (autrement dit, le caractère numéro <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> start_num ou 1). </para>
          <para>Rechercher_texte ne peut contenir aucun caractère générique.</para>
          <para>Si find_text n’apparaît pas dans within_text, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>et FindB</b> retourne la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si start_num n’est pas supérieur à zéro et <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>que FindB</b> retourne la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si start_num est supérieure à la longueur de la within_text, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>et FindB</b> retourne la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Utilisez start_num pour ignorer un certain nombre de caractères. À titre d’exemple, supposons que vous travaillez avec la chaîne de texte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> « AYF0093. YoungMensApparel « . Pour trouver le nombre du premier « Y » dans la partie descriptive de la chaîne de texte, définissez start_num sur 8 afin que la partie du numéro de série du texte ne fasse pas l'objet de la recherche. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> commence par le caractère 8, trouve find_text au caractère suivant et renvoie le nombre 9. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> renvoie toujours le nombre de caractères à partir du début within_text, en comptant les caractères que vous ignorez si start_num est supérieur à 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité, une probabilité associée à la distribution F cumulative.</param>
        <param name="Arg2">Degrés_liberté1, les degrés de liberté du numérateur.</param>
        <param name="Arg3">Degrés_liberté2, les degrés de liberté du dénominateur.</param>
        <summary>Renvoie l’inverse de la distribution de probabilité F. Si p = FDIST(x,...), alors FINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> fonctions.</para>
          <para>Vous pouvez utiliser la distribution F dans un test F qui compare le degré de variabilité de deux ensembles de données. Vous pouvez par exemple analyser les distributions de revenus aux États-Unis et au Canada pour déterminer si les deux pays ont un même degré de diversité de revenus.</para>
          <para>Si un argument n’est pas unnumérique, <b>FInv</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou &gt; probabilité 1, <b>FInv</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté1 ou degrés_liberté2 n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom1 &lt; 1 ou degrees_freedom1 ≥ 10^10, <b>FInv</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrees_freedom2 &lt; 1 ou degrees_freedom2 ≥ 10^10, <b>FInv</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>
            <b>FInv peut</b> être utilisé pour renvoyer des valeurs critiques à partir de la distribution F. Par exemple, la sortie d’un calcul AOVA inclut souvent des données pour la statistique F, la probabilité F et la valeur critique F au niveau de 0,05. Pour renvoyer la valeur critique de F, utilisez le niveau de probabilité comme argument de probabilité <b>pour FInv</b>.</para>
          <para>Pour une probabilité donnée, <b>FInv</b> recherche cette valeur x de telle telle que FDIST(x, degrees_freedom1, degrees_freedom2) = probabilité. Ainsi, la précision de <b>FInv dépend</b> de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" /> . <b>FInv utilise</b> une technique de recherche itérative. Si la recherche n’a rien donné après 64 itérations, la fonction renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x, une valeur numérique pour laquelle vous voulez la transformation.</param>
        <summary>Renvoie la transformation de Fisher à x. Cette transformation produit une fonction qui est distribuée plutôt qu'oblique. Utilisez cette fonction pour effectuer un test d'hypothèse sur le coefficient de corrélation.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n’est pas unnumérique, <b>Fisher</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x ≤ -1 ou si x ≥ 1, <b>Fisher</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L'équation de la transformation de Fisher est :</para>
          <para>Figure 1 : Équation de la transformation de Fisher</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y - valeur pour laquelle vous souhaitez effectuer l’inverse de la transformation.</param>
        <summary>Renvoie l'inverse de la transformation de Fisher. Utilisez cette transformation lorsque vous analysez des corrélations entre des plages ou des tableaux de données. Si y = FISHER(x), alors FISHERINV(y) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si y n’est pas unnumérique, <b>FisherInv</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de l’inverse de la transformation de Fisher est la suivante :</para>
          <para>Figure 1 : Équation de la transformation inverse de Fisher</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, le nombre à arrondir et à convertir en texte.</param>
        <param name="Arg2">Décimales, le nombre de chiffres à droite de la virgule.</param>
        <param name="Arg3">No_commas - valeur logique qui, si elle est <b>true,</b>empêche <b>Fixed</b> d’inclure des virgules dans le texte renvoyé.</param>
        <summary>Arrondit un nombre au nombre spécifié de décimales, formate le nombre au format décimal à l'aide de virgules et renvoie le résultat sous forme de texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>Dans Microsoft Excel, les nombres ne peuvent pas comprendre plus de 15 chiffres significatifs, mais ils peuvent comprendent jusqu'à 127 décimales.</para>
          <para>Si la valeur est négative, le nombre est arrondi à gauche de la virgule.</para>
          <para>Si vous omettez les décimales, la valeur par défaut est 2.</para>
          <para>Si no_commas est <b>false ou</b> omis, le texte renvoyé inclut des virgules comme d’habitude. </para>
          <para>La principale différence entre la mise en forme d’une cellule contenant un nombre à l’aide de la commande Cells (menu Format) et la mise en forme d’un nombre directement avec la fonction FIXED est que <b>Fixed</b> convertit son résultat en texte. Un nombre formaté avec la commande Cellules reste un nombre.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, la valeur numérique à arrondir.</param>
        <param name="Arg2">Importance  - le multiple vers lequel vous voulez arrondir.</param>
        <summary>Arrondit un nombre au multiple le plus proche de l’argument précision en tendant vers zéro.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> méthode.</para>
          <para>Si l’un des arguments n’est pas unnumérique, <b>Floor</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le nombre et la signification ont des signes différents, <b>Floor</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Indépendamment du signe du nombre, une valeur est arrondie lorsqu’elle n’est pas égale à zéro. Si le nombre est un multiple exact de l’argument précision, aucun arrondi n’est appliqué.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valeur à arrondir.</param>
        <param name="Arg2">Multiple vers lequel vous souhaitez arrondir.</param>
        <param name="Arg3">Lorsqu’un nombre autre que zéro est attribué, cette fonction est arrondie à zéro.</param>
        <summary>Arrondit un nombre à l’integer le plus proche ou au multiple le plus proche de l’importance.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, la valeur numérique à arrondir.</param>
        <param name="Arg2">Importance  - le multiple vers lequel vous voulez arrondir.</param>
        <summary>Arrondit le nombre spécifié au multiple le plus proche de l’argument précision en s’éloignant de zéro.</summary>
        <returns>To be added.</returns>
        <remarks><para>Selon le signe du nombre et des arguments précision, la méthode <b>Floor_Precise</b> arrondit en tendant vers zéro ou en direction inverse de zéro.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Arrondit en direction inverse de zéro.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Arrondit en tendant vers zéro.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Arrondit en direction inverse de zéro.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Arrondit en tendant vers zéro.</description>
            </item>
          </list>
          <para>Si l’un des arguments n’est pas un chiffre, <b>la méthode Floor_Precise</b> génère une erreur. </para>
          <para>Si le nombre est un multiple exact de l’argument précision, aucun arrondi n’est appliqué.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, le point de données pour lequel vous voulez prévoir une valeur.</param>
        <param name="Arg2">y_connus, le tableau ou la plage de données dépendante.</param>
        <param name="Arg3">x_connus, le tableau ou la plage de données independante.</param>
        <summary>Calcule, ou prévoit, une valeur future à partir des valeurs existantes. La valeur prévue est une valeur-y pour une valeur-x donnée. Les valeurs connues sont les valeurs-x et valeurs-y existantes, et la nouvelle valeur est prévue à l'aide de la régression linéaire. Cette fonction permet de prévoir les ventes à venir, les besoins en stocks ou les tendances des consommateurs.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n’est pas unnumérique, <b>Forecast</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si known_y’known_x sont vides ou contiennent un nombre différent de points de données, <b>Forecast</b> renvoie la valeur d’erreur #N/A. </para>
          <para>Si la variation de known_x est égale à zéro, <b>forecast</b> renvoie la valeur #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation <b>de Forecast</b> est a+bx, où : </para>
          <para>Figure 1 : Équation de la méthode Forecast</para>
          <para> </para>
          <para> </para>
          <para>Et :</para>
          <para>Figure 2 : Équation de la méthode Forecast</para>
          <para> </para>
          <para> </para>
          <para>et où x et y sont les exemples de moyennes AVERAGE(known_x’s) et AVERAGE(y’s connus).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tableau_données, un tableau ou une référence à un ensemble de valeurs pour laquelle vous souhaitez compter la fréquence. Si data_array ne contient aucune valeur, <b>Frequency</b> renvoie un tableau de zéros.</param>
        <param name="Arg2">Matrice_intervalles, un tableau ou une référence à des intervalles dans lesquels vous souhaitez regrouper les valeurs de tableau_données. Si bins_array ne contient aucune valeur, <b>Frequency</b> renvoie le nombre d’éléments data_array.</param>
        <summary>Calcule la fréquence à laquelle les valeurs apparaissent dans une plage de valeurs, puis renvoie une matrice verticale de nombres. Par exemple, utilisez <b>Frequency</b> pour compter le nombre de scores de test qui se trouve dans des plages de scores. Étant <b>donné que frequency</b> renvoie un tableau, il doit être entré en tant que formule ma matrice.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>La</b> fréquence est entrée en tant que formule masque une fois que vous avez sélectionné une plage de cellules adjacentes dans laquelle vous souhaitez que la distribution renvoyée apparaisse. </para>
          <para>La matrice renvoyée contient un élément de plus que matrice_intervalles. L'élément supplémentaire de la matrice renvoyée renvoie le nombre des valeurs supérieures à l'intervalle maximal. Par exemple, lorsque vous comptez trois plages de valeurs (intervalles) entrées dans trois cellules, n’oubliez pas d’entrer Frequency dans quatre cellules pour les résultats. <b></b> La cellule supplémentaire renvoie le nombre de valeurs du tableau_données supérieures à la troisième valeur d'intervalle. </para>
          <para>
            <b>La fréquence</b> ignore les cellules et le texte vides. </para>
          <para>Les formules qui renvoient des matrices doivent être saisies sous forme de formules matricielles.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tableau1, le premier tableau ou la première plage de données.</param>
        <param name="Arg2">Tableau2, le deuxième tableau ou la deuxième plage de données.</param>
        <summary>Renvoie le résultat d’un test F. Un test F renvoie la probabilité bilatérale que les variances du tableau1 et du tableau2 ne sont pas très différentes. Cette fonction permet de déterminer si deux échantillons ont des variances différentes. Prenons l’exemple de notes de tests provenant d’écoles publiques et privées. Vous pouvez évaluer si ces écoles ont des niveaux différents de diversité des notes.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> méthode.</para>
          <para>Les arguments doivent être des nombres ou des noms, des matrices ou des références contenant des nombres.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Si le nombre de points de données dans array1 ou array2 est inférieur à 2, ou si la variance de array1 ou array2 est zéro, <b>FTest</b> renvoie la valeur #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux - taux d'intérêt par période.</param>
        <param name="Arg2">Npm - nombre total de périodes de paiement dans une annuité.</param>
        <param name="Arg3">Pmt, le paiement effectué à chaque période ; il ne peut pas changer pendant l'annuité. En général, pmt contient le capital et les intérêts sans autres frais ou taxes. Si pmt est omis, vous devez inclure l'argument va.</param>
        <param name="Arg4">Va, la valeur actuelle, ou la somme que représente aujourd'hui une série de paiements futurs. Si va est omis, sa valeur par défaut est 0 (zéro) et vous devez inclure l'argument pmt.</param>
        <param name="Arg5">Type - nombre 0 ou 1. Indique lorsque les paiements sont échus. Si le type est omis, il est considéré comme étant 0.</param>
        <summary>Renvoie la valeur future d'un investissement fondé sur des paiements réguliers et constants, et un taux d'intérêt stable.</summary>
        <returns>To be added.</returns>
        <remarks><para>Pour une description plus complète des arguments dans <b>Fv</b> et pour plus d’informations sur les fonctions d’annuité, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>À la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Au début de la période</description>
            </item>
          </list>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous effectuez des paiements mensuels dans le cadre d'un prêt sur 4 ans à un taux d'intérêt annuel de 12 %, utilisez la valeur 12 %/12 pour rate et la valeur 4*12 pour nper. Si vous effectuez des paiements annuels dans le cadre du même prêt, utilisez la valeur 12 % pour le taux et la valeur 4 pour nper.</para>
          <para>Pour tous les arguments, l'argent versé (versements sur des comptes épargne, par exemple), est représenté par des nombres négatifs. L'argent reçu (chèques de dividendes, par exemple) est représenté par des nombres positifs.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Capital, la valeur actuelle.</param>
        <param name="Arg2">Calendrier, un tableau de taux d'intérêt à appliquer.</param>
        <summary>Renvoie la valeur future d'un investissement en appliquant une série de taux d'intérêt composites. FVSCHEDULE permet de calculer la valeur future d'un investissement avec un taux variable ou réglable.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les valeurs du calendrier peuvent être des nombres ou des cellules vides ; toute autre valeur entraîne la valeur d'erreur #VALUE! valeur d’erreur <b>pour FVSchedule</b>. Les cellules vides sont considérées comme des zéros (aucun intérêt).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valeur pour laquelle vous souhaitez calculer Gamma.</param>
        <summary>Renvoie la valeur de la fonction Gamma.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur à laquelle évaluer la distribution.</param>
        <param name="Arg2">Alpha : paramètre de la distribution.</param>
        <param name="Arg3">Bêta : paramètre de la distribution. Si bêta = 1, <b>Gamma_Dist</b> renvoie la distribution gamma standard.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>Gamma_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution gamma. Cette fonction permet d’étudier les variables ayant une distribution oblique. La distribution gamma est souvent utilisée dans les analyses de files d’attente.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x, alpha ou bêta n’est pas unnumérique, <b>Gamma_Dist</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>Gamma_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si alpha ≤ 0 ou si bêta ≤ 0, <b>Gamma_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la fonction de densité de probabilité gamma est la suivante : </para>
          <para>Figure 1 : Fonction densité de probabilité gamma</para>
          <para> </para>
          <para> </para>
          <para>La fonction de densité de probabilité gamma standard est :</para>
          <para>Figure 2 : Fonction de densité de probabilité gamma standard</para>
          <para> </para>
          <para> </para>
          <para>Lorsque alpha = 1, <b>Gamma_Dist</b> renvoie la distribution exponentielle avec :</para>
          <para>Figure 3 : Équation</para>
          <para> </para>
          <para> </para>
          <para>Pour un nombre total positif n, lorsque alpha = n/2, bêta = 2 et cumulative = <b>true</b>, <b>Gamma_Dist</b> renvoie (1 - CHIDIST(x)) avec n degrés de liberté. </para>
          <para>Lorsque alpha est un integer positif, <b>la Gamma_Dist</b> est également appelée distribution d’Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité, la probabilité associée à la distribution gamma.</param>
        <param name="Arg2">Alpha : paramètre de la distribution.</param>
        <param name="Arg3">Bêta : paramètre de la distribution. Si bêta = 1, <b>Gamma_Inv</b> renvoie la distribution gamma standard.</param>
        <summary>Renvoie l’inverse de la distribution gamma cumulée. Si p = LOI.GAMMA(x,...), alors LOI.GAMMA.INVERSE(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Cette fonction permet d’étudier une variable dont la distribution peut être oblique.</para>
          <para>Si un argument est du texte, <b>Gamma_Inv</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou &gt; probabilité 1, <b>Gamma_Inv</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si alpha ≤ 0 ou si bêta ≤ 0, <b>Gamma_Inv</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>Pour une probabilité donnée, <b>Gamma_Inv</b> recherche cette valeur x de telle GAMMA_DIST(x, alpha, bêta, TRUE) = probabilité. Ainsi, la précision de <b>Gamma_Inv</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>Gamma_Inv</b> utilise une technique de recherche itérative. Si la recherche n’a rien donné après 100 itérations, la fonction renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur à laquelle évaluer la distribution.</param>
        <param name="Arg2">Alpha : paramètre de la distribution.</param>
        <param name="Arg3">Bêta : paramètre de la distribution. Si bêta = 1, <b>GammaDist</b> renvoie la distribution gamma standard.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>vrai,</b> <b>GammaDist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution gamma. Cette fonction permet d’étudier les variables ayant une distribution oblique. La distribution gamma est souvent utilisée dans les analyses de files d’attente.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité ascendante n’est pas requise, vous devez envisager d’utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leurs fonctionnalités. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Si x, alpha ou bêta n’est pas unnumérique, <b>GammaDist</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>GammaDist renvoie</b> le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si alpha ≤ 0 ou si bêta ≤ 0, <b>GammaDist</b> renvoie le #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la fonction de densité de probabilité gamma est la suivante : </para>
          <para>Figure 1 : Fonction densité de probabilité gamma</para>
          <para> </para>
          <para> </para>
          <para>La fonction de densité de probabilité gamma standard est :</para>
          <para>Figure 2 : Fonction de densité de probabilité gamma standard</para>
          <para> </para>
          <para> </para>
          <para>Lorsque alpha = 1, <b>GammaDist</b> renvoie la distribution exponentielle avec :</para>
          <para>Figure 3 : Équation</para>
          <para> </para>
          <para> </para>
          <para>Pour un nombre total positif n, quand alpha = n/2, bêta = 2 et cumulative = <b>true</b>, <b>GammaDist</b> renvoie (1 - CHIDIST(x)) avec n degrés de liberté. </para>
          <para>Lorsque alpha est un integer positif, <b>GammaDist</b> est également appelé distribution d’Erlang.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité, la probabilité associée à la distribution gamma.</param>
        <param name="Arg2">Alpha : paramètre de la distribution.</param>
        <param name="Arg3">Bêta : paramètre de la distribution. Si bêta = 1, <b>GammaInv</b> renvoie la distribution gamma standard.</param>
        <summary>Renvoie l’inverse de la distribution cumulative gamma. Si p = GAMMADIST(x,...), alors GAMMAINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité ascendante n’est pas requise, vous devez envisager d’utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leurs fonctionnalités. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> méthode.</para>
          <para>Cette fonction permet d’étudier une variable dont la distribution peut être oblique.</para>
          <para>Si un argument est du texte, <b>GammaInv</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou probabilité &gt; 1, <b>GammaInv</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si alpha ≤ 0 ou si bêta ≤ 0, <b>GammaInv</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>Pour une probabilité donnée, <b>GammaInv</b> recherche cette valeur x de telle telle que GAMMADIST(x, alpha, bêta, TRUE) = probabilité. Ainsi, la précision de <b>GammaInv dépend</b> de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>GammaInv utilise</b> une technique de recherche itérative. Si la recherche n’a rien donné après 64 itérations, la fonction renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur pour laquelle vous voulez calculer GAMMALN.</param>
        <summary>Renvoie le logarithme népérien de la fonction gamma, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> méthode.</para>
          <para>Si x n’est pas unnumérique, <b>GammaLn</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x ≤ 0, <b>GammaLn</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Le nombre est élevé à la puissance GAMMALN(i), où i est un entier, renvoie le même résultat que (i - 1)!.</para>
          <para>
            <b>GammaLn est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode GammaLn</para>
          <para> </para>
          <para> </para>
          <para>Où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur pour laquelle vous voulez calculer GAMMALN.</param>
        <summary>Renvoie le logarithme népérien de la fonction gamma, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n’est pas un nombre, la méthode <b>GammaLn_Precise</b> génère une erreur.</para>
          <para>Si x ≤ 0, la méthode <b>GammaLn_Precise</b> génère une erreur.</para>
          <para>Le nombre est élevé à la puissance GAMMALN(i), où i est un entier, renvoie le même résultat que (i - 1)!.</para>
          <para>GAMMALN est calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode GammaLn_Precise de données</para>
          <para> </para>
          <para> </para>
          <para>Où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valeur pour laquelle vous souhaitez obtenir la distribution.</param>
        <summary>Renvoie 0,5 de moins que la distribution cumulée normale standard.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numéro1, numéro2, ... - 1 à 29 valeurs. Si une valeur n'est pas un entier, elle est tronquée.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie les plus grands diviseurs communs d'au moins deux entiers. Le plus grand diviseur commun est le plus grand entier divisant numéro1 et numéro2 sans reste.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>Gcd</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si un argument est inférieur à zéro, <b>Gcd</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Un divise toute valeur de manière égale.</para>
          <para>Un nombre premier ne compte que lui-même et un comme diviseurs.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments pour lesquels vous voulez calculer la moyenne. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la moyenne géométrique d'un tableau ou d'une plage de données positives. GEOMEAN permet par exemple de calculer le taux de croissance moyen associé à un intérêt à taux variables.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si un point de données ≤ 0, <b>GeoMean</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L'équation de la moyenne géométique est : 

 </para>
          <para>Figure 1 : Équation de la moyenne géométrique</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - valeur à tester dans l'étape.</param>
        <param name="Arg2">Step - valeur de seuil. Si vous omettez une valeur pour l’étape, <b>GeStep</b> utilise zéro.</param>
        <summary>Renvoie 1 si Number ≥ Step ; renvoie 0 (zéro) dans les autres cas. Utilisez cette fonction pour filtrer un ensemble de valeurs. Par exemple, en additionnant plusieurs <b>fonctions GeStep,</b> vous calculez le nombre de valeurs qui dépassent un seuil.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>GeStep</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - ensemble de valeurs y que vous connaissez dans la relation y = b*m^x.</param>
        <param name="Arg2">Known_x's - ensemble de valeurs x facultatives que vous connaissez peut-être déjà dans la relation y = b*m^x.</param>
        <param name="Arg3">New_x - nouvelles valeurs x pour lesquelles vous souhaitez que <b>la</b> croissance retourne les valeurs y correspondantes.</param>
        <param name="Arg4">Const - valeur logique indiquant si la constante b doit être forcée pour être égale à 1.</param>
        <summary>Calcule une croissance exponentielle prévue à l'aide de données existantes. <b>La</b> croissance renvoie les valeurs y d’une série de nouvelles valeurs x que vous spécifiez à l’aide de valeurs x et y existantes. Vous pouvez également utiliser la <b>fonction de</b> feuille de calcul Growth pour ajuster une courbe exponentielle aux valeurs x et y existantes.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matrice y_connus comporte une seule colonne, chaque colonne de x_connus est interprétée comme une variable distincte.</para>
          <para>Si la matrice y_connus comporte une seule ligne, chaque ligne de x_connus est interprétée comme une variable distincte.</para>
          <para>Si l’un des nombres known_y est 0 ou négatif, <b>growth</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>La matrice x_connus peut inclure un ou plusieurs ensembles de variables. Si une seule variable est utilisée, les matrices y_connus et x_connus peuvent être des plages de valeurs de toute forme, tant que leurs dimensions sont égales. Si plusieurs variables sont utilisées, la matrice y_connus doit être un vecteur (c'est-à-dire, une plage de valeurs avec une hauteur d'une ligne ou une largeur d'une colonne).</para>
          <para>Si la matrice x_connus est omise, c'est la matrice {1,2,3,...} qui est supposée avoir la même taille que la matrice y_connus.</para>
          <para>
				Le tableau known_x's doit inclure une colonne (ou une ligne) pour chaque variable indépendante, comme pour le tableau known_x's. Ainsi, si le tableau known_y's comporte une seule colonne, les tableaux known_x's et new_x's doit comporter le même nombre de colonnes. Si le tableau known_y's comporte une seule ligne, les tableaux known_x's et known_y's doivent comporter le même nombre de lignes.
</para>
          <para>Si le tableau new_x's est omis, il est considéré comme étant identique au tableau known_x's.</para>
          <para>Si les deux tableaux known_x's et new_x's sont omis, ils sont considérés comme étant le tableau {1,2,3,...} qui est de la même taille que le tableau known_y's.</para>
          <para>Si const est <b>true</b> ou omis, b est calculé normalement. </para>
          <para>Si const est <b>false,</b>b est égal à 1 et les valeurs m sont ajustées de sorte que y = m^x. </para>
          <para>Les formules qui renvoient des tableaux doivent être saisies sous forme de formules de tableau une fois que le nombre de cellules approprié a été sélectionné.</para>
          <para>Lorsque vous entrez une constante de tableau pour un argument comme known_x's, utilisez des virgules pour séparer les valeurs sur la même ligne et des points-virgules pour séparer les lignes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments pour lesquels vous voulez calculer la moyenne. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la moyenne harmonique d'un ensemble de données. La moyenne harmonique correspond à l'inverse de la moyenne arithmétique des valeurs inverses.</summary>
        <returns>To be added.</returns>
        <remarks><para>La moyenne harmonique est toujours inférieure à la moyenne géométrique, qui est toujours inférieure à la moyenne arithmétique.</para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si un point de données ≤ 0, <b>HarMean</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. L'équation de la moyenne harmonique est la suivante : 

 </para>
          <para>Figure 1 : Équation de la moyenne harmonique</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - Nombre hexadécimal à convertir. Il contient plus de 10 caractères. Le bit le plus significatif du nombre est le bit de signature (40e bit en partant de la droite). Les neuf autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <param name="Arg2">Nb_car - nombre de caractères à utiliser. Si des caractères sont omis, <b>Hex2Bin</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre hexadécimal en nombre binaire.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre est négatif, <b>Hex2Bin</b> ignore les caractères et renvoie un nombre binaire de 10 caractères. </para>
          <para>Si le nombre est négatif, il ne peut pas être inférieur à FFFFFFE00. Si le nombre est positif, il ne peut pas être supérieur à 1FF.</para>
          <para>Si le nombre n’est pas un nombre hexadécimal valide, <b>hexadécimal</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si <b>hex2Bin</b> nécessite plus de caractères, il renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. Si les caractères ne correspondent pas à un entier, l'argument est tronqué. </para>
          <para>Si places n’est pas unnumérique, <b>Hex2Bin</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs sont négatives, <b>hex2Bin</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - Nombre hexadécimal à convertir. Il contient plus de 10 caractères (40 caractères). Le bit le plus significatif du nombre est le bit de signature (40e bit en partant de la droite). Les 39 autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <summary>Convertit un nombre hexadécimal en nombre décimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n’est pas un nombre hexadécimal valide, <b>Hex2Dec</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - Nombre hexadécimal à convertir. Il contient plus de 10 caractères. Le bit le plus significatif du nombre est le bit de signature (40e bit en partant de la droite). Les 39 autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <param name="Arg2">Nb_car - nombre de caractères à utiliser. Si des caractères sont omis, <b>Hex2Oct</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre hexadécimal en nombre octal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre est négatif, <b>Hex2Oct</b> ignore les caractères et renvoie un nombre octal de 10 caractères. </para>
          <para>Si le nombre est négatif, il ne peut pas être inférieur à FFE0000000. Si le nombre est positif, il ne peut pas être supérieur à 1FFFFFFF.</para>
          <para>Si le nombre n’est pas un nombre hexadécimal valide, <b>Hex2Oct</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si <b>Hex2Oct</b> nécessite plus de caractères que de caractères, il renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas unnumérique, <b>Hex2Oct</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs sont négatives, <b>Hex2Oct</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - valeur à rechercher dans la première ligne de la table. Lookup_value peut être une valeur, une référence ou une chaîne de texte.</param>
        <param name="Arg2">Table_array - table d'informations consultée. Utilisez une référence dans une plage ou un nom de plage.</param>
        <param name="Arg3">Row_index_num - le numéro de ligne dans table_array à partir de laquelle la valeur correspondante sera renvoyée. Une valeur de row_index_num égal à 1 renvoie la valeur de première ligne dans table_array, un row_index_num 2 renvoie la valeur de deuxième ligne dans table_array et ainsi de suite. Si row_index_num est inférieur à 1, <b>HLookup</b> renvoie la #VALUE! valeur d’erreur ; Si row_index_num est supérieur au nombre de lignes sur table_array, <b>HLookup</b> renvoie la #REF! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</param>
        <param name="Arg4">Range_lookup - valeur logique qui spécifie si vous souhaitez <b>que HLookup</b> trouve une correspondance exacte ou approximative. Si <b>la valeur est true</b> ou omise, une correspondance approximative est renvoyée. En d'autres termes, si une correspondance exacte est introuvable, la valeur la plus élevée inférieure à lookup_value est renvoyée. Si <b>la false</b>, <b>HLookup</b> trouve une correspondance exacte. S'il n'en trouve pas, la valeur d'erreur #N/A est renvoyée.</param>
        <summary>Cette méthode cherche une valeur dans la première ligne d'une table ou d'un tableau de valeurs, puis renvoie une valeur dans la même colonne à partir d'une ligne indiquée dans la table ou le tableau. Utilisez HLookup lorsque vos valeurs de comparaison se trouvent dans une ligne en haut d’une table de données et que vous souhaitez examiner un nombre spécifié de lignes. À utiliser lorsque vos valeurs de comparaison sont situées dans une colonne à gauche des données <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> que vous souhaitez trouver.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si <b>HLookup</b> ne trouve pas lookup_value et range_lookup est <b>vrai,</b>il utilise la plus grande valeur inférieure à lookup_value. </para>
          <para>Si lookup_value est plus petite que la plus petite valeur de la première ligne de table_array, <b>HLookup</b> renvoie la valeur d’erreur #N/A. </para>
          <para>Si range_lookup prend la valeur FALSE, vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans lookup_value. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sample_s - nombre d’opérations qui aboutissent dans l’échantillon.</param>
        <param name="Arg2">Number_sample - taille de l’échantillon.</param>
        <param name="Arg3">Population_s - nombre d’opérations qui aboutissent dans la population.</param>
        <param name="Arg4">Number_population - taille de la population.</param>
        <param name="Arg5">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>HypGeom_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction de probabilité de masse.</param>
        <summary>Renvoie la distribution hypergéométrique. <b>HypGeom_Dist</b> renvoie la probabilité d’un nombre donné de succès d’échantillons, en raison de la taille de l’échantillon, des succès de population et de la taille de la population. Utilisez <b>HypGeom_Dist</b> pour les problèmes avec une population finie, où chaque observation est une réussite ou un échec, et où chaque sous-ensemble d’une taille donnée est choisi avec une probabilité égale.</summary>
        <returns>To be added.</returns>
        <remarks><para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si un argument n’est pas unnumérique, <b>HypGeom_Dist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si sample_s 0 ou sample_s est supérieur à la valeur inférieure de number_sample ou de population_s, HypGeom_Dist renvoie la &lt; valeur #NUM! <b></b> Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si sample_s est inférieur à la taille supérieure à 0 ou (number_sample - number_population + <b>population_s),</b> HypGeom_Dist renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si number_sample ≤ 0 ou number_sample &gt; number_population, <b>HypGeom_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si population_s ≤ 0 ou population_s &gt; number_population, <b>HypGeom_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si number_population ≤ 0, <b>HypGeom_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la distribution hypergéométrique est la suivante : </para>
          <para>Figure 1 : Équation de la distribution hypergéométrique</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeom_Dist</b> est utilisé dans l’échantillonnage sans remplacement d’une population finie.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sample_s - nombre d’opérations qui aboutissent dans l’échantillon.</param>
        <param name="Arg2">Number_sample - taille de l’échantillon.</param>
        <param name="Arg3">Population_s - nombre d’opérations qui aboutissent dans la population.</param>
        <param name="Arg4">Number_population - taille de la population.</param>
        <summary>Renvoie la distribution hypergéométrique. <b>HypGeomDist</b> renvoie la probabilité d’un nombre donné de succès d’échantillons, en raison de la taille de l’échantillon, des succès de population et de la taille de la population. Utilisez <b>HypGeomDist</b> pour les problèmes avec une population finie, où chaque observation est une réussite ou un échec, et où chaque sous-ensemble d’une taille donnée est choisi avec une probabilité égale.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si un argument n’est pas unnumérique, <b>HypGeomDist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si sample_s 0 ou sample_s est supérieur à la valeur inférieure de number_sample ou &lt; de population_s, <b>HypGeomDist</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si sample_s est inférieur à la taille supérieure à 0 ou (number_sample - number_population + population_s), <b>HypGeomDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si number_sample ≤ 0 ou number_sample &gt; number_population, HYPGEOMDIST renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si population_s ≤ 0 ou population_s &gt; number_population, <b>HypGeomDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si number_population ≤ 0, <b>HypGeomDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la distribution hypergéométrique est la suivante : </para>
          <para>Figure 1 : Équation de la distribution hypergéométrique</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeomDist</b> est utilisé dans l’échantillonnage sans remplacement d’une population finie.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - argument dans lequel une erreur est recherchée.</param>
        <param name="Arg2">Value_if_error - valeur renvoyée si l'évaluation de la formule aboutit à une erreur. Les types d'erreur ci-après sont évalués : #N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME? ou #NULL!.</param>
        <summary>Renvoie une valeur que vous spécifiez si une formule renvoie une erreur ; sinon, renvoie le résultat de la formule. Utilisez la <b>fonction IfError</b> pour prendre en charge et gérer les erreurs dans une formule.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si valeur ou value_if_error est une cellule vide, <b>IfError</b> la traite comme une valeur de chaîne vide («  »). </para>
          <para>Si la valeur est une formule ma matrice, <b>IfError</b> renvoie un tableau de résultats pour chaque cellule de la plage spécifiée dans la valeur. Reportez-vous au second exemple ci-dessous.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">valeur : toute valeur, expression ou référence.</param>
        <param name="Arg2">value_if_na : toute valeur, expression ou référence.</param>
        <summary>Renvoie la valeur que vous spécifiez si l’expression est résolue en #N/A, sinon renvoie le résultat de l’expression.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir la valeur absolue.</param>
        <summary>Renvoie la valeur absolue (module) d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>La valeur absolue d’un nombre complexe est : </para>
          <para>Figure 1 : Équation de la valeur absolue d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le coefficient imaginaire.</param>
        <summary>Renvoie le coefficient imaginaire d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber est un nombre complexe pour lequel vous souhaitez obtenir l’argument erte.</param>
        <summary>Renvoie l’argument (thêta), un angle exprimé en radians, de telles que :</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>
            <b>ImArgument est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode ImArgument</para>
          <para> </para>
          <para> </para>
          <para>Où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para>et</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le conjugué.</param>
        <summary>Renvoie le conjugué complexe d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Le conjugué d'un nombre complexe est obtenu de la manière suivante : </para>
          <para>Figure 1 : Équation pour le conjugué d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le cosinus.</param>
        <summary>Renvoie le cosinus d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Si inumber est une valeur logique, <b>ImCos</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Le cosinus d'un nombre complexe est obtenu de la manière suivante : 

 </para>
          <para>Figure 1 : Cosine d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez obtenir le cosine hyperbolique.</param>
        <summary>Renvoie le cosine hyperbolique d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez la cotangente.</param>
        <summary>Renvoie la cotangente d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez la cosécante.</param>
        <summary>Renvoie la cosécante d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez la cosécante hyperbolique.</param>
        <summary>Renvoie la cosécante hyperbolique d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 - numérateur complexe ou dividende.</param>
        <param name="Arg2">Inumber2 - dénominateur complexe ou diviseur.</param>
        <summary>Renvoie le quotient de deux nombres complexes au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Le quotient de deux nombres complexes est obtenu de la manière suivante : 

 </para>
          <para>Figure 1 : Quotient de deux nombres complexes</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir l'exponentiel.</param>
        <summary>Renvoie l'exponentiel d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>L'exponentiel d'un nombre complexe est obtenu de la manière suivante : 

 </para>
          <para>Figure 1 : Exponentiel d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le logarithme népérien.</param>
        <summary>Renvoie le logarithme népérien d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Le logarithme naturel d’un nombre complexe est : </para>
          <para>Figure 1 : Logarithme naturel d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le logarithme décimal.</param>
        <summary>Renvoie le logarithme décimal (base 10) d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Le logarithme népérien d'un nombre complexe peut être calculé à partir du logarithme népérien, de la manière suivante : 

 </para>
          <para>Figure 1 : Équation du logarithme commun d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le logarithme base 2.</param>
        <summary>Renvoie le logarithme base 2 d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Le logarithme base 2 d'un nombre complexe peut être calculé à partir du logarithme népérien, de la manière suivante : 

 </para>
          <para>Figure 1 : Équation du logarithme base-2 d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe à élever à une puissance.</param>
        <param name="Arg2">Number - puissance à laquelle vous souhaitez élever le nombre complexe.</param>
        <summary>Renvoie un nombre complexe au format de texte x + yi ou x + yj élevé à une puissance.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Si le nombre n’est pas un nombre, <b>ImPower</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Le nombre peut être un entier, une fraction ou une valeur négative.</para>
          <para>Un nombre complexe élevé à une puissance est calculé comme suit : </para>
          <para>Figure 1 : Équation d’un nombre complexe élevé à une puissance</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para>et :</para>
          <para>Figure 3 : Équation</para>
          <para> </para>
          <para> </para>
          <para>et :</para>
          <para>Figure 4 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1, inumber2,… - 1 à 29 nombres complexes à multiplier.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie le produit de 2 à 29 nombres complexes au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Le produit de deux nombres complexes est obtenu de la manière suivante :</para>
          <para>Figure 1 : Produit de deux nombres complexes</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le coefficient réel.</param>
        <summary>Renvoie le coefficient réel d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez la cosécante hyperbolique.</param>
        <summary>Renvoie la cosécante hyperbolique d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez obtenir la sécante hyperbolique.</param>
        <summary>Renvoie la sécante d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir le sinus.</param>
        <summary>Renvoie le sinus d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>Le sinus d'un nombre complexe est obtenu de la manière suivante : 

 </para>
          <para>Figure 1 : Sinus d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez obtenir le sinus hyperbolique.</param>
        <summary>Renvoie le sinus hyperbolique d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber - nombre complexe pour lequel vous souhaitez obtenir la racine carrée.</param>
        <summary>Renvoie la racine carrée d'un nombre complexe au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. La racine carrée d’un nombre complexe est : </para>
          <para>Figure 1 : Racine carrée d’un nombre complexe</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para>et :</para>
          <para>Figure 3 : Équation</para>
          <para> </para>
          <para> </para>
          <para>et :</para>
          <para>Figure 4 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1 - nombre complexe dont inumber2 doit être soustrait.</param>
        <param name="Arg2">Inumber2 - nombre complexe dont inumber1 doit être soustrait.</param>
        <summary>Renvoie la différence entre deux nombres complexes au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe.</para>
          <para>La différence entre deux nombres complexes est obtenue de la manière suivante : 

</para>
          <para>Figure 1 : Différence entre deux nombres complexes</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1,inumber2,... - 1 à 29 nombres complexes à additionner.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la somme entre deux nombres complexes ou plus au format de texte x + yi ou x + yj.</summary>
        <returns>To be added.</returns>
        <remarks><para>Permet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> de convertir des coefficients réels et imaginaires en un nombre complexe. </para>
          <para>La somme de deux nombres complexes est obtenu de la manière suivante : 

</para>
          <para>Figure 1 : Somme de deux nombres complexes</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre complexe pour lequel vous souhaitez obtenir la tangente.</param>
        <summary>Renvoie la tangente d’un nombre complexe.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array ou Reference - plage de cellules d'une constante de tableau. Pour référence, il s'agit de la référence à une ou plusieurs plages de cellules.</param>
        <param name="Arg2">Row_num - sélectionne la ligne du tableau à partir de laquelle la valeur doit être renvoyée. Si row_num est omis, column_num doit être indiqué. Pour référence, le nombre de la ligne en référence à partir de laquelle une référence doit être renvoyée</param>
        <param name="Arg3">Column_num - sélectionne la colonne du tableau à partir de laquelle la valeur doit être renvoyée. Si column_num est omis, row_num doit être indiqué. Pour référence, le nombre de la colonne en référence à partir de laquelle une référence doit être renvoyée</param>
        <param name="Arg4">Area_num - utilisé uniquement lors du renvoi de références. Sélectionne la plage de référence à partir de laquelle renvoyer l’intersection des arguments row_num et column_num. La première zone sélectionnée ou entrée porte le numéro 1, la deuxième est 2 et ainsi de suite. Si area_num est omis, <b>Index utilise</b> la zone 1.</param>
        <summary>Renvoie une valeur ou la référence à une valeur à partir d'une table ou d'une plage de valeurs. Il existe deux formes de la fonction <b>Index</b> : le formulaire tableau et le formulaire de référence.</summary>
        <returns>To be added.</returns>
        <remarks><para>Forme tableau</para>
          <para>Renvoie la valeur d'un élément dans une table ou un tableau, sélectionné par index de numéro de ligne et de colonne.</para>
          <para>Utilisez le formulaire de tableau si le premier argument de <b>l’index</b> est une constante de tableau.</para>
          <para>Si les arguments row_num et column_num sont utilisés, <b>Index</b> renvoie la valeur dans la cellule à l’intersection de row_num et column_num. </para>
          <para>Si vous définissez row_num ou column_num sur 0 (zéro), <b>Index</b> renvoie respectivement le tableau de valeurs de la colonne entière ou de la ligne. Pour utiliser les valeurs renvoyées sous forme de tableau, entrez la fonction <b>Index</b> sous la forme d’une formule de tableau dans une plage horizontale de cellules pour une ligne et dans une plage verticale de cellules pour une colonne. Pour entrer une formule de tableau, appuyez sur les touches CTRL+MAJ+ENTREE. </para>
          <para>Row_num et column_num doivent pointer vers une cellule dans un tableau ; Sinon, <b>Index</b> renvoie le #REF! Valeur d'erreur. </para>
          <para>Formulaire de référence</para>
          <para>Renvoie la référence de la cellule à l'intersection d'une ligne et d'une colonne particulières. Si la référence est composée de sélections non adjacentes, vous pouvez prélever la sélection pour l'observer. Si chaque zone d'une référence ne contient qu'une seule ligne ou colonne, l'argument row_num ou column_num, sont respectivement facultatifs. Par exemple, pour une référence simple, utilisez INDEX(reference,,column_num).</para>
          <para>Une fois qu'une plage particulière a été sélectionnée pour la référence et l'argument area_num, row_num et column_num sélectionnent une cellule particulière : row_num 1 correspond à la pemière ligne de la plage, column_num 1 à la première colonne. La référence renvoyée par <b>Index</b> est l’intersection row_num et column_num. </para>
          <para>Si vous définissez row_num ou column_num sur 0 (zéro), <b>Index</b> renvoie respectivement la référence pour l’ensemble de la colonne ou de la ligne.</para>
          <para>Row_num, column_num et area_num doivent pointer vers une cellule dans la référence ; Sinon, <b>Index</b> renvoie le #REF! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. Si row_num et column_num sont omis, <b>Index</b> renvoie la zone de référence spécifiée par area_num. </para>
          <para>Le résultat de la fonction <b>Index</b> est une référence et est interprété comme tel par d’autres formules. En fonction de la formule, la valeur de retour d’INDEX peut être utilisée comme une référence ou une valeur. Par exemple, la formule CELL ("width",INDEX(A1:B2,1,2)) équivaut à CELL("width",B1). La fonction CELL utilise la valeur de retour d’INDEX comme une référence de cellule. En revanche, une formule telle que 2*INDEX(A1:B2,1,2) traduit la valeur de retour <b>d’Index</b> en nombre dans la cellule B1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - ensemble dépendant d'observations ou de données.</param>
        <param name="Arg2">Known_x's - ensemble indépendant d'observations ou de données.</param>
        <summary>Calcule le point auquel une ligne coupe l’axe y à l’aide de valeurs x et de valeurs y existantes. Le point d’interception est basé sur une ligne de régression la mieux adaptée tracée par le biais des valeurs x connues et des valeurs y connues. Utilisez la <b>fonction Intercept</b> lorsque vous souhaitez déterminer la valeur de la variable dépendante lorsque la variable indépendante est 0 (zéro). Par exemple, vous pouvez utiliser la fonction <b>Intercept</b> pour prévoir la résistance électrique d’un metal à 0°C lorsque vos points de données ont été pris à la température de la salle et à une température supérieure.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Si known_y et les known_x contiennent un nombre différent de points de données ou ne contiennent pas de points de données, <b>Intercept</b> renvoie la valeur d’erreur #N/A. </para>
          <para>L’équation de l’interception de la ligne de régression, a, est la suivante :</para>
          <para>Figure 1 : Équation de l’interception de la ligne de régression</para>
          <para> </para>
          <para> </para>
          <para>où la pente, b, est calculée comme :</para>
          <para>Figure 2 : Équation de la pente</para>
          <para> </para>
          <para> </para>
          <para>et où x et y sont les moyennes d’exemple AVERAGE(known_x’s) et AVERAGE(known_y’s).</para>
          <para>L’algorithme sous-jacent utilisé dans <b>intercepter</b> et les fonctions est différent de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> l’algorithme sous-jacent utilisé dans la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> fonction. La différence entre ces algorithmes peut conduire à des résultats différents lorsque les données ne sont pas déterminées et qu'elles sont colinéaires. Par exemple, si les points de données de l'argument y_connus prennent la valeur 0 et que ceux de l'argument y_connus prennent la valeur 1 : </para>
          <list type="bullet">
            <item>
              <description>
                <b>Interceptez</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> et renvoyez un #DIV/0! erreur. <b>L’intercepteur</b> et l’algorithme sont conçus pour rechercher une seule réponse, et dans ce cas, il peut y avoir plusieurs <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> réponses. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> renvoie la valeur 0. L’algorithme est conçu pour renvoyer des résultats raisonnables pour les données colinéaires, et dans ce cas, au moins une réponse <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> est trouvée.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Investissement - montant investi dans le titre.</param>
        <param name="Arg4">Redemption - the amount to be received at maturity.</param>
        <param name="Arg5">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le taux d'intérêt pour un titre totalement investi.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>IntRate</b> renvoie le #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si l'≤ est 0 ou si l'≤ 0, <b>IntRate</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>IntRate</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>IntRate</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>IntRate est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode IntRate</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>B = nombre de jours dans une année, en fonction de l’année.</para>
          <para>DIM = nombre de jours entre le règlement et l’échéance.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux - taux d'intérêt par période.</param>
        <param name="Arg2">Per - période pour laquelle vous souhaitez trouver les intérêts. Elle doit se trouver dans la plage comprise entre 1 et nper.</param>
        <param name="Arg3">Npm - nombre total de périodes de paiement dans une annuité.</param>
        <param name="Arg4">Pv - valeur actuelle, ou valeur forfaitaire correspondant à la valeur actuelle d'une série de paiements futurs.</param>
        <param name="Arg5">Fv - valeur future ou solde de caisse à atteindre une fois le dernier paiement effectué. Si la valeur future est omise, elle est considérée par défaut à 0 (la valeur future d'un prêt, par exemple, est de 0).</param>
        <param name="Arg6">Type - nombre 0 ou 1. Indique lorsque les paiements sont échus. Si le type est omis, il est considéré comme étant 0.</param>
        <summary>Renvoie le paiement des intérêts basés sur des paiements constants périodique et un taux d'intérêt constant.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>À la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Au début de la période</description>
            </item>
          </list>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous effectuez des paiements mensuels dans le cadre d'un prêt sur 4 ans à un taux d'intérêt annuel de 12 %, utilisez la valeur 12 %/12 pour rate et la valeur 4*12 pour nper. Si vous effectuez des paiements annuels dans le cadre du même prêt, utilisez la valeur 12 % pour le taux et la valeur 4 pour nper. </para>
          <para>Pour tous les arguments, l'argent versé (versements sur des comptes épargne, par exemple), est représenté par des nombres négatifs. L'argent reçu (chèques de dividendes, par exemple) est représenté par des nombres positifs.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Values - tableau de cellules ou référence à des cellules contenant des nombres pour lesquels vous souhaitez calculer le taux de retour interne.</param>
        <param name="Arg2">Guess - nombre proche du taux de retour interne selon votre estimation.</param>
        <summary>Renvoie le taux interne d'une série de flux de trésorerie représentés par les nombres dans les valeurs. Il n'est pas nécessaire que ces flux soient égaux, comme ils le seraient pour une annuité. Cependant, les flux de trésorerie doivent avoir lieu à intervalles réguliers (mensuellement ou annuellement, par exemple). Le taux de retour interne est le taux d'intérêt reçu pour un investissement comprenant des paiements (valeurs négatives) et des recettes (valeurs positives) intervenant selon une périodicité régulière.</summary>
        <returns>To be added.</returns>
        <remarks><para>Values doit contenir au moins une valeur positive et une valeur négative pour calculer le taux de retour interne (IRR).</para>
          <para>Le taux de retour interne utilise l'ordre des valeurs pour interpréter l'ordre des flux de trésorerie. Veillez à entrer les valeurs de paiements et de recettes dans l'ordre souhaité.</para>
          <para>Si un argument de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, les valeurs ne sont pas prises en compte.</para>
          <para>Microsoft Excel utilise une technique itérative pour calculer <b>Irr</b>. À partir de l’estimation, <b>Irr</b> par cycles dans le calcul jusqu’à ce que le résultat soit précis dans 0,00001 pour cent. Si <b>Irr</b> ne trouve pas de résultat qui fonctionne après 20 tentatives, le #NUM ! est renvoyée. </para>
          <para>Dans la plupart des cas, vous n’avez pas besoin de fournir une estimation pour le <b>calcul Irr.</b> Si l'estimation est omise, elle est considérée comme étant égale à 0,1 (10 %). </para>
          <para>Si <b>Irr</b> donne le #NUM! ou si le résultat n'est pas proche de la valeur attendue, effectuez une nouvelle tentative avec une autre valeur d'estimation.</para>
          <para>
            <b>Irr</b> est étroitement lié à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> la fonction de valeur nette actuelle. Le taux de retour calculé par <b>Irr</b> est le taux d’intérêt correspondant à une valeur nette actuelle de 0 (zéro). La formule suivante montre comment <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> et <b>Irr sont</b> liés :</para>
          <para>NPV(IRR(B1:B6),B1:B6) est égal à 3,60E-08 [Dans la précision du calcul <b>Irr,</b> la valeur 3.60E-08 est effectivement 0 (zéro).]</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon si la valeur fait référence à une valeur d’erreur, à l’exception #N/A.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de <b></b> valeur et renvoie true ou <b>false</b> selon que la valeur fait référence à une valeur d’erreur (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME? ou #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon que la valeur est even.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Référence à la cellule que vous souhaitez tester. La référence peut être une référence de cellule, une formule ou un nom qui fait référence à une cellule.</param>
        <summary>Vérifie si une référence est à une cellule contenant une formule et renvoie <b>TRUE</b> ou <b>FALSE</b>.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon que la valeur fait référence à une valeur logique.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon que la valeur fait référence à la valeur d’erreur #N/A (valeur non disponible).</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon que la valeur fait référence à un élément qui n’est pas du texte. (Notez que cette fonction renvoie <b>la valeur true</b> si la valeur fait référence à une cellule vide.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon que la valeur fait référence à un nombre.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre : valeur à arrondir.</param>
        <param name="Arg2">Importance : multiple facultatif auquel le nombre doit être arrondi. Si l’importance est omise, sa valeur par défaut est 1.</param>
        <summary>Renvoie un nombre arrondi à l’entier ou au multiple le plus proche de l’argument précision en s’éloignant de zéro.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon que la valeur est impaire.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Code date-heure utilisé par les Excel pour le calcul de date et d’heure.</param>
        <param name="Arg2">Cet argument n’est pas disponible dans la fonction.</param>
        <summary>Renvoie le numéro de semaine ISO de l’année pour une date donnée.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>Renvoie le numéro ordinal de la semaine civile [ISO8601] de l’année pour la date donnée. ISO 8601 définit la semaine civile comme un intervalle de temps de sept jours de calendrier commençant par un lundi, et la première semaine de calendrier d’une année comme celle qui inclut le premier jeudi de cette année.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - taux d'intérêt pour l'investissement.</param>
        <param name="Arg2">Per - période pour laquelle vous souhaitez trouver les intérêts. Elle doit être comprise entre 1 et nper.</param>
        <param name="Arg3">Nper - nombre total de périodes de paiement pour l'investissement.</param>
        <param name="Arg4">Pv - valeur actuelle de l'investissement. Pour un prêt, pv correspond au montant du prêt.</param>
        <summary>Calcule les intérêts payés au cours d'une période d'investissement spécifique. Cette fonction est mise à disposition pour la compatibilité avec Lotus 1-2-3.</summary>
        <returns>To be added.</returns>
        <remarks><para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous effectuez des paiements mensuels dans le cadre d'un prêt sur 4 ans à un taux d'intérêt annuel de 12 %, utilisez la valeur 12%/12 pour rate et la valeur 4*12 pour nper. Si vous effectuez des paiements annuels dans le cadre du même prêt, utilisez la valeur 12% pour le taux et la valeur 4 pour nper.</para>
          <para>Pour tous les arguments, l'argent versé (versements sur des comptes épargne ou autres retraits, par exemple), est représenté par des nombres négatifs. L'argent reçu (chèques de dividendes et autres dépôts, par exemple) est représenté par des nombres positifs.</para>
          <para>Pour plus d’informations sur les fonctions financières, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> fonction.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - valeur à tester. La valeur peut être vide (cellule vide), erreur, logique, texte, numéro, valeur de référence, ou un nom faisant référence à l'un de ces éléments, que vous souhaitez tester.</param>
        <summary>Vérifie le type de valeur et renvoie <b>true</b> ou <b>false</b> selon que la valeur fait référence à du texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de la valeur pour les fonctions IS ne sont pas convertis. Par exemple, dans la plupart des fonctions dans lesquelles un nombre est nécessaire, la valeur de texte « 19 » est convertie en nombre 19. Toutefois, dans la formule ISNUMBER(« 19 »), « 19 » n’est pas converti à partir d’une valeur de texte, et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> fonction renvoie <b>false</b>. </para>
          <para>La fonction IS est utile dans les formules pour tester le résultat d'un calcul. Lorsqu’elles sont combinées avec la fonction IF, elles fournissent une méthode de recherche des erreurs dans les formules.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à une utilisation interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments pour lesquels vous voulez calculer le kurtosis. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie le kurtosis d'un ensemble de données. Le kurtosis caractérise le caractère pointu ou plat relatif d'une distribution, par opposition à la distribution normale. Le kurtosis positif indique une distribution relativement pointue, tandis que le kurtosis négatif indique une distribution relativement plate.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>S’il y a moins de quatre points de données ou si l’écart type de l’échantillon est égal à zéro, <b>Kurt</b> renvoie la valeur #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Le kurtose est défini comme : </para>
          <para>Figure 1 : Équation du kurt kurt</para>
          <para> </para>
          <para> </para>
          <para>où s est l’écart-type de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice - matrice ou plage de données pour laquelle vous souhaitez déterminer la k-ième plus grande valeur.</param>
        <param name="Arg2">K - position (en partant de la plus grande position) dans la matrice ou la plage de données à renvoyer.</param>
        <summary>Renvoie la k-ième plus grande valeur d'un ensemble de données. Vous pouvez utiliser cette fonction pour sélectionner une valeur en fonction de sa position relative. Par exemple, vous pouvez utiliser la valeur <b>Large</b> pour renvoyer le score le plus élevé, l’avant-dernier ou le troisième.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matrice est vide, la taille <b>large</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k ≤ 0 ou si k est supérieur au nombre de points de données, <b>Large</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>Si n est le nombre de points de données dans une plage, la méthode LARGE(matrice,1) renvoie la valeur la plus grande et la méthode LARGE(matrice,n) renvoie la valeur la plus petite.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2,... - 1 à 29 valeurs pour lesquelles vous souhaitez obtenir le plus petit dénominateur commun. Si la valeur n'est pas un entier, elle est tronquée.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie le plus petit dénominateur commun des entiers. C'est le plus petit entier positif qui est un dénominateur de tous les arguments d'entier nombre1, nombre2, etc. Utilisez la méthode LCM pour ajouter des fractions avec des dénominateurs différents.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>Lcm</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si un argument est inférieur à zéro, <b>Lcm</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">y_connus - ensemble de valeurs y que vous connaissez dans la relation y = mx + b.</param>
        <param name="Arg2">x_connus - ensemble de valeurs x facultatives que vous connaissez peut-être déjà dans la relation y = mx + b.</param>
        <param name="Arg3">Const - valeur logique indiquant si la constante b doit être forcée pour être égale à 0.</param>
        <param name="Arg4">Stats - valeur logique qui spécifie si des statistiques de régression supplémentaires doivent être renvoyées.</param>
        <summary>Calcule les statistiques pour une droite à l'aide de la méthode des « moindres carrés » pour calculer une droite qui correspond mieux à vos données et renvoie une matrice qui décrit la droite. Comme cette fonction renvoie une matrice de valeurs, elle doit être entrée sous forme de formule matricielle.</summary>
        <returns>To be added.</returns>
        <remarks><para>L'équation pour la droite est la suivante :</para>
          <para>y = mx + b ou</para>
          <para>y = m1x1 + m2x2 + ... + b (s'il y a plages de valeurs x)</para>
          <para>où la valeur y dépendante est une fonction des valeurs x indépendantes. Les valeurs_m sont des coefficients correspondant à chaque valeur x et b est une valeur constante. Notez que x, y et m peuvent être des vecteurs. Le tableau que <b>LinEst</b> renvoie est {mn,mn-1,...,m1,b}. <b>LinEst peut</b> également renvoyer des statistiques de régression supplémentaires.</para>
          <para>Si la matrice y_connus comporte une seule colonne, chaque colonne de x_connus est interprétée comme une variable distincte.</para>
          <para>Si la matrice y_connus comporte une seule ligne, chaque ligne de x_connus est interprétée comme une variable distincte.</para>
          <para>La matrice x_connus peut inclure un ou plusieurs ensembles de variables. Si une seule variable est utilisée, les matrices y_connus et x_connus peuvent être des plages de valeurs de toute forme, tant que leurs dimensions sont égales. Si plusieurs variables sont utilisées, la matrice y_connus doit être un vecteur (c'est-à-dire, une plage de valeurs avec une hauteur d'une ligne ou une largeur d'une colonne).</para>
          <para>Si la matrice x_connus est omise, c'est la matrice {1,2,3,...} qui est supposée avoir la même taille que la matrice y_connus.</para>
          <para>Si const est <b>true</b> ou omis, b est calculé normalement. </para>
          <para>Si const est <b>false,</b>b est égal à 0 et les valeurs m sont ajustées pour tenir y = mx. </para>
          <para>Si stats est <b>truuue</b>, <b>LinEst</b> renvoie les statistiques de régression supplémentaires, afin que le tableau renvoyé soit {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r2,sey; F,df;ssreg,ssresid}. </para>
          <para>Si stats est <b>false ou</b> omis, <b>LinEst</b> renvoie uniquement les coefficients m et la constante b. </para>
          <para>Les statistiques de régression supplémentaires sont les suivantes :</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>Les valeurs d'erreur type pour les coefficients m1,m2,...,mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>Valeur d’erreur standard pour la constante b (seb = #N/A lorsque const est <b>false</b>).</description>
            </item>
            <item>
              <term>r2</term>
              <description>Coefficient de détermination. Compare les valeurs y estimées et réelles et les plages de valeurs entre 0 et 1. S’il s’agit de 1, il existe une corrélation parfaite dans l’exemple ; il n’existe aucune différence entre la valeur y estimée et la valeur y réelle. À l’autre extrême, si le coefficient de détermination est 0, l’équation de régression n’est pas utile pour prédire une valeur y. </description>
            </item>
            <item>
              <term>sey</term>
              <description>L'erreur type pour l'estimation de y.</description>
            </item>
            <item>
              <term>F</term>
              <description>La statistique F ou valeur F observée. Utilisez la statistique F pour déterminer si la relation observée entre les variables dépendantes et les variables indépendantes est le fruit du hasard.</description>
            </item>
            <item>
              <term>df</term>
              <description>Les degrés de liberté. Utilisez les degrés de liberté pour vous aider à trouver les valeurs critiques F dans un tableau de statistiques. Comparez les valeurs que vous trouvez dans le tableau à la statistique F renvoyée par <b>LinEst</b> pour déterminer un niveau de confiance pour le modèle. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>La somme des carrés de régression.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>La somme des carrés résiduelle.</description>
            </item>
          </list>
          <para>L'illustration ci-dessous indique l'ordre dans lequel les statistiques de régression supplémentaires sont renvoyées.</para>
          <para>Figure 1 : Feuille de calcul</para>
          <para> </para>
          <para> </para>
          <para>Vous pouvez décrire n’importe quelle ligne droite avec la pente et l’intercepteur y : </para>
          <para>Slope (m) :</para>
          <para>
Pour trouver la pente d’une ligne, souvent écrite en m, prenez deux points sur la ligne ( x1,y1) et (x2,y2) ; la pente est égale à (y2 - y1)/(x2 - x1).</para>
          <para>Y-intercept (b) :</para>
          <para>
L'intersection y d'une droite, souvent désignée par b, est la valeur de y au point auquel la droite croise l'axe y.</para>
          <para>L'équation d'une droite est y = mx + b. Une fois que vous connaissez les valeurs de m et b, vous pouvez calculer les points sur la droite en insérant la valeur y ou x dans l'équation. Vous pouvez également utiliser la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> fonction.</para>
          <para>Lorsque vous n’avez qu’une seule variable x indépendante, vous pouvez obtenir les valeurs de pente et d’interception y directement à l’aide des formules suivantes : </para>
          <para>Slope:</para>
          <para>
=INDEX(LINEST(known_y’s,known_x’s),1)</para>
          <para>Y-intercept :</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),2)</para>
          <para>La précision de la ligne calculée par <b>LineEst</b> dépend du degré de nuages de points dans vos données. Plus les données sont linéaires, plus le <b>modèle LineEst est</b> précis. <b>LineEst</b> utilise la méthode des moindres carrés pour déterminer le meilleur ajustement pour les données. Lorsque vous ne disposez qu'une variable x indépendante, le calcul de m et de b se base sur les formules suivantes : </para>
          <para>Figure 2 : Équation</para>
          <para> </para>
          <para> </para>
          <para>Figure 3 : Équation</para>
          <para> </para>
          <para> </para>
          <para>où x et y sont des moyennes de l'échantillon, c'est-à-dire x = AVERAGE(x_connus) et y = AVERAGE(y_connus).</para>
          <para>Les fonctions line-and curve-fitting <b>lineEst</b> et peuvent calculer la meilleure droite ou courbe <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> exponentielle qui correspond à vos données. Cependant, vous devez déterminer le résultat qui est le plus ajusté à vos données. Vous pouvez calculer TREND(y_connus,x_connus) pour une droite ou GROWTH(y_connus,x_connus) pour une courbe exponentielle. Ces fonctions, sans l'argument nouvel x, renvoient une matrice de valeurs y prévues sur cette droite ou cette courbe à vos points de données réels. Vous pouvez comparer les valeurs prévues avec les valeurs réelles. Vous pouvez les représenter graphiquement pour effectuer une comparaison visuelle. </para>
          <para>Dans l’analyse de régression, Microsoft Excel calcule pour chaque point la différence carrée entre la valeur y estimée pour ce point et sa valeur y réelle. La somme de ces différences de carrés est appelée somme des carrés, ssresid. Microsoft Excel calcule ensuite la somme totale des carrés, sstotal. Lorsque const = <b>true</b>ou omis, la somme totale des carrés est la somme des différences carrées entre les valeurs y réelles et la moyenne des valeurs y. Lorsque const = <b>false</b>, la somme totale des carrés est la somme des carrés des valeurs y réelles (sans soustraire la valeur y moyenne de chaque valeur y individuelle). Vous pouvez ensuite trouver la somme des carrés, ssreg, à partir de : ssreg = sstotal - ssresid. Plus le total des carrés est faible, comparé à la somme totale des carrés, plus la valeur du coefficient de détermination est élevée, r2, ce qui est un indicateur de la façon dont l’équation résultant de l’analyse de régression explique la relation entre les variables. r2 est égal à ssreg/sstotal. </para>
          <para>Dans certains cas, une ou plusieurs des colonnes X (supposons que les colonnes Y et X sont en colonnes) peuvent ne pas avoir de valeur prédictive supplémentaire en présence des autres colonnes X. En d'autres termes, la suppression d'une ou de plusieurs colonnes X peut permettre d'obtenir des valeurs Y avec une précision égale. En pareil cas, ces colonnes X redondantes doivent être omises du modèle de régression. Ce phénomène est appelé « colinéarité », car toute colonne X redondante peut être exprimée sous la forme d’une somme de multiples des colonnes X non redondantes. <b>LinEst vérifie</b> la colinéarité et supprime toutes les colonnes X redondantes du modèle de régression lorsqu’il les identifie. Les colonnes X supprimées peuvent être reconnues dans la sortie <b>LinEst</b> comme ayant 0 coefficient et 0 se. Si une ou plusieurs colonnes sont supprimées parce qu'elles sont redondantes, df est affecté car df dépend du nombre de colonnes X effectivement utilisées pour des prévisions. Si df est modifié parce que des colonnes X sont supprimées, la valeur de sey et de F est également affectée. Dans la pratique, la colinéarité est relativement rare. Toutefois, il est plus probable que certaines colonnes X contiennent uniquement 0 et 1 comme indicateurs de l’état d’un sujet d’une expérience ou non membre d’un groupe particulier. Si const = <b>true ou</b> omis, <b>LinEst</b> insère effectivement une colonne X supplémentaire de tous les 1 pour modéliser l’interception. Si vous avez une colonne avec un 1 pour chaque objet s’il s’agit d’un homme, ou 0 si ce n’est pas le cas, et que vous avez également une colonne avec un 1 pour chaque sujet si elle est une femme, ou 0 si ce n’est pas le cas, cette dernière colonne est redondante, car les entrées qu’elle comprend peuvent être obtenues en soustrayant l’entrée dans la colonne « indicateur de l’homme » de l’entrée dans la colonne supplémentaire de tous les 1 ajoutés par <b>LineEst</b>. </para>
          <para>Df est calculé comme suit lorsqu’aucune colonne X n’est supprimée du modèle en raison de la parité : s’il existe des colonnes k de known_x et const = <b>true</b> ou omis, alors df = n – k – 1. Si const = <b>false,</b>alors df = n - k. Dans les deux cas, chaque colonne X supprimée en raison de la parité augmente de 1. </para>
          <para>Les formules qui renvoient des matrices doivent être saisies sous forme de formules matricielles. Lorsque vous entrez une constante matricielle comme x_connus comme argument, utilisez des virgules pour séparer les valeurs sur la même ligne et des points-virgules pour séparer les lignes. Les caractères de séparation peuvent être différents en fonction de vos paramètres régionaux dans Options régionales et linguistiques du Panneau de configuration. </para>
          <para>Notez que les valeurs y prévues par l'équation de régression peuvent être incorrectes si elles se trouvent en dehors de la plage de valeurs y utilisées pour déterminer l'équation. L’algorithme sous-jacent utilisé dans <b>la fonction LinEst</b> est différent de l’algorithme sous-jacent utilisé dans les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> fonctions et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> fonctions. La différence entre ces algorithmes peut conduire à des résultats différents lorsque les données ne sont pas déterminées et qu'elles sont colinéaires. Par exemple, si les points de données de l'argument y_connus prennent la valeur 0 et que ceux de l'argument y_connus prennent la valeur 1 : </para>
          <para>
            <b>LineEst</b> renvoie la valeur 0. <b>L’algorithme LinEst</b> est conçu pour renvoyer des résultats raisonnables pour les données colinéaires, et dans ce cas, au moins une réponse est trouvée. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> et <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> renvoyer une #DIV/0! erreur. L’algorithme et est conçu pour rechercher une seule réponse, et dans ce cas, il peut y avoir plusieurs <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> réponses.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - nombre réel positif pour lequel vous souhaitez obtenir le logarithme népérien.</param>
        <summary>Renvoie le logarithme népérien d'un nombre. Les logarithmes népériens sont basés sur la constante e (2.71828182845904).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln est</b> l’inverse de la fonction EXP.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - nombre réel positif pour lequel vous souhaitez obtenir le logarithme.</param>
        <param name="Arg2">Base - base du logarithme. Si la base est omise, elle est considérée comme égale à 10.</param>
        <summary>Renvoie le logarithme d'un nombre selon la base spécifiée.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - nombre réel positif pour lequel vous souhaitez obtenir le logarithme en base 10.</param>
        <summary>Calcule le logarithme d'un nombre en base 10.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - ensemble de valeurs y que vous connaissez dans la relation y = b*m^x.</param>
        <param name="Arg2">Known_x's - ensemble de valeurs x facultatives que vous connaissez peut-être déjà dans la relation y = b*m^x.</param>
        <param name="Arg3">Const - valeur logique indiquant si la constante b doit être forcée pour être égale à 1.</param>
        <param name="Arg4">Stats - valeur logique qui spécifie si des statistiques de régression supplémentaires doivent être renvoyées.</param>
        <summary>Dans l'analyse de la régression, calcule la courbe exponentielle ajustée à vos données et renvoie une matrice des valeurs qui décrivent la courbe. Comme cette fonction renvoie une matrice de valeurs, elle doit être entrée sous forme de formule matricielle.</summary>
        <returns>To be added.</returns>
        <remarks><para>L'équation pour la courbe est la suivante :</para>
          <para>y = b*m^x ou</para>
          <para>y = (b *(m1^x1)*(m2^x2)*_) (s’il existe plusieurs valeurs x)</para>
          <para>où la valeur y dépendante est une fonction des valeurs x indépendantes. Les valeurs_m sont des bases correspondant à chaque valeur x exponentielle et b est une valeur constante. Notez que x, y et m peuvent être des vecteurs. Le tableau que <b>LogEst</b> renvoie est {mn,mn-1,...,m1,b}.</para>
          <para>Si la matrice y_connus comporte une seule colonne, chaque colonne de x_connus est interprétée comme une variable distincte.</para>
          <para>Si la matrice y_connus comporte une seule ligne, chaque ligne de x_connus est interprétée comme une variable distincte.</para>
          <para>
				La matrice x_connus peut inclure un ou plusieurs ensembles de variables. Si une seule variable est utilisée, les matrices y_connus et x_connus peuvent être des plages de valeurs de toute forme, tant que leurs dimensions sont égales. Si plusieurs variables sont utilisées, la matrice y_connus doit être une plage de cellules avec une hauteur d'une ligne ou une largeur d'une colonne (appelée vecteur).
</para>
          <para>Si la matrice x_connus est omise, c'est la matrice {1,2,3,...} qui est supposée avoir la même taille que la matrice y_connus.</para>
          <para>Si const est <b>true</b> ou omis, b est calculé normalement.</para>
          <para>Si const est <b>false,</b>b est égal à 1 et les valeurs m sont ajustées à y = m^x.</para>
          <para>Si stats est <b>true</b>, <b>LogEst</b> renvoie les statistiques de régression supplémentaires, afin que le tableau renvoyé soit {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r 2,sey; F,df;ssreg,ssresid}. </para>
          <para>Si stats est <b>false ou</b> omis, <b>LogEst</b> renvoie uniquement les coefficients m et la constante b. </para>
          <para>Pour plus d’informations sur les statistiques de régression supplémentaires, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> .</para>
          <para>Plus le traçage de vos données ressemble à une courbe exponentielle, plus la ligne calculée s’adapte à vos données. Comme <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> , <b>LogEst</b> renvoie un tableau de valeurs qui décrit une relation entre les valeurs, mais ajuste une <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> droite à vos données ; <b>LogEst ajuste</b> une courbe exponentielle. Pour plus d'informations, reportez-vous à l'article <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Lorsque vous n’avez qu’une seule variable x indépendante, vous pouvez obtenir des valeurs d’interception y (b) directement à l’aide de la formule suivante : </para>
          <para>Y-intercept (b) :</para>
          <para>
INDEX(LOGEST(known_y’s,known_x’s),2)</para>
          <para>Vous pouvez utiliser l’équation y = b*m^x pour prévoir les valeurs futures de y, mais Microsoft Excel fournit la fonction pour <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> le faire pour vous. Pour plus d'informations, reportez-vous à l'article <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Les formules qui renvoient des matrices doivent être saisies sous forme de formules matricielles.</para>
          <para>Lorsque vous entrez une constante matricielle comme x_connus comme argument, utilisez des virgules pour séparer les valeurs sur la même ligne et des points-virgules pour séparer les lignes. Les caractères de séparation peuvent être différents en fonction des paramètres régionaux et linguistiques définis dans Options régionales et linguistiques, dans le Panneau de configuration. </para>
          <para>Notez que les valeurs y prévues par l'équation de régression peuvent être incorrectes si elles se trouvent en dehors de la plage de valeurs y utilisées pour déterminer l'équation.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité - probabilité associée à la distribution lognormale.</param>
        <param name="Arg2">Moyenne - moyenne d’ln(x).</param>
        <param name="Arg3">Écart_type - écart-type d’ln(x).</param>
        <summary>Utilisez la distribution suivant une loi lognormale pour analyser les données transformées de manière logarithmique.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> méthode.</para>
          <para>Si un argument n’est pas unnumérique, <b>LogInv</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; = 0 ou probabilité &gt; = 1, <b>LogInv</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si standard_dev &lt; = 0, <b>LogInv</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’inverse de la fonction de distribution lognormale est :				 </para>
          <para>Figure 1 : Inverse de la fonction de distribution lognormale</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">Moyenne : moyenne d’ln(x).</param>
        <param name="Arg3">Écart-type : écart type de ln(x).</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>LogNorm_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution lognormale de x, où ln(x) est distribué normalement avec les paramètres moyenne et écart_type. Utilisez cette fonction pour analyser les données qui n’ont pas été transformées de manière logarithmique.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>LogNorm_Dist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x ≤ 0 ou si standard_dev ≤ 0, <b>LogNorm_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation pour la fonction de distribution cumulative lognormale est la suivante :  </para>
          <para>Figure 1 : Équation de la distribution cumulée lognormale</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité : probabilité associée à la distribution.</param>
        <param name="Arg2">Moyenne : moyenne d’ln(x).</param>
        <param name="Arg3">Écart-type : écart type de ln(x).</param>
        <summary>Renvoie l’inverse de la fonction de distribution suivant une loi lognormale cumulée. Utilisez la distribution suivant une loi lognormale pour analyser les données transformées de manière logarithmique.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>LogNorm_Inv</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; = 0 ou probabilité &gt; = 1, <b>LogNorm_Inv</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si standard_dev &lt; = 0, <b>LogNorm_Inv</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’inverse de la fonction de distribution lognormale est :				 </para>
          <para>Figure 1 : Inverse de la fonction de distribution lognormale</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">Moyenne - moyenne d’ln(x).</param>
        <param name="Arg3">Écart_type - écart-type d’ln(x).</param>
        <summary>Renvoie la distribution lognormale cumulée de x, où ln(x) est distribué normalement avec les paramètres moyenne et écart_type. Utilisez cette fonction pour analyser les données qui n’ont pas été transformées de manière logarithmique.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Si un argument n’est pas unnumérique, <b>LogNormDist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x ≤ 0 ou si standard_dev ≤ 0, <b>LogNormDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation pour la fonction de distribution cumulative lognormale est la suivante :  </para>
          <para>Figure 1 : Équation de la distribution cumulée lognormale</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - Valeur que <b>recherche la</b> recherche dans le premier vecteur. Valeur_cherchée peut être un nombre, du texte, une valeur logique, un nom ou une référence qui renvoie à une valeur.</param>
        <param name="Arg2">Vecteur_recherche ou Matrice - dans une forme vectorielle, plage qui contient une seule ligne ou colonne. Les valeurs de vecteur_recherche peuvent être du texte, des nombres ou des valeurs logiques. Dans une forme matricielle, plage de cellules qui contient du texte, des nombres ou des valeurs logiques à comparer à valeur_cherchée.</param>
        <param name="Arg3">Vecteur_résultat - utilisé uniquement avec la forme vectorielle. Plage qui ne contient qu'une ligne ou une colonne. Doit être de la même taille que vecteur_recherche.</param>
        <summary>Renvoie une valeur d'une plage contenant une ligne ou une colonne, ou d'une matrice. La fonction LOOKUP possède deux formes de syntaxe : la forme vectorielle et la forme matricielle.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Rechercher une valeur dans une plage contenant une seule ligne ou une colonne (appelée vecteur) et renvoyer une valeur à partir de la même position dans une seconde plage contenant une seule ligne ou colonne</term>
              <description>Forme vectorielle</description>
              <description>Utilisez la forme vectorielle lorsque vous effectuez une recherche dans une grande liste de valeurs ou lorsque les valeurs peuvent varier dans le temps.</description>
            </item>
            <item>
              <term>Rechercher la valeur spécifiée dans la première ligne ou colonne et renvoyer une valeur à partir de la même position dans la dernière ligne ou colonne de la matrice</term>
              <description>Forme matricielle</description>
              <description>Utilisez la forme matricielle lorsque vous disposez d'une petite liste de valeurs et que les valeurs restent constantes dans le temps.</description>
            </item>
          </list>
          <para>
            <b>Remarque</b>: vous pouvez également utiliser la fonction <b>De</b> recherche comme alternative à la fonction IF pour des tests élaborés ou des tests pour plus de sept conditions. Reportez-vous aux exemples de la forme matricielle.</para>
          <para>Forme vectorielle</para>
          <para>Un vecteur est une plage qui ne contient qu'une seule ligne ou colonne. La forme <b></b> vectorielle de recherche une valeur dans une plage d’une ligne ou d’une colonne (appelée vecteur) et renvoie une valeur à partir de la même position dans une deuxième plage d’une ligne ou d’une colonne. Utilisez cette forme de la <b>fonction De</b> recherche lorsque vous souhaitez spécifier la plage qui contient les valeurs que vous souhaitez faire correspondre. L’autre forme <b>de recherche</b> automatiquement dans la première colonne ou ligne.</para>
          <para>
            <b>Important</b>: les valeurs de lookup_vector doivent être placées dans l’ordre croissant : ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; Sinon, <b>la recherche risque</b> de ne pas donner la valeur correcte. Le texte en majuscules et le texte en minuscules sont équivalents.</para>
          <para>Si la fonction LOOKUP ne trouve pas valeur_cherchée, elle recherche la plus grande valeur dans vecteur_recherche, qui est inférieure ou égale à valeur_cherchée.</para>
          <para>Si lookup_value est plus petite que la plus petite valeur de <b>lookup_vector,</b> la recherche donne la valeur d'#N/A.</para>
          <para>Forme matricielle</para>
          <para>La forme <b></b> de tableau de recherche dans la première ligne ou colonne d’un tableau la valeur spécifiée et renvoie une valeur à partir de la même position dans la dernière ligne ou colonne du tableau. Utilisez cette forme de <b>recherche lorsque</b> les valeurs que vous souhaitez mettre en correspondance se trouver dans la première ligne ou colonne du tableau. Utilisez l’autre forme de <b>recherche lorsque</b> vous souhaitez spécifier l’emplacement de la colonne ou de la ligne.</para>
          <para>
            <b>Conseil</b>: en général, il est préférable d’utiliser la ou la fonction au lieu de la forme de tableau <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> de <b>recherche.</b> Cette forme de <b>recherche est</b> fournie pour assurer la compatibilité avec d’autres programmes de feuilles de calcul.</para>
          <para>Si <b>la recherche</b> ne trouve pas la lookup_value, elle utilise la plus grande valeur du tableau inférieure ou égale à lookup_value.</para>
          <para>Si lookup_value est plus petite que la plus petite valeur de la première ligne ou colonne (en fonction des dimensions du <b>tableau),</b> la recherche renvoie la valeur d’erreur #N/A.</para>
          <para>La forme de tableau <b>de recherche</b> est très similaire aux fonctions et <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> aux <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> fonctions. La différence est que les recherches lookup_value la première ligne, les recherches dans la première colonne et les recherches de recherche en fonction des <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> dimensions du tableau. <b></b></para>
          <para>Si un tableau couvre une zone plus large que haute (plus de colonnes que de <b>lignes),</b> la recherche recherche les lookup_value la première ligne.</para>
          <para>Si la matrice est carrée ou plus grande que <b></b> large (plus de lignes que de colonnes), la recherche recherche dans la première colonne.</para>
          <para>Avec et , vous pouvez indexer vers le bas ou vers la droite, mais la recherche sélectionne toujours la dernière valeur <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> de la ligne ou de la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> colonne. <b></b></para>
          <para>
            <b>Important</b>: les valeurs du tableau doivent être placées dans l’ordre croissant : ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; Sinon, <b>la recherche risque</b> de ne pas donner la valeur correcte. Le texte en majuscules et le texte en minuscules sont équivalents.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - valeur que vous utilisez pour rechercher la valeur souhaitée dans un tableau.</param>
        <param name="Arg2">Lookup_array - plage de cellules contiguës contenant des valeurs de recherche possibles. Lookup_array doit être une matrice ou une référence à une matrice.</param>
        <param name="Arg3">Type - nombre -1, 0 ou 1. Type spécifie la manière dont Microsoft Excel recherche Lookup_value dans Lookup_array.</param>
        <summary>Renvoie la position relative d'un élément dans une matrice, qui correspond à une valeur spécifiée dans un ordre spécifié. Utilisez <b>Match</b> au lieu de l’une des fonctions lorsque vous avez besoin de la position d’un élément dans une plage au lieu <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> de l’élément lui-même.</summary>
        <returns>To be added.</returns>
        <remarks><para>Lookup_value est la valeur pour laquelle vous voulez trouver une correspondance dans Lookup_array. Par exemple, lorsque vous recherchez le numéro d’une personne dans un annuaire téléphonique, vous utilisez le nom de la personne comme valeur de recherche, mais le numéro de téléphone est la valeur que vous souhaitez.</para>
          <para>Lookup_value peut être une valeur (nombre, texte ou valeur logique) ou une référence de cellule à un nombre, du texte ou une valeur logique.</para>
          <para>Si match_type est égal à 1, <b>Match</b> trouve la plus grande valeur inférieure ou égale à lookup_value. Lookup_array doit être placé dans l’ordre croissant : ...-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>.</para>
          <para>Si match_type est égal à 0, <b>Match</b> trouve la première valeur qui est exactement égale à lookup_value. Lookup_array peut se trouver dans un ordre quelconque.</para>
          <para>Si match_type est -1, <b>Match</b> trouve la plus petite valeur supérieure ou égale à lookup_value. Lookup_array doit être placée dans l’ordre décroit : <b>true</b>, <b>false</b>, Z-A, ... 2, 1, 0, -1, -2, ..., etc. Si match_type est omis, il est supposé être 1.</para>
          <para>
            <b>La</b> fonction Match renvoie la position de la valeur de correspondance dans lookup_array, et non la valeur elle-même. Par exemple, la fonction MATCH("b",{"a","b","c"},0) renvoie 2, la position relative de « b » dans la matrice {"a","b","c"}. </para>
          <para>
            <b>La correspondance</b> ne fait pas la distinction entre les lettres majuscules et minuscules lors de la mise en correspondance des valeurs de texte. </para>
          <para>Si <b>la correspondance</b> échoue à trouver une correspondance, elle renvoie la valeur d'#N/A. </para>
          <para>Si match_type la valeur 0, vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans lookup_value. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 nombres pour lesquels vous voulez calculer la moyenne.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la plus grande valeur d'un ensemble de valeurs.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument est une matrice ou une référence, seules les nombres sont utilisés. Les cellules vides, les valeurs logiques et le texte sont ignorés.</para>
          <para>Si les arguments ne contiennent aucun nombre, <b>max</b> renvoie 0 (zéro). </para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si vous souhaitez inclure des valeurs logiques et des représentations textuelles de nombres dans une référence dans le cadre du calcul, utilisez la <see cref="MAXA" /> fonction.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice - matrice numérique avec un nombre égal de lignes et de colonnes.</param>
        <summary>Renvoie le déterminant matriciel d'une matrice.</summary>
        <returns>To be added.</returns>
        <remarks><para>La matrice peut être donnée en tant que plage de cellules, par exemple, A1:C3 ; sous forme de constante de tableau, telle que {1,2,3;4,5,6;7,8,9}; ou en tant que nom de l’un de ces éléments. <b>MDeterm</b> renvoie le #VALUE! dans les cas suivants : </para>
          <para>Des cellules d'une matrice sont vides ou contiennent du texte.</para>
          <para>La matrice ne possède pas un nombre égal de lignes et de colonnes.</para>
          <para>La taille de la matrice dépasse 73 colonnes sur 73 lignes.</para>
          <para>Le déterminant matriciel est un nombre dérivé des valeurs dans une matrice. Pour une matrice comportant trois lignes et trois colonnes, A1:C3, le déterminant est défini de la manière suivante : 

</para>
          <code>MDETERM(A1:C3)</code>
          <para>égal à </para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Les déterminants matriciels sont généralement utilisés pour résoudre des équations mathématiques de systèmes, impliquant plusieurs variables.</para>
          <para>
            <b>MDeterm</b> est calculé avec une précision d’environ 16 chiffres, ce qui peut entraîner une petite erreur numérique lorsque le calcul n’est pas terminé. Par exemple, le déterminant d'une matrice simple peut différer de 0 à 1E-16.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Coupon, le taux de coupon annuel du titre.</param>
        <param name="Arg4">Rdt - rendement annuel du titre.</param>
        <param name="Arg5">Fréquence, le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg6">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie la durée de Macauley modifiée pour un titre avec une valeur estimée à 100 dollars.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</para>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Le règlement, l'échéance, la fréquence et la base sont raccourcis à des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>MDuration</b> renvoie le #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si yld &lt; 0 ou si coupon &lt; 0, <b>MDuration</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>MDuration</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>MDuration</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>MDuration</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>La durée modifiée est définie de la manière suivante : 

 </para>
          <para>Figure 1 : Équation pour la durée modifiée</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 nombres pour lesquels vous voulez calculer la moyenne.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la médiane des nombres indiqués. La médiane est le nombre au centre d'un ensemble de nombres.</summary>
        <returns>To be added.</returns>
        <remarks><para>S’il existe un nombre de nombres dans l’ensemble, <b>la</b> médiane calcule la moyenne des deux nombres au milieu. Reportez-vous à la seconde formule de l'exemple.</para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>
            <b>Remarque</b>: la <b>fonction Médiane</b> mesure la tendance centrale, qui est l’emplacement du centre d’une série de nombres dans une distribution statistique. Les trois mesures les plus courantes sont :</para>
          <list type="bullet">
            <item>
              <description>Moyenne qui représente l'espérance arithmétique et est calculée en ajoutant une série de nombres, puis en divisant le résultat par leur nombre. Par exemple, la moyenne de 2, 3, 3, 5, 7 et 10 est 30 divisé par 6, qui donne 5.</description>
            </item>
            <item>
              <description>Médiane qui est le milieu d'une série de nombres. Autrement dit, la moitié des nombres sont supérieurs à la médiane et l'autre moitié est inférieure. Par exemple, la médiane de 2, 3, 3, 5, 7 et 10 est 4.</description>
            </item>
            <item>
              <description>Mode qui est le nombre le plus récurrent dans une série. Par exemple, le mode de 2, 3, 3, 5, 7 et 10 est 3.</description>
            </item>
          </list>
          <para>Pour une distribution symétrique d'une série de nombres, ces trois mesures de tendance centrale sont toutes identiques. Pour une distribution oblique, elles peuvent être différentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 nombres pour lesquels vous voulez calculer la valeur minimale.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la plus petite valeur d'un ensemble de valeurs.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument est une matrice ou une référence, seules les nombres sont utilisés. Les cellules vides, les valeurs logiques et le texte sont ignorés.</para>
          <para>Si les arguments ne contiennent aucun nombre, <b>Min</b> renvoie 0. </para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Pour inclure des valeurs logiques et des transcriptions textuelles de nombres dans une référence dans le cadre du calcul, utilisez la fonction MINA.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice - matrice numérique avec un nombre égal de lignes et de colonnes.</param>
        <summary>Renvoie la matrice inverse de la matrice stockée dans une matrice.</summary>
        <returns>To be added.</returns>
        <remarks><para>La taille du tableau ne doit pas dépasser 52 colonnes sur 52 lignes. Si c’est le cas, la fonction renvoie une #VALUE! erreur. </para>
          <para>La matrice peut être indiquée sous forme de plage de cellules, par exemple, A1:C3, sous forme de constante matricielle, par exemple, {1,2,3;4,5,6;7,8,9}, ou sous forme de nom renvoyant à la plage ou à la constante.</para>
          <para>Si des cellules du tableau sont vides ou contiennent du texte, <b>MInverse</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>MInverse</b> renvoie également la #VALUE! si la matrice ne contient pas le même nombre de lignes et de colonnes. </para>
          <para>Les formules qui renvoient des matrices doivent être saisies sous forme de formules matricielles.</para>
          <para>Les matrices inverses, comme les déterminants, sont généralement utilisées pour résoudre des équations mathématiques de systèmes, qui impliquent plusieurs variables. Le produit d'une matrice et son inverse est la matrice d'identité, la matrice carrée dans laquelle les valeurs diagonales sont égales à 1 et toutes les autres valeurs à 0.</para>
          <para>Comme exemple de calcul d'une matrice comportant deux lignes et deux colonnes, imaginez que la plage A1:B2 contient les lettres a, b, c et d, qui représentent quatre nombres quelconques. Le tableau ci-dessous présente l'inverse de la matrice A1:B2. 

</para>
          <list type="table">
            <item>
              <term>Ligne 1</term>
              <description>d/(a *d-b* c)</description>
              <description>b/(b *c-a* d)</description>
            </item>
            <item>
              <term>Ligne 2</term>
              <description>c/(b *c-a* d)</description>
              <description>a/(a *d-b* c)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b> est calculé avec une précision d’environ 16 chiffres, ce qui peut entraîner une petite erreur numérique lorsque l’annulation n’est pas terminée. </para>
          <para>Certaines matrices carrées ne peuvent pas être inversées et renvoient la valeur d'erreur #NUM! valeur d’erreur <b>avec MInverse</b>. Le déterminant pour une matrice non inversible est 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valeurs - matrice ou référence à des cellules contenant des nombres. Ces nombres représentent une série de paiements (valeurs négatives) et de recettes (valeurs positives) qui se produisent à des périodes régulières.</param>
        <param name="Arg2">Taux_emprunt - taux d'intérêt que vous payez sur l'argent utilisé dans les opérations de trésorerie.</param>
        <param name="Arg3">Taux_placement - taux d'intérêt que vous recevez sur les opérations de trésorerie lorsque vous la réinvestissez.</param>
        <summary>Renvoie le taux interne modifié pour une série d'opérations de trésorerie périodiques. La fonction MIRR considère le coût de l'investissement et les intérêts reçus lors du réinvestissement des capitaux.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les valeurs doivent contenir au moins une valeur positive et une valeur négative pour calculer le taux de retour interne modifié. Sinon, <b>MIrr</b> renvoie la #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>
            <b>MIrr utilise</b> l’ordre des valeurs pour interpréter l’ordre des flux de trésorerie. Veillez à indiquer les valeurs de paiement et de recette dns la séquence de votre choix avec les signes appropriés (valeurs positives pour l'argent reçu, valeurs négatives pour l'argent versé). </para>
          <para>Si n est le nombre de flux de trésorerie en valeurs, frate est le finance_rate et rrate est le reinvest_rate, alors la formule de <b>MIrr</b> est : </para>
          <para>Figure 1 : Formule pour la méthode MIrr</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice1, matrice2 - matrices à multiplier.</param>
        <param name="Arg2">Matrice1, matrice2 - matrices à multiplier.</param>
        <summary>Renvoie le produit matriciel des deux matrices. Le résultat est une matrice avec le même nombre de lignes que matrice1 et le même nombre de colonnes que matrice2.</summary>
        <returns>To be added.</returns>
        <remarks><para>Le nombre de colonnes dans matrice1 doit être identique au nombre de lignes dans matrice2, et les deux matrices ne doivent contenir que des nombres.</para>
          <para>Matrice1 et matrice2 peuvent être indiquées sous forme de plages de cellules, de constantes matricielles ou de références.</para>
          <para>
            <b>MMult</b> renvoie la #VALUE! dans les cas suivants : </para>
          <para>Des cellules sont vides ou contiennent du texte.</para>
          <para>Le nombre de colonnes dans matrice1 est différent du nombre de lignes dans matrice2.</para>
          <para>La taille de la matrice qui en résulte est supérieure ou égale à un total de 5 461 cellules.</para>
          <para>Le tableau de produits matriciel a de deux tableaux b et c est : </para>
          <para>Figure 1 : Matrice tableau de produits a de deux tableaux b et c</para>
          <para> </para>
          <para> </para>
          <para>où i est le numéro de ligne et j le numéro de colonne.</para>
          <para>Les formules qui renvoient des matrices doivent être saisies sous forme de formules matricielles.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments pour lesquels vous voulez calculer le mode. Vous pouvez également utiliser une seule matrice ou une référence à une matrice au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la valeur la plus fréquente ou la plus répétitive dans une matrice ou une plage de données.</summary>
        <returns>To be added.</returns>
        <remarks><para>Cette fonction a été remplacée par de nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d’Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> fonctions.</para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si le jeu de données ne contient aucun point de données en double, <b>le mode</b> renvoie la valeur d#N/A.</para>
          <para>
            <b>Remarque</b>: la <b>fonction Mode</b> mesure la tendance centrale, qui est l’emplacement du centre d’une série de nombres dans une distribution statistique. Les trois mesures les plus courantes sont :</para>
          <list type="bullet">
            <item>
              <description>Moyenne qui représente l'espérance arithmétique et est calculée en ajoutant une série de nombres, puis en divisant le résultat par leur nombre. Par exemple, la moyenne de 2, 3, 3, 5, 7 et 10 est 30 divisé par 6, qui donne 5.</description>
            </item>
            <item>
              <description>Médiane qui est le milieu d'une série de nombres. Autrement dit, la moitié des nombres sont supérieurs à la médiane et l'autre moitié est inférieure. Par exemple, la médiane de 2, 3, 3, 5, 7 et 10 est 4.</description>
            </item>
            <item>
              <description>Mode qui est le nombre le plus récurrent dans une série. Par exemple, le mode de 2, 3, 3, 5, 7 et 10 est 3.</description>
            </item>
          </list>
          <para>Pour une distribution symétrique d'une série de nombres, ces trois mesures de tendance centrale sont toutes identiques. Pour une distribution oblique, elles peuvent être différentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1 : premier argument de nombre pour lequel vous souhaitez calculer le mode.</param>
        <param name="Arg2">Nombre2 - Nombre30 : arguments de nombre compris entre 2 et 30 pour lesquels vous souhaitez calculer le mode. Vous pouvez également utiliser une seule matrice ou une référence à une matrice au lieu d’arguments séparés par des virgules.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie une matrice verticale des valeurs les plus fréquentes ou répétitives dans une matrice ou une plage de données.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si le jeu de données ne contient aucun point de données en double, <b>Mode_Mult</b> renvoie la valeur d#N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2, ... : 1 à 30 arguments pour lesquels vous voulez calculer le mode. Vous pouvez également utiliser une seule matrice ou une référence à une matrice au lieu d’arguments séparés par des virgules (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la valeur la plus fréquente ou la plus répétitive dans une matrice ou une plage de données.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si le jeu de données ne contient aucun point de données en double, <b>Mode_Sngl</b> renvoie la valeur d#N/A.</para>
          <para>
            <b>Remarque</b>: la <b>Mode_Sngl</b> mesure la tendance centrale, qui est l’emplacement du centre d’une série de nombres dans une distribution statistique. Les trois mesures les plus courantes sont :</para>
          <list type="bullet">
            <item>
              <description>Moyenne La moyenne arithmétique, calculée en ajoutant un groupe de nombres, puis en divisant par le nombre de ces nombres. Par exemple, la moyenne de 2, 3, 3, 5, 7 et 10 est 30 divisé par 6, qui donne 5. </description>
            </item>
            <item>
              <description>Médiane Le nombre intermédiaire d’un groupe de nombres ; autrement dit, la moitié des nombres ont des valeurs qui sont plus élevées que la médiane et la moitié des nombres ont des valeurs inférieures à la médiane. Par exemple, la médiane de 2, 3, 3, 5, 7 et 10 est 4. </description>
            </item>
            <item>
              <description>Mode Le nombre le plus fréquent dans un groupe de nombres. Par exemple, le mode de 2, 3, 3, 5, 7 et 10 est 3.</description>
            </item>
          </list>
          <para>Pour une distribution symétrique d'une série de nombres, ces trois mesures de tendance centrale sont toutes identiques. Pour une distribution oblique, elles peuvent être différentes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, la valeur à arrondir.</param>
        <param name="Arg2">Dénominateur - dénominateur auquel vous souhaitez arrondir le nombre.</param>
        <summary>Renvoie un nombre arrondi au dénominateur souhaité.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>MRound arrondit</b> au nombre supérieur, à l’écart de zéro, si le reste de la division du nombre par multiple est supérieur ou égal à la moitié de la valeur de multiple.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1,nombre2, ... - valeurs comprises entre 1 et 29 pour lesquelles vous souhaitez connaître le polynôme à plusieurs variables.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie le rapport de la factorielle d'une somme de valeurs sur le produit des factorielles.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>MultiNomial</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si un argument est inférieur à zéro, <b>MultiNomial</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Le polynôme à plusieurs variables est obtenu de la manière suivante : 

 </para>
          <para>Figure 1 : Équation de la méthode MultiNomial</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre integer spécifiant la dimension de la matrice d’unité que vous souhaitez renvoyer.</param>
        <summary>Renvoie la matrice d’unité pour la dimension spécifiée.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre_échecs : nombre d’échecs.</param>
        <param name="Arg2">Nombre_succès : nombre du seuil de succès.</param>
        <param name="Arg3">Probabilité_succès : probabilité de réussite.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>NegBinom_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la distribution binomiale négative. <b>NegBinom_Dist</b> renvoie la probabilité qu’il y aura number_f échecs avant la number_s-e réussite, lorsque la probabilité constante d’une réussite est probability_s. Cette fonction est similaire à la distribution binomiale, excepté que le nombre de succès est fixe et que le nombre d’essais est variable. Comme dans la distribution binomiale, il est supposé que les essais sont indépendants.</summary>
        <returns>To be added.</returns>
        <remarks><para>Par exemple, vous devez trouver 10 personnes avec d’excellents réflexes, et vous savez que la probabilité qu’un candidat possède ces qualifications est de 0,3. <b>NegBinom_Dist</b> calcule la probabilité que vous interrogez un certain nombre de candidats non qualifiés avant de trouver les 10 candidats qualifiés : </para>
          <para>Nombre_échecs et nombre_succès sont tronqués de manière à obtenir des entiers.</para>
          <para>Si un argument n’est pas unnumérique, <b>NegBinom_Dist</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probability_s &lt; 0 ou si probabilité &gt; 1, <b>NegBinom_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si number_f &lt; 0 ou number_s &lt; 1, <b>NegBinom_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la distribution binomiale négative est la suivante : </para>
          <para>Figure 1 : Équation de la distribution binomiale négative</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>x est number_f, r est number_s et p est probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre_échecs : nombre d’échecs.</param>
        <param name="Arg2">Nombre_succès : nombre du seuil de succès.</param>
        <param name="Arg3">Probabilité_succès : probabilité de réussite.</param>
        <summary>Renvoie la distribution binomiale négative. NegBinomDist renvoie la probabilité d’échecs number_f avant le number_s-e succès, lorsque la probabilité constante d’un succès est probability_s. Cette fonction est similaire à la distribution binomiale, excepté que le nombre de succès est fixe et que le nombre d’essais est variable. Comme dans la distribution binomiale, il est supposé que les essais sont indépendants.</summary>
        <returns>To be added.</returns>
        <remarks><para>Cette fonction a été remplacée par de nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d’Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Par exemple, vous devez trouver 10 personnes avec d’excellents réflexes, et vous savez que la probabilité qu’un candidat possède ces qualifications est de 0,3. <b>NegBinomDist</b> calcule la probabilité que vous interrogez un certain nombre de candidats non qualifiés avant de trouver les 10 candidats qualifiés. </para>
          <para>Nombre_échecs et nombre_succès sont tronqués de manière à obtenir des entiers.</para>
          <para>Si un argument n’est pas unnumérique, <b>NegBinomDist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probability_s &lt; 0 ou si probabilité &gt; 1, <b>NegBinomDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si number_f &lt; 0 ou number_s &lt; 1, <b>NegBinomDist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de la distribution binomiale négative est la suivante : </para>
          <para>Figure 1 : Équation de la distribution binomiale négative</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>x est number_f, r est number_s et p est probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - date représentant la date de début.</param>
        <param name="Arg2">End_date - date représentant la date de fin.</param>
        <param name="Arg3">Congés - plage facultative d'une ou de plusieurs dates à exclure du calendrier des jours ouvrés, comme les jours fériés et les ponts. La liste peut être une plage de cellules contenant les dates ou une constante matricielle des numéros de série qui représentent les dates.</param>
        <summary>Renvoie le nombre de jours ouvrés complets entre la date de début et la date de fin. Les jours ouvrés excluent les week-ends et les dates de congés. Utilisez <b>NetworkDays pour</b> calculer les avantages sociaux des employés qui s’accumulent en fonction du nombre de jours travaillés au cours d’une période spécifique.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</para>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Si un argument n’est pas une date valide, <b>NetworkDays</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date : date de début pour laquelle la différence doit être calculée. La date de début peut être antérieure, identique ou postérieure à la date de fin.</param>
        <param name="Arg2">End_date : date de fin pour laquelle la différence doit être calculée. La date de début peut être antérieure, identique ou postérieure à la date de fin.</param>
        <param name="Arg3">Week-end : indique les jours de la semaine qui sont des jours de week-end et qui ne sont pas inclus dans le nombre de jours ouvrs entiers entre start_date et end_date. Week-end est un numéro de week-end ou une chaîne qui indique la date des week-ends.</param>
        <param name="Arg4">Jours fériés : ensemble facultatif d’une ou de plusieurs dates à exclure du calendrier des jours oués. Les jours fériés représentent une plage de cellules contenant des dates ou une constante de matrice des valeurs sérielles qui représentent ces dates. Le classement des dates ou des valeurs sérielles des jours fériés peut être arbitraire.</param>
        <summary>Renvoie le nombre de jours ouvrés entiers compris entre deux dates à l’aide de paramètres identifiant les jours du week-end et leur nombre. Les jours du week-end et ceux qui sont désignés comme des jours fériés ne sont pas considérés comme des jours ouvrés.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la valeur de date_début est postérieure à la valeur de date_fin, la valeur renvoyée sera négative et l’ampleur sera le nombre de jours ouvrés entiers.</para>
          <para>Si start_date est hors de portée de la valeur de base de la date <b>actuelle,</b> NetworkDays_Intl renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si end_date est en dehors de la plage de la valeur de base de la date actuelle, <b>NetworkDays_Intl</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si une chaîne de week-end n’est pas valide ou contient des caractères non <b>valides, NetworkDays_Intl</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux_effectif - taux d'intérêt effectif.</param>
        <param name="Arg2">Nbparan - nombre de périodes par an.</param>
        <summary>Renvoie le taux d'intérêt annuel nominal compte tenu du taux effectif et du nombre de périodes par an.</summary>
        <returns>To be added.</returns>
        <remarks><para>Nbparan est tronqué de manière à utiliser un entier.</para>
          <para>Si l’un des arguments n’est pas unnumérique, <b>Nominal</b> renvoie la valeur #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si effect_rate ≤ 0 ou npery &lt; 1, <b>nominal</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>La</b> nominal est liée <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> à comme indiqué dans l’équation suivante : </para>
          <para>Figure 1 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur dont vous recherchez la distribution.</param>
        <param name="Arg2">Moyenne : moyenne arithmétique de la distribution.</param>
        <param name="Arg3">Écart_type : écart-type de la distribution.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>Norm_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction de probabilité de masse.</param>
        <summary>Renvoie la distribution normale pour l’espérance mathématique et l’écart-type spécifiés. Cette fonction a de nombreuses applications en statistique, dont les tests d’hypothèses.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si moyenne ou standard_dev n’est pas unnumérique, <b>Norm_Dist</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si standard_dev ≤ 0, <b>Norm_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si moyenne = 0, standard_dev = 1 et cumulative = <b>true</b>, <b>Norm_Dist</b> renvoie la distribution normale standard, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . </para>
          <para>L’équation de la fonction de densité normale (cumulative = <b>false</b>) est la suivante : </para>
          <para>Figure 1 : Équation de la fonction de densité normale</para>
          <para> </para>
          <para> </para>
          <para>Lorsque cumulative = <b>true,</b>la formule est l’intégrale de l’infini négatif à x de la formule donnée.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité : probabilité correspondant à la distribution normale.</param>
        <param name="Arg2">Moyenne : moyenne arithmétique de la distribution.</param>
        <param name="Arg3">Écart_type : écart-type de la distribution.</param>
        <summary>Renvoie l’inverse de la distribution cumulée normale pour la moyenne et l’écart-type sépcifiés.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas <b>numérique, Norm_Inv</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; = 0 ou si probabilité &gt; = 1, <b>Norm_Inv</b> renvoie la probabilité #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si standard_dev ≤ 0, <b>Norm_Inv</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si moyenne = 0 et standard_dev = 1, <b>Norm_Inv</b> utilise la distribution normale standard (voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> ).</para>
          <para>Pour une probabilité donnée, <b>Norm_Inv</b> recherche cette valeur x de telle NORM_DIST(x, moyenne, standard_dev, TRUE) = probabilité. Ainsi, la précision de <b>Norm_Inv</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z : valeur dont vous recherchez la distribution.</param>
        <param name="Arg2">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>Norm_S_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction de probabilité de masse.</param>
        <summary>Renvoie la fonction de distribution cumulée normale standard. La distribution présente une moyenne de 0 (zéro) et un écart-type de 1. Utilisez cette fonction à la place des zones de courbe normale classiques.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si z n’est pas <b>numérique, Norm_S_Dist</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation pour la fonction de densité normale classique est la suivante : 

 </para>
          <para>Figure 1 : Équation de la fonction de densité normale standard</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité : probabilité correspondant à la distribution normale.</param>
        <summary>Renvoie l’inverse de la distribution cumulée normale classique. La distribution présente une moyenne de 0 (zéro) et un écart-type de 1.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la probabilité n’est pas numérique, <b>Norm_S_Inv</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou &gt; probabilité 1, <b>Norm_S_Inv</b> renvoie la probabilité #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>Pour une probabilité donnée, <b>Norm_S_Inv</b> recherche cette valeur z de telle NORM_S_DIST(z) = probabilité. Ainsi, la précision de <b>Norm_S_Inv</b>dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . <b>Norm_S_Inv</b> utilise une technique de recherche itérative. Si la recherche n’a rien donné après 100 itérations, la fonction renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - valeur pour laquelle vous souhaitez la distribution.</param>
        <param name="Arg2">Moyenne - moyenne arithmétique de la distribution.</param>
        <param name="Arg3">Écart_type - écart-type de la distribution.</param>
        <param name="Arg4">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>vrai,</b> <b>NormDist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction de probabilité de masse.</param>
        <summary>Renvoie la distribution normale pour la moyenne et l'écart-type spécifiés. Cette fonction possède de nombreuses applications en matière de statistiques, y compris pour tester des hypothèses.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Si moyenne ou standard_dev n’est pas unnumérique, <b>NormDist</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si standard_dev ≤ 0, <b>NormDist</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si moyenne = 0, standard_dev = 1 et cumulative = <b>true</b>, <b>NormDist</b> renvoie la distribution normale standard, <b>NormDist</b>. </para>
          <para>L’équation de la fonction de densité normale (cumulative = <b>false</b>) est la suivante : </para>
          <para>Figure 1 : Équation de la fonction de densité normale</para>
          <para> </para>
          <para> </para>
          <para>Lorsque cumulative = <b>true,</b>la formule est l’intégrale de l’infini négatif à x de la formule donnée.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité - probabilité correspondant à la distribution normale.</param>
        <param name="Arg2">Moyenne - moyenne arithmétique de la distribution.</param>
        <param name="Arg3">Écart_type - écart-type de la distribution.</param>
        <summary>Renvoie l’inverse de la distribution cumulée normale pour la moyenne et l’écart-type sépcifiés.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> méthode.</para>
          <para>Si un argument n’est pas unnumérique, <b>NormInv</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou probabilité &gt; 1, <b>NormInv</b> renvoie la probabilité #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si standard_dev ≤ 0, <b>NormInv</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si moyenne = 0 et standard_dev = 1, <b>NormInv</b> utilise la distribution normale standard (voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" /> ). </para>
          <para>Pour une probabilité donnée, <b>NormInv</b> recherche cette valeur x de telle telle que NORMDIST(x, moyenne, standard_dev, TRUE) = probabilité. Par conséquent, la précision <b>de NormInv</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" /> . <b>NormInv utilise</b> une technique de recherche itérative. Si la recherche n’a rien donné après 100 itérations, la fonction renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z - valeur pour laquelle vous souhaitez la distribution.</param>
        <summary>Renvoie la fonction de distribution cumulée normale standard. La distribution présente une moyenne de 0 (zéro) et un écart-type de 1. Utilisez cette fonction à la place des zones de courbe normale classiques.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> méthode.</para>
          <para>Si z n’est pas unnumérique, <b>NormSDist</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation pour la fonction de densité normale classique est la suivante : 

 </para>
          <para>Figure 1 : Équation de la fonction de densité normale standard</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité - probabilité correspondant à la distribution normale.</param>
        <summary>Renvoie l’inverse de la distribution cumulée normale classique. La distribution présente une moyenne de 0 et un écart-type de 1.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> méthode.</para>
          <para>Si la probabilité n’est pas unnumérique, <b>NormSInv</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; = 0 ou si probabilité &gt; = 1, <b>NormSInv</b> renvoie la probabilité #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para>Pour une probabilité donnée, <b>NormSInv</b> recherche cette valeur z de telle telle que NORMSDIST(z) = probabilité. Par conséquent, la précision <b>de NormSInv</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" /> .</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux - taux d'intérêt par période.</param>
        <param name="Arg2">Pmt - paiement effectué à chaque période. Il ne peut pas changer pendant l'annuité. En général, pmt contient le capital et les intérêts sans autres frais ou taxes.</param>
        <param name="Arg3">Pv - valeur actuelle, ou valeur forfaitaire correspondant à la valeur actuelle d'une série de paiements futurs.</param>
        <param name="Arg4">Fv - valeur future ou solde de caisse à atteindre une fois le dernier paiement effectué. Si la valeur future est omise, elle est considérée par défaut à 0 (la valeur future d'un prêt, par exemple, est de 0).</param>
        <param name="Arg5">Type - numéro 0 ou 1. Indique l'échéance des paiements.</param>
        <summary>Renvoie le nombre de périodes d'un investissement fondé sur des paiements réguliers et constants, et un taux d'intérêt stable.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>À la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Au début de la période</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux - taux de remise sur toute la durée d'une période.</param>
        <param name="Arg2">Valeur1, valeur2, ... - 1 à 29 arguments représentant les paiements et les recettes.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcule la valeur nette actuelle d'un investissement à l'aide d'un taux de remise et d'une série de paiements futurs (valeurs négatives) et de recettes (valeurs positives).</summary>
        <returns>To be added.</returns>
        <remarks><para>Valeur1, valeur2, ... doivent être espacées de manière égale dans le temps et avoir lieu à la fin de chaque période.</para>
          <para>
            <b>Npv</b> utilise l’ordre de valeur1, valeur2, ... pour interpréter l’ordre des mouvements de trésorerie. Veillez à indiquer les valeurs de paiements et de recettes dans l'ordre correct. </para>
          <para>Les arguments sous forme de nombres, de cellules vides, de valeurs logiques ou de représentations textuelles de nombres sont calculés. Les arguments correspondant à des valeurs d'erreur ou à du texte qui ne peuvent pas être convertis en nombres sont ignorés.</para>
          <para>Si un argument est une matrice de référence, seuls les nombres dans cette matrice ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans la matrice ou la référence sont ignorés.</para>
          <para><b>L’investissement Npv</b> commence une période avant la date de la trésorerie de la valeur1 et se termine par la dernière trésorerie de la liste. Le <b>calcul Npv</b> est basé sur les futurs flux de trésorerie. Si votre premier flux de trésorerie a lieu au début de la première période, la première valeur doit être ajoutée au résultat <b>Npv,</b> non incluse dans les arguments de valeurs. Pour plus d'informations, voir les exemples ci-dessous. </para>
          <para>Si n est le nombre de mouvements de trésorerie dans la liste de valeurs, la formule pour <b>Npv</b> est : </para>
          <para>Figure 1 : Formule de la méthode Npv</para>
          <para> </para>
          <para> </para>
          <para>
            <b>Npv</b> est similaire à la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> fonction (valeur actuelle). La principale différence entre pv et <b>Npv</b> est que les flux de trésorerie peuvent commencer à la fin ou au début <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> de la période. Contrairement aux valeurs de trésorerie <b>variables Npv,</b> les flux de trésorerie doivent être constants tout <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> au long de l’investissement. Pour plus d’informations sur les annuités et les fonctions financières, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . </para>
          <para>
            <b>Npv</b> est également liée à la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> fonction (taux de retour interne). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> est le taux pour lequel <b>Npv</b> est égal à zéro : NPV(IRR(...), ...) = 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Chaîne représentant le nombre que vous souhaitez convertir.</param>
        <param name="Arg2">Caractère utilisé comme séparateur décimal dans la chaîne.</param>
        <param name="Arg3">Caractère utilisé comme séparateur de groupe dans la chaîne.</param>
        <summary>Convertit le texte en nombre de manière indépendante des paramètres régionaux.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - Nombre octal à convertir. Il contient plus de 10 caractères. Le bit le plus significatif du nombre est le bit de signature (30e bit en partant de la droite). Les 29 autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <param name="Arg2">Nb_car - nombre de caractères à utiliser. Si des caractères sont omis, <b>Oct2Bin</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre octal en nombre binaire.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre est négatif, <b>Oct2Bin</b> ignore les caractères et renvoie un nombre binaire de 10 caractères. </para>
          <para>Si le nombre est négatif, il ne peut pas être inférieur à 7777777000. Si le nombre est positif, il ne peut pas être supérieur à 777.</para>
          <para>Si le nombre n’est pas un nombre octal valide, <b>Oct2Bin</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si <b>Oct2Bin</b> nécessite plus de caractères, il renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas unnumérique, <b>Oct2Bin</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs sont négatives, <b>Oct2Bin</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - nombre octal à convertir. Il ne peut pas contenir plus de 10 caractères (30 caractères). Le bit le plus significatif du nombre est le bit de signature (30e bit en partant de la droite). Les 29 autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <summary>Convertit un nombre octal en nombre décimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n’est pas un nombre octal valide, <b>Oct2Dec</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - nombre octal à convertir. Il ne peut pas contenir plus de 10 caractères (30 caractères). Le bit le plus significatif du nombre est le bit de signature (30e bit en partant de la droite). Les 29 autres bits sont les bits de magnitude. Les nombres négatifs sont représentés avec une notation de complément à deux.</param>
        <param name="Arg2">Nb_car - nombre de caractères à utiliser. Si des caractères sont omis, <b>Oct2Hex</b> utilise le nombre minimal de caractères nécessaires. Nb_car permet d'ajouter des zéros de tête à la valeur renvoyée.</param>
        <summary>Convertit un nombre octal en nombre hexadécimal.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre est négatif, <b>Oct2Hex</b> ignore les caractères et renvoie un nombre hexadécimal de 10 caractères. </para>
          <para>Si le nombre n’est pas un nombre octal valide, <b>Oct2Hex</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si <b>Oct2Hex</b> nécessite plus de caractères, il renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les caractères ne correspondent pas à un entier, l'argument est tronqué.</para>
          <para>Si places n’est pas unnumérique, <b>Oct2Hex</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs sont négatives, <b>Oct2Hex</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre, la valeur à arrondir.</param>
        <summary>Renvoie un nombre arrondi à l'entier impair le plus proche.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le nombre n’est pas un nombre, <b>Odd</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Indépendamment du signe du nombre, une valeur est arrondie lorsqu'elle n'est pas égale à zéro. Si le nombre est un entier impair, aucun arrondi n'est appliqué.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Émission - date d'émission du titre.</param>
        <param name="Arg4">Premier_coupon - date du premier coupon du titre.</param>
        <param name="Arg5">Taux - taux d'intérêt du titre.</param>
        <param name="Arg6">Rdt - rendement annuel du titre.</param>
        <param name="Arg7">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg8">Fréquence, le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg9">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le prix par valeur faciale de 100 dollars d'un titre ayant une première période impaire (courte ou longue).</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance, la date d'émission, la date du premier coupon et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement, l’échéance, l’émission ou first_coupon n’est pas une date valide, <b>OddFPrice</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le &lt; taux est 0 ou si yld &lt; 0, <b>OddFPrice</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>OddFPrice renvoie</b> le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>La condition de date suivante doit être remplie ; Sinon, <b>OddFPrice</b> renvoie le #NUM! valeur d’erreur : </para>
          <para>échéance et &gt; first_coupon &gt; règlement &gt;</para>
          <para> </para>
          <para>
            <b>OddFPrice est</b> calculé comme suit : Premier coupon court impair :</para>
          <para>Figure 1 : Premier coupon court impair</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>A = number of days from the beginning of the coupon period to the settlement date (accrued days).</para>
          <para>DSC = nombre de jours entre le règlement et la date du prochain coupon.</para>
          <para>DFC = nombre de jours entre le début du premier coupon impair et la date du premier coupon.</para>
          <para>E = nombre de jours dans la période de coupon.</para>
          <para>N = nombre de coupons à payer entre la date de règlement et la date d’échange. (Si ce nombre contient une fraction, il est élevé au nombre entier suivant.)</para>
          <para>Premier coupon long impair :</para>
          <para>Figure 2 : Premier coupon long impair</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>Ai = nombre de jours entre le début et la dernière période de quasi-coupon au cours d’une période impaire.</para>
          <para>DCi = nombre de jours entre la date d’effet (ou la date d’émission) et le premier coupon (i = 1) ou le nombre de jours dans le quasi-coupon (i = 2,..., i = NC).</para>
          <para>DSC = nombre de jours entre le règlement et la date du prochain coupon.</para>
          <para>E = nombre de jours dans la période de coupon.</para>
          <para>N = nombre de coupons à payer entre la date du premier coupon réel et la date d’échange. (Si ce nombre contient une fraction, il est élevé au nombre entier suivant.)</para>
          <para>NC = nombre de périodes de quasi-coupon qui s’intègrent dans une période impaire. (Si ce nombre contient une fraction, il est élevé au nombre entier suivant.)</para>
          <para>NLi = longueur normale en jours de la période de quasi-coupon au cours de la période impaire.</para>
          <para>Nq = nombre de périodes de quasi-coupon entières entre la date de règlement et le premier coupon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Émission - date d'émission du titre.</param>
        <param name="Arg4">Premier_coupon - date du premier coupon du titre.</param>
        <param name="Arg5">Taux - taux d'intérêt du titre.</param>
        <param name="Arg6">Pr - prix du titre.</param>
        <param name="Arg7">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg8">Fréquence, le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg9">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le rendemande d'un titre qui possède une première période impaire (courte ou longue).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance, la date d'émission, la date du premier coupon et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement, l’échéance, l’émission ou first_coupon n’est pas une date valide, <b>OddFYield</b> renvoie la date #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si taux &lt; 0 ou si pr ≤ 0, <b>OddFYield</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>OddFYield renvoie</b> la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>La condition de date suivante doit être remplie ; Sinon, <b>OddFYield</b> renvoie la #NUM! valeur d’erreur : </para>
          <para>échéance et &gt; first_coupon &gt; règlement &gt;</para>
          <para>Excel utilise une technique itérative pour calculer <b>OddFYield</b>. Cette fonction utilise la méthode Newton basée sur la formule utilisée pour la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> fonction. Le rendement est modifié par le biais de 100 itérations jusqu'à ce que le prix estimé avec le rendement donné s'approche du prix. Voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> la formule utilisée par <b>OddFYield.</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Dernier_coupon - date du dernier coupon du titre.</param>
        <param name="Arg4">Taux - taux d'intérêt du titre.</param>
        <param name="Arg5">Rdt - rendement annuel du titre.</param>
        <param name="Arg6">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg7">Fréquence, le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg8">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le prix par valeur faciale de 100 dollars d'un titre ayant une période de dernier coupon impaire (courte ou longue).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Le règlement, l'échéance, le dernier coupon et la base sont raccourcis à des entiers.</para>
          <para>Si le règlement, l’échéance ou last_interest n’est pas une date valide, <b>OddLPrice</b> renvoie la valeur #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le &lt; taux est 0 ou si le taux &lt; est 0, <b>OddLPrice</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>OddLPrice renvoie</b> le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>La condition de date suivante doit être remplie ; Sinon, <b>OddLPrice renvoie</b> le #NUM! valeur d’erreur : </para>
          <para>règlement à &gt; &gt; l’échéance last_interest</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Dernier_coupon - date du dernier coupon du titre.</param>
        <param name="Arg4">Taux - taux d'intérêt du titre.</param>
        <param name="Arg5">Pr - prix du titre.</param>
        <param name="Arg6">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg7">Fréquence, le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg8">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le rendemande d'un titre qui possède une dernière période impaire (courte ou longue).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Le règlement, l'échéance, le dernier coupon et la base sont raccourcis à des entiers.</para>
          <para>Si le règlement, l’échéance ou last_interest n’est pas une date valide, <b>OddLYield</b> renvoie la date #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le &lt; taux est 0 ou ≤ 0, <b>OddLYield</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>OddLYield renvoie</b> la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>La condition de date suivante doit être remplie ; Sinon, <b>OddLYield</b> renvoie la #NUM! valeur d’erreur : </para>
          <para>règlement à &gt; &gt; l’échéance last_interest </para>
          <para>
            <b>OddLYield est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode OddLYield</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>Ai = nombre de jours cumulés pour la dernière période de quasi-coupon au cours d’une période impaire, à partir de la date du dernier intérêt avant l’échange.</para>
          <para>DCi = nombre de jours comptés dans la dernière ou la dernière période de quasi-coupon comme étant délimités par la longueur de la période de coupon réelle.</para>
          <para>NC = nombre de périodes de quasi-coupon qui s’intègrent dans une période impaire ; si ce nombre contient une fraction, il est élevé au nombre entier suivant.</para>
          <para>NLi = longueur normale en jours de la dernière période de quasi-coupon au cours de la période de coupon impaire.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1,logical2,... - 1 à 30 conditions que vous souhaitez tester et qui peuvent être <b>vraies</b> ou <b>fausses.</b></param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie <b>true si</b> un argument est <b>vrai</b>; renvoie <b>false si</b> tous les arguments sont <b>faux</b>.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être évalués en valeurs logiques telles que <b>true</b> ou <b>false,</b>ou dans des tableaux ou des références qui contiennent des valeurs logiques. </para>
          <para>Si un argument de matrice ou de référence contient du texte ou des cellules vides, ces valeurs sont ignorées.</para>
          <para>Si la plage spécifiée ne contient aucune valeur logique, <b>ou</b> renvoie la valeur #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Vous pouvez utiliser une <b>formule de</b> tableau Or pour voir si une valeur se produit dans un tableau. Pour entrer une formule de tableau, appuyez sur les touches CTRL+MAJ+ENTREE.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Renvoie l'objet parent de l'objet spécifié. En lecture seule.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux d’intérêt par période.</param>
        <param name="Arg2">Valeur actuelle de l’investissement.</param>
        <param name="Arg3">Valeur future souhaitée de l’investissement.</param>
        <summary>Renvoie le nombre de périodes requises par un investissement pour atteindre une valeur spécifiée.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice1 - ensemble de valeurs indépendantes.</param>
        <param name="Arg2">Matrice2 - ensemble de valeurs dépendantes.</param>
        <summary>Renvoie le coefficient de corrélation d'échantillonnage de Pearson, r, un index sans dimension compris entre -1 et 1 (inclus), et reflète l'étendue d'une relation linéaire entre deux ensembles de données.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des constantes matricielles ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de matrice ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Si array1 et array2 sont vides ou ont un nombre différent de points de données, <b>Pearson</b> renvoie la valeur d’erreur #N/A. </para>
          <para>La formule du coefficient de corrélation de l’instant produit de Pearson, r, est la : </para>
          <para>Figure 1 : Coefficient de corrélation d’instants de produit pearson</para>
          <para> </para>
          <para> </para>
          <para>où x et y sont les moyennes d’exemple AVERAGE(array1) et AVERAGE(array2).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice - matrice ou plage de données qui définit une position relative.</param>
        <param name="Arg2">K - valeur de percentile dans la plage 0..1 (inclus).</param>
        <summary>Renvoie le k-ième percentile d’une plage. Vous pouvez utiliser cette fonction pour établir un seuil d’acceptation. Par exemple, vous pouvez décider d’examiner les candidats au-delà du 90e percentile.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> la méthode et la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> méthode. </para>
          <para>Si le tableau est vide, <b>le centile</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k n’est pas unnumérique, <b>percentile</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k est &lt; 0 ou k &gt; 1, <b>percentile</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k n’est pas un multiple de 1/(n - 1), <b>percentile</b> interpole pour déterminer la valeur au k-e centile.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice : matrice ou plage de données qui définit une position relative.</param>
        <param name="Arg2">K - Valeur de centile dans la plage 0..1, exclusive.</param>
        <summary>Renvoie le k-ième centile des valeurs d’une plage, où k se trouve dans la plage comprise entre 0 et 1 exclus.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>Percentile_Exc</b> renvoie la #NUM ! valeur d’erreur </para>
          <para>Si k n’est pas <b>unnumérique, Percentile_Exc</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k est ≤ 0 ou k ≥ <b>1,</b> Percentile_Exc renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k n’est pas un multiple de <b></b> 1/(n - 1), Percentile_Exc interpole pour déterminer la valeur au k-e centile. </para>
          <para>
            <b>Percentile_Exc</b> interpole lorsque la valeur du centile spécifié se trouve entre deux valeurs dans le tableau. S’il ne peut pas interpoler pour le centile, k spécifié, Excel renvoyera #NUM ! erreur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice : matrice ou plage de données qui définit une position relative.</param>
        <param name="Arg2">K : valeur de centile dans la plage 0..1 (inclus).</param>
        <summary>Renvoie le k-ième centile des valeurs d’une plage. Cette fonction vous permet de définir un seuil d’acceptation. Par exemple, vous pouvez n’étudier que les candidats ayant obtenu un résultat supérieur au 90e centile.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>Percentile_Inc</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k n’est pas <b>unnumérique, Percentile_Inc</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k est &lt; 0 ou k &gt; 1, <b>Percentile_Inc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k n’est pas un multiple de <b></b> 1/(n - 1), Percentile_Inc interpole pour déterminer la valeur au k-e centile.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice - matrice ou plage de données avec des valeurs numériques, qui définit une position relative.</param>
        <param name="Arg2">X - valeur pour laquelle vous souhaitez connaître le rang.</param>
        <param name="Arg3">Signification - valeur facultative qui identifie le nombre de chiffres significatifs pour la valeur de pourcentage renvoyée. S’il est omis, <b>PercentRank</b> utilise trois chiffres (0.xxx).</param>
        <summary>Renvoie le rang d’une valeur dans un ensemble de données défini comme pourcentage de cet ensemble. Cette fonction peut être utilisée pour évaluer la position relative d’une valeur dans un ensemble de données. Par exemple, vous pouvez utiliser <b>PercentRank</b> pour évaluer la position d’un score de test d’aptitude parmi tous les scores du test.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> fonctions.</para>
          <para>Si le tableau est vide, <b>PercentRank renvoie</b> la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; valeur est 1, <b>PercentRank</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x ne correspond pas à l’une des valeurs du tableau, <b>PercentRank</b> interpole pour renvoyer le rang de pourcentage correct.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice : matrice ou plage de données avec des valeurs numériques, qui définit une position relative.</param>
        <param name="Arg2">X : valeur dont vous souhaitez connaître le rang.</param>
        <param name="Arg3">Importance : valeur qui identifie le nombre de chiffres significatifs pour la valeur de pourcentage renvoyée. S’il est omis, <b>PercentRank_Exc</b> utilise trois chiffres (0.xxx).</param>
        <summary>Renvoie le rang d’une valeur dans un ensemble de données défini comme pourcentage (0..1, exclus) de cet ensemble.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>PercentRank_Exc</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; valeur est 1, <b>PercentRank_Exc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x ne correspond pas à l’une des valeurs du tableau, <b>PercentRank_Exc</b> interpole pour renvoyer le rang de pourcentage correct.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice : matrice ou plage de données avec des valeurs numériques, qui définit une position relative.</param>
        <param name="Arg2">X : valeur dont vous souhaitez connaître le rang.</param>
        <param name="Arg3">Précision : valeur facultative qui identifie le nombre de chiffres significatifs pour la valeur de pourcentage renvoyée. S’il est omis, <b>PercentRank_Inc</b> utilise trois chiffres (0.xxx).</param>
        <summary>Renvoie le rang d’une valeur d’une série de données sous forme de pourcentage (0..1, inclus) du jeu de données. Cette fonction peut être utilisée pour évaluer la position relative d’une valeur dans un ensemble de données. Par exemple, vous pouvez utiliser <b>PercentRank_Inc</b> pour évaluer la position d’un score de test d’aptitude parmi tous les scores du test.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>PercentRank_Inc</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; valeur est 1, <b>PercentRank_Inc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x ne correspond pas à l’une des valeurs du tableau, <b>PercentRank_Inc</b> interpole pour renvoyer le rang de pourcentage correct.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - entier qui décrit le nombre d'objets.</param>
        <param name="Arg2">Nb_éléments_choisis - entier qui décrit le nombre d'objets dans chaque permutation.</param>
        <summary>Renvoie le nombre de permutations pour un nombre d'objets donné, qui peuvent être sélectionnés à partir d'objets number. Une permutation est un ensemble ou sous-ensemble d'objets ou d'événements dans lesquels l'ordre interne est significatif. Les permutations diffèrent des combinaisons, en ce sens que dans les combinaisons, l'ordre interne n'est pas significatif. Utilisez cette fonction pour effectuer des calculs de probabilité de type loterie.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les deux arguments sont raccourcis à des entiers.</para>
          <para>Si nombre ou number_chosen n’est pas un nombre, <b>Permut</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le ≤ est 0 ou number_chosen &lt; 0, <b>Permut</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le &lt; nombre number_chosen, <b>Permut</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L'équation pour le nombre de permutations est la suivante : 

 </para>
          <para>Figure 1 : Équation du nombre de permutations</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre total d’objets.</param>
        <param name="Arg2">Nombre d’objets dans chaque permutation.</param>
        <summary>Renvoie le nombre de permutations pour un nombre donné d’objets (avec répétitions) qui peuvent être sélectionnés à partir du nombre total d’objets.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre pour lequel vous souhaitez obtenir la densité de la distribution normale standard.</param>
        <summary>Renvoie la valeur de la fonction de densité pour une distribution normale standard.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Référence - une chaîne de texte ou une référence à une cellule individuelle ou à une plage de cellules, qui contient une chaîne de texte Furigana.</param>
        <summary>Extrait les caractères phonétiques (Furigana) d'une chaîne de texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la référence est une plage de cellules, la chaîne de texte Furigana dans la cellule du coin supérieure gauche est renvoyée. </para>
          <para>Si la référence est une plage de cellules non adjacentes, la valeur d'erreur #N/A est renvoyée.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Renvoie le nombre 3,14159265358979, la constante mathématique pi, précise au 15e rang.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Rate - taux d'intérêt pour le prêt.</param>
        <param name="Arg2">Npm - nombre total de paiements pour l'emprunt.</param>
        <param name="Arg3">Pv - valeur actuelle ou valeur totale correspondant à la valeur actuelle d'une série de paiements futurs. Elle est également appelée valeur principale.</param>
        <param name="Arg4">Fv - valeur future ou solde de caisse à atteindre une fois le dernier paiement effectué. Si la valeur future est omise, elle est considérée par défaut à 0 (la valeur future d'un prêt est de 0).</param>
        <param name="Arg5">Type - nombre 0 ou 1. Indique l'échéance des paiements.</param>
        <summary>Calcule le paiement d'un prêt en fonction de paiements constants et un taux d'intérêt constant.</summary>
        <returns>To be added.</returns>
        <remarks><para>Pour obtenir une description plus complète des arguments dans <b>Pmt,</b>voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> fonction.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>À la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Au début de la période</description>
            </item>
          </list>
          <para>Le paiement renvoyé par <b>Pmt</b> inclut le principal et les intérêts, mais pas d’impôts, de réservation de paiements ou de frais parfois associés à des revenus. </para>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous effectuez des paiements mensuels dans le cadre d'un prêt sur 4 ans à un taux d'intérêt annuel de 12 %, utilisez la valeur 12%/12 pour rate et la valeur 4*12 pour nper. Si vous effectuez des paiements annuels dans le cadre du même prêt, utilisez la valeur 12 % pour le taux et la valeur 4 pour nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - nombre d’événements.</param>
        <param name="Arg2">Moyenne - valeur numérique attendue.</param>
        <param name="Arg3">Cumul - valeur logique qui détermine la forme de la distribution de probabilité renvoyée. Si cumul prend la valeur TRUE, la fonction POISSON renvoie la probabilité cumulée de la loi de Poisson, selon laquelle le nombre d’événements aléatoires qui se produisent est compris entre 0 et x (inclus). Si cumul prend la valeur FALSE, la fonction renvoie la fonction de masse de la probabilité de Poisson selon laquelle le nombre d’événements qui se produisent est exactement de x.</param>
        <summary>Renvoie la loi de Poisson. Une application courante de la loi de Poisson prévoit le nombre d’événements pendant une période spécifique, comme le nombre de voitures arrivant à un poste de péage en une minute.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Si x n’est pas un entier, il est tronqué.</para>
          <para>Si x ou moyenne n’est pas unnumérique, <b>Poisson</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>Poisson</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la moyenne ≤ 0, <b>Poisson</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>Poisson</b> est calculé comme suit. </para>
          <para>Pour cumulative = <b>false</b>:</para>
          <para>Figure 1 : Calcul lorsque cumulative est false</para>
          <para> </para>
          <para> </para>
          <para>Pour cumulative = <b>true</b>:</para>
          <para>Figure 2 : Calcul lorsque cumulative est true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : nombre d’événements.</param>
        <param name="Arg2">Moyenne : valeur numérique attendue.</param>
        <param name="Arg3">Cumulative : valeur logique qui détermine la forme de la distribution de probabilité renvoyée. Si cumulative est <b>true,</b> <b>Poisson_Dist</b> la probabilité cumulée de Poisson que le nombre d’événements aléatoires qui se produisent est compris entre 0 (zéro) et x inclus ; Si <b>elle est false,</b>elle renvoie la fonction de masse de probabilité de Poisson qui fait que le nombre d’événements qui se produisent est exactement x.</param>
        <summary>Renvoie la probabilité d’une variable aléatoire suivant une loi de Poisson. Une application courante de la probabilité d’une variable aléatoire suivant une loi de Poisson prévoit un nombre d’événements sur une période donnée, comme le nombre de voitures arrivant à un poste de péage en une minute.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x n’est pas un entier, il est tronqué.</para>
          <para>Si x ou moyenne n’est pas unnumérique, <b>Poisson_Dist</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>Poisson_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la moyenne ≤ 0, <b>Poisson_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>Poisson_Dist</b> est calculé comme suit. </para>
          <para>Pour cumulative = <b>false</b>:</para>
          <para>Figure 1 : Calcul lorsque cumulative est false</para>
          <para> </para>
          <para> </para>
          <para>Pour cumulative = <b>true</b>:</para>
          <para>Figure 2 : Calcul lorsque cumulative est true</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre - nombre de base. Il peut s'agit d'un nombre réel.</param>
        <param name="Arg2">Puissance - exposant auquel le nombre de base est élevé.</param>
        <summary>Renvoie le résultat d'un nombre élevé à une puissance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux - taux d'intérêt par période.</param>
        <param name="Arg2">Pér - période qui doit se trouver dans la plage comprise entre 1 et npm.</param>
        <param name="Arg3">Npm - nombre total de périodes de paiement dans une annuité.</param>
        <param name="Arg4">Pv - valeur actuelle ou valeur totale correspondant à la valeur actuelle d'une série de paiements futurs.</param>
        <param name="Arg5">Fv - valeur future ou solde de caisse à atteindre une fois le dernier paiement effectué. Si la valeur future est omise, elle est considérée par défaut à 0 (la valeur future d'un prêt est de 0).</param>
        <param name="Arg6">Type - numéro 0 ou 1. Indique l'échéance des paiements.</param>
        <summary>Renvoie le paiement de la somme principale basée sur des paiements constants périodique et un taux d'intérêt constant.</summary>
        <returns>To be added.</returns>
        <remarks><para>Pour une description plus complète des arguments dans <b>Ppmt,</b>voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>À la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Au début de la période</description>
            </item>
          </list>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous effectuez des paiements mensuels dans le cadre d'un prêt sur 4 ans à un taux d'intérêt annuel de 12 %, utilisez la valeur 12 %/12 pour rate et la valeur 4*12 pour nper. Si vous effectuez des paiements annuels dans le cadre du même prêt, utilisez la valeur 12 % pour le taux et la valeur 4 pour nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Taux - taux de coupon annuel du titre.</param>
        <param name="Arg4">Rdt - rendement annuel du titre.</param>
        <param name="Arg5">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg6">Fréquence, le nombre de coupons payés par an. Pour les paiements annuels, fréquence = 1 ; pour les paiements biannuels, fréquence = 2; pour les paiements trimestriels, fréquence = 4.</param>
        <param name="Arg7">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le prix par valeur faciale de 100 dollars d'un titre dont les intérêts sont payés périodiquement.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>Le règlement, l'échéance, la fréquence et la base sont raccourcis à des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>price</b> renvoie la date #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si yld &lt; 0 ou si taux &lt; 0, <b>Price</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si l'≤ est 0, <b>Price</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la fréquence est un nombre autre que 1, 2 ou 4, <b>Price</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base est 0 ou si la &gt; base 4, <b>Price</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>price</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. <b>Le</b> prix est calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode Price</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>DSC = nombre de jours entre le règlement et la date du prochain coupon.</para>
          <para>E = nombre de jours dans la période de coupon au cours de laquelle la date d’règlement tombe.</para>
          <para>N = nombre de coupons à payer entre la date de règlement et la date d’échange.</para>
          <para>Un = nombre de jours entre le début de la période de coupon et la date de règlement.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Escompte - date d'escompte du titre.</param>
        <param name="Arg4">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg5">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le prix par valeur faciale de 100 dollars pour un titre escompté.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>PriceDisc</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la remise ≤ 0 ou si l’échange ≤ 0, <b>PriceDisc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base est 0 ou si la base &gt; 4, <b>PriceDisc</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>PriceDisc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>PriceDisc est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode PriceDisc</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>B = nombre de jours dans l’année, en fonction de l’année.</para>
          <para>DSM = nombre de jours entre le règlement et l’échéance.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Émission - date d'émission du titre, exprimée sous forme de nombre en série.</param>
        <param name="Arg4">Taux - taux d'intérêt du titre à la date d'émission.</param>
        <param name="Arg5">Rdt - rendement annuel du titre.</param>
        <param name="Arg6">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le prix par valeur faciale de 100 dollars d'un titre dont les intérêts sont payés à échéance.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance, la date d'émission et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement, l’échéance ou l’émission n’est pas une date valide, <b>PriceMat</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le &lt; taux est 0 ou si le taux &lt; est 0, <b>PriceMat renvoie</b> la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base est 0 ou la &gt; base 4, <b>PriceMat renvoie</b> la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>PriceMat renvoie</b> le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. <b>PriceMat est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode PriceMat</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>B = nombre de jours dans l’année, en fonction de l’année.</para>
          <para>DSM = nombre de jours entre le règlement et l’échéance.</para>
          <para>DIM = nombre de jours entre l’émission et l’échéance.</para>
          <para>Un = nombre de jours entre l’émission et le règlement.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Plage_x - plage de valeurs numériques de x, à laquelle sont associées des probabilités.</param>
        <param name="Arg2">Plage_probabilité - limite inférieure de la valeur pour laquelle vous recherchez une probabilité.</param>
        <param name="Arg3">Limite_inf - limite inférieure de la valeur pour laquelle vous recherchez une probabilité.</param>
        <param name="Arg4">Limite_sup - limite supérieure facultative de la valeur pour laquelle vous recherchez une probabilité.</param>
        <summary>Renvoie la probabilité que les valeurs d'une plage se trouve entre deux limites. Si limite_inf n'est pas indiquée, renvoie la probabilité que les valeurs de la plage_x soit égales à limite_inf.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si une valeur est prob_range ≤ 0 ou si une valeur est prob_range &gt; 1, <b>Prob</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la somme des valeurs dans prob_range ¹ 1, <b>Prob</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si upper_limit est omis, <b>Prob</b> renvoie la probabilité d’être égale à lower_limit. </para>
          <para>Si x_range et prob_range contiennent un nombre différent de points de données, <b>Prob</b> renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2, ... - 1 à 30 nombres à multiplier.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplie tous les nombres indiqués sous forme d'arguments et renvoie le produit.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments sous forme de nombres, de valeurs logiques ou de représentations textuelles de nombres sont calculés. Les arguments correspondant à des valeurs d'erreur ou à du texte ne peuvent pas être convertis en nombres sans entraîner d'erreurs. </para>
          <para>Si un argument est une matrice de référence, seuls les nombres dans cette matrice ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans la matrice ou la référence sont ignorés.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texte - texte entre guillemets, une formule qui renvoie du texte ou une référence à une cellule contenant le texte à mettre partiellement en majuscules.</param>
        <summary>Met en majuscules la première lettre d'une chaîne de texte et les autres lettres du texte qui suivent un caractère autre qu'une lettre. Convertit toutes les autres lettres en minuscules.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Taux - taux d'intérêt par période. Par exemple, si vous obtenez un prêt automobile avec un taux d'intérêt annuel de 10 % et que vous effectuez des paiements mensuels, le taux d'intérêt par mois est de 10 %/12, soit 0,83 %. Vous entrez 10 %/12 0,83 % ou 0,0083 dans la formule pour le taux.</param>
        <param name="Arg2">Npm - nombre total de périodes de paiement dans une annuité. Par exemple, si vous obtenez un prêt automobile sur quatre ans et que vous effectuez des paiements mensuels, le preêt comporte 4*12 (soit 48) périodes. Vous entrez 48 dans la formule pour le nombre de paiements.</param>
        <param name="Arg3">Pmt - paiement effectué chaque période. Il ne peut pas changer pendant toute la durée de l'annuité. Par exemple, les paiements mensuels d'un prêt automobile de 10 000 dollars sur quatre ans, avec un taux de 12 % correspondent à 263,33 dollars. Vous entrez -263,33 dans la formule pour le paiement. En général, l'argument pmt inclut le capital et les intérêts mais aucun autre frais ou aucune autre taxe.Si l'argument pmt est omis, vous devez inclure l'argument fv.</param>
        <param name="Arg4">Fv - valeur future ou solde de caisse à atteindre une fois le dernier paiement effectué. Si la valeur future est omise, elle est considérée par défaut à 0 (la valeur future d'un prêt, par exemple, est de 0). Par exemple, si vous souhaitez économiser 50 000 dollars pour un projet spécial dans 18 ans, 50 000 dollars constitue la valeur future. Vous pouvez effectuer une estimation de la somme à conserver avec un taux d'intérêt et déterminer combien vous devez économiser tous les mois. Si fv est omise, vous devez inclure l'argument pmt.</param>
        <param name="Arg5">Type - numéro 0 ou 1. Indique l'échéance des paiements.</param>
        <summary>Renvoie la valeur actuelle d'un investissement. La valeur actuelle est le montant total correspondant à la valeur d'une série de paiements futurs. Par exemple, lorsque vous empruntez de l'argent, le montant du prêt est la valeur actuelle payée au prêteur.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>À la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Au début de la période</description>
            </item>
          </list>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer rate et nper. Si vous effectuez des paiements mensuels dans le cadre d'un prêt sur 4 ans à un taux d'intérêt annuel de 12 %, utilisez la valeur 12 %/12 pour rate et la valeur 4*12 pour nper. Si vous effectuez des paiements annuels dans le cadre du même prêt, utilisez la valeur 12 % pour le taux et la valeur 4 pour nper. </para>
          <para>Les fonctions suivantes s’appliquent aux annuités : </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>VA</description>
            </item>
            <item>
              <term>VC</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>Une annuité est une série de versements de trésorerie constants effectués sur une période continue. For example, a car loan or a mortgage is an annuity. For more information, see the description for each annuity function. </para>
          <para>Dans les fonctions d'annuités, l'argent qui sort, comme les dépôts sur des comptes d'épargne, est représentée par un nombre négatif. L'argent reçu comme un chèque de dividende, est représentée par un nombre positif. Par exemple, un dépôt de 1 000 dollars à la banque est représenté par l'argument -1000 si vous êtes le dépositaire et par l'argument 1000 si vous êtes la banque. </para>
          <para>Microsoft Excel résoud un argument financier exprimé dansles autres arguments. Si le taux n’est pas 0, alors : </para>
          <para>Figure 1 : Équation lorsque le taux n’est pas de 0</para>
          <para> </para>
          <para> </para>
          <para>Si le taux est 0, alors :</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - tableau ou plage de cellules contenant des valeurs numériques pour lesquelles vous souhaitez obtenir la valeur du quartile.</param>
        <param name="Arg2">Quart - indique la valeur à renvoyer.</param>
        <summary>Renvoie le quartile d’un ensemble de données. Les quartiles sont souvent utilisés pour les données de ventes et d’études afin de répartir les populations en groupes. Par exemple, vous pouvez utiliser <b>quartile</b> pour rechercher les 25 pour cent de revenus les plus élevés d’une population.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> fonctions.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Valeur minimale</description>
            </item>
            <item>
              <term>1</term>
              <description>Premier quartile (25e centile)</description>
            </item>
            <item>
              <term>2</term>
              <description>Valeur médiane (50e centile)</description>
            </item>
            <item>
              <term>3</term>
              <description>Troisième quartile (75e centile)</description>
            </item>
            <item>
              <term>4 </term>
              <description>Valeur maximale</description>
            </item>
          </list>
          <para>Si le tableau est vide, <b>quartile</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le quartile n’est pas un entier, il est tronqué.</para>
          <para>Si le quart &lt; 0 ou le quart &gt; 4, <b>quartile</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, et renvoyer la même valeur que le Quartile lorsque le quartile est égal à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (zéro), 2 et 4, respectivement. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Tableau : tableau ou plage de cellules de valeurs numériques pour lesquelles vous souhaitez obtenir la valeur de quartile.</param>
        <param name="Arg2">Quart : valeur à renvoyer.</param>
        <summary>Renvoie le quartile de l’ensemble de données d’après des valeurs de centile comprises entre 0 et 1, exclus.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>Quartile_Exc</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le quartile n’est pas un entier, il est tronqué.</para>
          <para>Si le quart ≤ 0 ou s’il ≥ 4, <b>Quartile_Exc</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, et renvoyer la même valeur que Quartile_Exc lorsque le quart est égal à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (zéro), 2 et 4, respectivement. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - tableau ou plage de cellules contenant des valeurs numériques pour lesquelles vous souhaitez obtenir la valeur du quartile.</param>
        <param name="Arg2">Quart : valeur à renvoyer.</param>
        <summary>Renvoie le quartile d’un ensemble de données d’après des valeurs de centile comprises entre 0 et 1, inclus. Les quartiles sont souvent utilisés pour les données de ventes et d’études afin de répartir les populations en groupes. Par exemple, vous pouvez utiliser la fonction QUARTILE_INC pour trouver les premiers 25 % de revenus d’une population.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>Quartile_Inc</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le quartile n’est pas un entier, il est tronqué.</para>
          <para>Si le quart &lt; 0 ou le quart &gt; 4, <b>Quartile_Inc</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, et renvoyer la même valeur que Quartile_Inc lorsque le quart est égal à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 0 (zéro), 2 et 4, respectivement. <b></b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numerator - dividende.</param>
        <param name="Arg2">Denominator - diviseur.</param>
        <summary>Renvoie la partie d'entier d'une division. Utilisez cette fonction lorsque vous souhaitez supprimer le reste d'une division.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si l’un des arguments n’est pas unnumérique, <b>Quotient</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle - angle, exprimé en degrés, à convertir.</param>
        <summary>Convertit des degrés en radians.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bottom - entier le plus petit renvoyé par la fonction RANDBETWEEN.</param>
        <param name="Arg2">Top - entier le plus grand renvoyé par la fonction RANDBETWEEN.</param>
        <summary>Renvoie un nombre entier aléatoire compris les nombres indiqués. Un nouveau nombre entier aléatoire est renvoyé chaque fois qu'une feuille de calcul est calculée.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - nombre dont vous souhaitez trouver le rang.</param>
        <param name="Arg2">Ref - tableau contenant une liste de nombres, ou référence à cette liste. Les valeurs non numériques de l'argument ref ne sont pas prises en compte.</param>
        <param name="Arg3">Order - nombre spécifiant le mode de classement du nombre.</param>
        <summary>Renvoie le rang d'un nombre dans une liste de nombres. Le rang d'un nombre correspond à sa taille par rapport aux autres valeurs d'une liste (si vous deviez trier la liste, le rang des nombres correspondrait à leur position).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> fonctions.</para>
          <para>Si l'ordre prend la valeur 0 (zéro) ou est omis, Microsoft Excel classe le nombre comme si l'argument ref était une liste triée par ordre décroissant.</para>
          <para>Si l'ordre prend une autre valeur, Microsoft Excel classe le nombre comme si l'argument ref était une liste triée par ordre croissant.</para>
          <para>
            <b>Le classement</b> donne le même rang aux nombres en double. Cependant, la présence de nombres en double affecte les rangs des nombres suivants. Par exemple, dans une liste d'entiers triés par ordre croissant, si le nombre 10 apparaît deux fois avec le rang 5, le nombre 11 est situé au rang 7 (aucun numéro n'a le rang 6).</para>
          <para>Vous pouvez décider d’utiliser une définition de rang qui tienne compte des attaches. Dans l’exemple précédent, un utilisateur souhaite utiliser un rang révisé de 5,5 pour le nombre 10. Pour ce faire, vous pouvez ajouter le facteur de correction suivant à la valeur renvoyée par <b>Rank</b>. Ce facteur de correction est approprié dans les deux cas où le rang est calculé dans l’ordre décroissant (ordre = 0 ou omis) ou l’ordre croissant (ordre = valeur différente de zéro).</para>
          <para>Facteur de correction pour les classements liés=[COUNT(ref) + 1 – RANK(number, ref, 0) – RANK(number, ref, 1)]/2.</para>
          <para>Dans l’exemple suivant, RANK(A2,A1:A5,1) est égal à 3. Le facteur de correction est (5 + 1 – 2 – 3)/2 = 0,5 et le rang révisé qui prend les liens en compte est 3 + 0,5 = 3,5. Si le nombre ne se produit qu’une seule <b></b> fois en référence, le facteur de correction est égal à 0, car le rang n’a pas besoin d’être ajusté pour une égalité.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre : nombre dont vous souhaitez connaître le rang.</param>
        <param name="Arg2">Référence : matrice ou référence à une liste de nombres. Les valeurs non numériques sont ignorées dans la référence.</param>
        <param name="Arg3">Ordre : nombre qui spécifie comment classer le numéro. Si l’ordre prend la valeur 0 (zéro) ou est omis, Microsoft Excel classe le nombre comme si la référence était une liste triée par ordre décroissant. Si l’ordre prend une valeur autre que 0, Microsoft Excel classe le nombre comme si la référence était une liste triée par ordre croissant.</param>
        <summary>Renvoie le rang d’un nombre dans une liste de nombres , autrement dit, sa taille par rapport aux autres valeurs de la liste. Si deux valeurs, ou plus, possèdent le même rang, le rang moyen est renvoyé.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre : nombre dont vous souhaitez connaître le rang.</param>
        <param name="Arg2">Référence : matrice ou référence à une liste de nombres. Les valeurs non numériques sont ignorées dans la référence.</param>
        <param name="Arg3">Ordre : nombre spécifiant le mode de classement du nombre.</param>
        <summary>Renvoie le rang d'un nombre dans une liste de nombres. Le rang d'un nombre correspond à sa taille par rapport aux autres valeurs d'une liste (si vous deviez trier la liste, le rang des nombres correspondrait à leur position).</summary>
        <returns>To be added.</returns>
        <remarks><para>Si l’ordre prend la valeur 0 (zéro) ou est omis, Microsoft Excel classe le nombre comme si la référence était une liste triée par ordre décroissant.</para>
          <para>Si l’ordre prend une valeur autre que 0, Microsoft Excel classe le nombre comme si la référence était une liste triée par ordre croissant.</para>
          <para>
            <b>Rank_Eq</b> donne le même rang aux nombres en double. Cependant, la présence de nombres en double affecte les rangs des nombres suivants. Par exemple, dans une liste d'entiers triés par ordre croissant, si le nombre 10 apparaît deux fois avec le rang 5, le nombre 11 est situé au rang 7 (aucun numéro n'a le rang 6).</para>
          <para>Pour certaines raisons, vous souhaiterez utiliser une définition d’un rang qui prend les liens en compte. Dans l’exemple précédent, vous souhaitez utiliser un rang révisé de 5,5 pour le numéro 10. Pour ce faire, ajoutez le facteur de correction suivant à la valeur renvoyée <b>par Rank_Eq</b>. Ce facteur de correction est approprié dans les deux cas où le rang est calculé dans l’ordre décroissant (ordre = 0 ou omis) ou l’ordre croissant (ordre = valeur différente de zéro).</para>
          <para>Facteur de correction pour les classements liés=[COUNT(ref) + 1 – RANK_EQ(number, ref, 0) – RANK_EQ(number, ref, 1)]/2.Dans l’exemple suivant, RANK_EQ(A2,A1:A5,1) est égal à 3. Le facteur de correction est (5 + 1 – 2 – 3)/2 = 0,5 et le rang révisé qui prend les liens en compte est 3 + 0,5 = 3,5. Si le nombre ne se produit qu’une seule <b></b> fois en référence, le facteur de correction est égal à 0, car Rank_Eq ne doit pas être ajusté pour une égalité.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Npm - nombre total de périodes de paiement dans une annuité.</param>
        <param name="Arg2">Pmt - paiement effectué chaque période. Il ne peut pas changer pendant toute la durée de l'annuité. En général, l'argument pmt inclut le capital et les intérêts mais aucun autre frais ou aucune autre taxe.Si l'argument pmt est omis, vous devez inclure l'argument fv.</param>
        <param name="Arg3">Pv - valeur actuelle ou valeur totale correspondant à la valeur actuelle d'une série de paiements futurs.</param>
        <param name="Arg4">Fv - valeur future ou solde de caisse à atteindre une fois le dernier paiement effectué. Si la valeur future est omise, elle est considérée par défaut à 0 (la valeur future d'un prêt, par exemple, est de 0).</param>
        <param name="Arg5">Type - numéro 0 ou 1. Indique l'échéance des paiements.</param>
        <param name="Arg6">Guess - votre estimation de ce que sera le taux.</param>
        <summary>Renvoie le taux d'intérêt par période d'une annuité. La fonction RATE est calculée par itération et peut comporter zéro solution ou davantage. Si les résultats successifs de la fonction RATE ne convergent pas selon une marge de 0,0000001 après 20 itérations, la fonction RATE renvoie la valeur d'erreur #NUM!.</summary>
        <returns>To be added.</returns>
        <remarks><para>Pour obtenir une description complète des arguments nper, pmt, pv, fv et type, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>À la fin de la période</description>
            </item>
            <item>
              <term>1</term>
              <description>Au début de la période</description>
            </item>
          </list>
          <para>Si l'estimation est omise, elle est considérée comme étant égale à 10 %.</para>
          <para>Si <b>Rate ne</b> converge pas, essayez différentes valeurs pour l’estimation. <b>Le taux</b> converge généralement si l’estimation est entre 0 et 1.</para>
          <para>Assurez-vous que vous êtes cohérent au sujet des unités utilisées pour indiquer l'estimation et l'argument nper. Si vous effectuez des paiements mensuels dans le cadre d'un prêt sur 4 ans à un taux d'intérêt annuel de 12 %, utilisez la valeur 12%/12 pour l'estimation et la valeur 4*12 pour l'argument nper. Si vous effectuez des paiements annuels dans le cadre du même prêt, utilisez la valeur 12% pour l'estimation et la valeur 4 pour nper.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Investissement - montant investi dans le titre.</param>
        <param name="Arg4">Escompte - date d'escompte du titre.</param>
        <param name="Arg5">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le montant reçu lorsqu'un titre totalement investi arrive à échéance.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>Received</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si l'≤ est de 0 ou si la remise ≤ 0, <b>Received</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>Received</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, Received renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. <b>La réception</b> est calculée comme suit : </para>
          <para>Figure 1 : Équation de la méthode Received</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>B = nombre de jours dans une année, en fonction de l’année.</para>
          <para>DIM = nombre de jours entre l’émission et l’échéance.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Texte dans lequel vous souhaitez remplacer certains caractères.</param>
        <param name="Arg2">Position du caractère à remplacer par <paramref name="Arg1" /> <paramref name="Arg4" /> .</param>
        <param name="Arg3">Nombre de caractères que <paramref name="Arg1" /> vous souhaitez remplacer <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> par la <paramref name="Arg4" /> méthode.</param>
        <param name="Arg4">Texte qui remplacera les caractères dans <paramref name="Arg1" /> .</param>
        <summary>Cette méthode remplace une partie de chaîne de texte, selon le nombre de caractères que vous spécifiez, par une chaîne de texte différente.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Old_text - texte dans lequel vous souhaitez remplacer certains caractères.</param>
        <param name="Arg2">Start_num - position du caractère dans old_text que vous souhaitez remplacer par new_text.</param>
        <param name="Arg3">Num_chars - nombre de caractères dans old_text que vous souhaitez que la fonction REPLACE remplace par new_text.</param>
        <param name="Arg4">New_text - texte qui remplace des caractères dans old_text.</param>
        <summary>La fonction REPLACEB remplace une partie de la chaîne de texte, en fonction du nombre d'octets spécifié, par une autre chaîne de texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: est destiné à être utilisé avec des langues qui utilisent le jeu de caractères sur un seul sur deux caractères (SBCS), tandis que ReplaceB est destiné à être utilisé avec les langues qui utilisent le jeu de caractères sur deux <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> caractères <b></b> (DBCS). Le paramètre de langue par défaut de l'ordinateur affecte la valeur renvoyée de la manière suivante :</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> compte toujours chaque caractère, qu’il s’agit d’un seul caractère ou d’un sur deux caractères, comme 1, quel que soit le paramètre de langue par défaut. </para>
          <para>
            <b>ReplaceB</b> compte chaque caractère sur deux caractères sur deux caractères comme 2 lorsque vous avez activé la modification d’une langue qui prend en charge DBCS, puis que vous l’avez définie comme langue par défaut. Dans le cas <b>contraire, ReplaceB</b> compte chaque caractère comme 1. </para>
          <para>Les langues qui prennent en charge les caractères codés sur deux octets sont le japonais, le chinois (simplifié), le chinois (traditionnel) et le coréen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - texte à répéter.</param>
        <param name="Arg2">Number_times - nombre positif spécifiant le nombre de fois que le texte doit être répété.</param>
        <summary>Répète le texte un certain nombre de fois. Utilisez la fonction REPT pour remplir une cellule avec un nombre d'instances d'une chaîne de texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si number_times est 0 (zéro), <b>Rept</b> renvoie « » (texte vide). </para>
          <para>Si number_times n'est pas un entier, la valeur est tronquée.</para>
          <para>Le résultat de la <b>fonction Rept</b> ne peut pas être supérieur à 32 767 caractères, ou <b>Rept</b> renvoie #VALUE!. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - numéral arabe à convertir.</param>
        <param name="Arg2">Form - nombre spécifiant le type de numéral roman souhaité. Le style de numéral roman peut être de classique à simplifié, en devenant plus concis à mesure que la valeur augmente.</param>
        <summary>Convertit un chiffre arabe en chiffres romains, en tant que texte.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Classique.</description>
            </item>
            <item>
              <term>1</term>
              <description>Plus concis.</description>
            </item>
            <item>
              <term>2</term>
              <description>Plus concis.</description>
            </item>
            <item>
              <term>3</term>
              <description>Plus concis.</description>
            </item>
            <item>
              <term>4 </term>
              <description>Simplifié.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Classique.</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>Simplifié.</description>
            </item>
          </list>
          <para>Si le nombre est négatif, la valeur d'erreur #VALUE! est renvoyée.</para>
          <para>Si le nombre est supérieur à 3 999, la valeur d'erreur #VALUE! est renvoyée.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - le nombre à arrondir.</param>
        <param name="Arg2">Num_digits - indique le nombre de chiffres auquel vous souhaitez arrondir le nombre.</param>
        <summary>Arrondit un nombre à un nombre de chiffres spécifié.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si num_digits est supérieur à 0 (zéro), le nombre est arrondi au nombre de positions décimales spécifié. </para>
          <para>Si num_digits prend la valeur 0, le nombre est arrondi à l'entier le plus proche. </para>
          <para>Si num_digits est inférieur à 0, le nombre est arrondi à la valeur située à gauche du séparateur décimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - tout nombre réel à arrondir à la valeur inférieure.</param>
        <param name="Arg2">Num_digits - nombre de chiffres auquel vous souhaitez arrondir le nombre.</param>
        <summary>Arrondit un nombre à la valeur d'arrondi la plus proche de zéro.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b> se comporte comme <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , sauf qu’il arrondit toujours un nombre vers le bas. </para>
          <para>Si num_digits est supérieur à 0 (zéro), le nombre est arrondi au nombre inférieur de positions décimales spécifié.</para>
          <para>Si num_digits prend la valeur 0, le nombre est arrondi à l'entier inférieur le plus proche.</para>
          <para>Si num_digits est inférieur à 0, le nombre est arrondi à la valeur inférieure située à gauche du séparateur décimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - tout nombre réel à arrondir à la valeur supérieure.</param>
        <param name="Arg2">Num_digits - nombre de chiffres auquel vous souhaitez arrondir le nombre.</param>
        <summary>Arrondit à un nombre à la valeur supérieur la plus éloignée de 0 (zéro).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b> se comporte comme <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , sauf qu’il arrondit toujours un nombre à un nombre. </para>
          <para>Si num_digits est supérieur à 0 (zéro), le nombre est arrondi au nombre supérieur de positions décimales spécifié.</para>
          <para>Si num_digits prend la valeur 0, le nombre est arrondi à l'entier supérieur le plus proche.</para>
          <para>Si num_digits est inférieur à 0, le nombre est arrondi à la valeur supérieure située à gauche du séparateur décimal.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre de périodes pour l’investissement.</param>
        <param name="Arg2">Valeur actuelle de l’investissement.</param>
        <param name="Arg3">Valeur future de l’investissement.</param>
        <summary>Renvoie un taux d’intérêt équivalent pour la croissance d’un investissement.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - tableau ou plage de points de données.</param>
        <param name="Arg2">Known_x's - tableau ou plage de points de données.</param>
        <summary>Renvoie le carré du coefficient de corrélation de moment du produit de Pearson par le biais des points de données dans les tableaux known_y's et known_x's. Pour plus d'informations, reportez-vous à l'article <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. La valeur au carré r peut être interprétée comme la proportion de l'écart de Y attribuable à l'écart de X.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si known_y’known_x sont vides ou ont un nombre différent de points de données, <b>RSq</b> renvoie la valeur d’erreur #N/A. </para>
          <para>Si known_y’known_x contiennent qu’un seul point de données, <b>RSq</b> renvoie la #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation du coefficient de corrélation de l’instant produit de Pearson, r, est la suivante : </para>
          <para>Figure 1 : Coefficient de corrélation d’instants de produit pearson</para>
          <para> </para>
          <para> </para>
          <para>où x et y sont les moyennes d’exemple AVERAGE(known_x’s) et AVERAGE(known_y').</para>
          <para>
            <b>RSq renvoie</b> r2, qui est le carré de ce coefficient de corrélation.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Chaîne représentant l'identificateur de programmation du serveur en temps réel.</param>
        <param name="server">nom du serveur, <b>chaîne Null</b> ou <b>constante vbNullString.</b></param>
        <param name="topic1"><paramref name="topic1" /> – <paramref name="topic28" /> Chaîne <b>représentant</b> une rubrique.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Cette méthode établit une connexion à une source pour recevoir des données en temps réel.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - texte à rechercher.</param>
        <param name="Arg2">Within_text - texte dans lequel vous souhaitez utiliser la fonction find_text.</param>
        <param name="Arg3">Start_num - numéro du caractère de within_text auquel vous souhaitez commencer la recherche.</param>
        <summary><b>Recherchez</b> et recherchez une chaîne de texte dans une deuxième chaîne de texte, puis renvoyez le numéro de la position de départ de la première chaîne de texte à partir du premier caractère de la deuxième chaîne <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> de texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b> <b>:</b> la recherche est conçue pour une utilisation avec des langues qui utilisent le jeu de caractères sur un seul sur deux caractères (SBCS), tandis qu’elle est destinée aux langues qui utilisent le jeu de caractères sur deux <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> caractères (DBCS). Le paramètre de langue par défaut sur votre ordinateur<b></b> affecte la valeur de retour de la manière suivante : la recherche compte toujours chaque caractère, qu’il s’agit d’un seul sur deux ou deux caractères, sur 1, quel que soit le paramètre de langue par défaut. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> compte chaque caractère sur deux sur deux caractères comme 2 lorsque vous avez activé la modification d’une langue qui prend en charge DBCS, puis que vous l’avez définie comme langue par défaut. Dans le <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> cas contraire, compte chaque caractère comme 1.</para>
          <para>Les langues qui prennent en charge les caractères codés sur deux octets sont le japonais, le chinois (simplifié), le chinois (traditionnel) et le coréen.</para>
          <para>Utilisez <b>la</b> recherche et pour déterminer l’emplacement d’un caractère ou d’une chaîne de texte dans une autre chaîne de texte afin de pouvoir utiliser les fonctions MID et MIDB ou et les fonctions pour modifier <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> le <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> texte. </para>
          <para>
            <b>Recherche et</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> ne sont pas sensibles à la cas. Si vous souhaitez effectuer une recherche sensible à la cas, vous pouvez utiliser <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> et <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>Vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans find_text. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para>Si find_text est introuvable, la valeur d'erreur #VALUE! est renvoyée.</para>
          <para>Si start_num est omis, sa valeur est considérée comme étant 1.</para>
          <para>Si start_num n'est pas supérieur à 0 (zéro) ou est supérieur à la longueur de within_text, la valeur d'erreur #VALUE! est renvoyée.</para>
          <para>Utilisez start_num pour ignorer un certain nombre de caractères. À <b>l’aide</b> de La recherche comme exemple, supposons que vous travaillez avec la chaîne de texte « AYF0093. YoungMensApparel « . Pour trouver le nombre du premier « Y » dans la partie descriptive de la chaîne de texte, définissez start_num sur 8 afin que la partie du numéro de série du texte ne fasse pas l'objet de la recherche. <b>La</b> recherche commence par le caractère 8, find_text au caractère suivant et renvoie le numéro 9. <b>La</b> recherche renvoie toujours le nombre de caractères à partir du début de within_text, en comptant les caractères que vous ignorez si start_num est supérieur à 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Find_text - texte à rechercher.</param>
        <param name="Arg2">Within_text - texte dans lequel vous souhaitez utiliser la fonction find_text.</param>
        <param name="Arg3">Start_num - numéro du caractère de within_text auquel vous souhaitez commencer la recherche.</param>
        <summary>Les fonctions SEARCH et SEARCHB recherchent une chaîne de texte dans une seconde chaîne de texte, et renvoient le numéro de la position de départ de la première chaîne de texte à partir du premier caractère de la seconde chaîne de texte.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b> <b>:</b> la recherche est conçue pour une utilisation avec des langues qui utilisent le jeu de caractères sur un seul sur deux caractères (SBCS), tandis qu’elle est destinée aux langues qui utilisent le jeu de caractères sur deux <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> caractères (DBCS). Le paramètre de langue par défaut sur votre ordinateur<b></b> affecte la valeur de retour de la manière suivante : la recherche compte toujours chaque caractère, qu’il s’agit d’un seul sur deux ou deux caractères, sur 1, quel que soit le paramètre de langue par défaut. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> compte chaque caractère sur deux sur deux caractères comme 2 lorsque vous avez activé la modification d’une langue qui prend en charge DBCS, puis que vous l’avez définie comme langue par défaut. Dans le <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> cas contraire, compte chaque caractère comme 1.</para>
          <para>Les langues qui prennent en charge les caractères codés sur deux octets sont le japonais, le chinois (simplifié), le chinois (traditionnel) et le coréen.</para>
          <para>Utilisez <b>la</b> recherche et pour déterminer l’emplacement d’un caractère ou d’une chaîne de texte dans une autre chaîne de texte afin de pouvoir utiliser les fonctions MID et MIDB ou et les fonctions pour modifier <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> le <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> texte. </para>
          <para>
            <b>Recherche et</b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> ne sont pas sensibles à la cas. Si vous souhaitez effectuer une recherche sensible à la cas, vous pouvez utiliser <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> et <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> . </para>
          <para>Vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans find_text. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para>Si find_text est introuvable, la valeur d'erreur #VALUE! est renvoyée.</para>
          <para>Si start_num est omis, sa valeur est considérée comme étant 1.</para>
          <para>Si start_num n'est pas supérieur à 0 (zéro) ou est supérieur à la longueur de within_text, la valeur d'erreur #VALUE! est renvoyée.</para>
          <para>Utilisez start_num pour ignorer un certain nombre de caractères. À <b>l’aide</b> de La recherche comme exemple, supposons que vous travaillez avec la chaîne de texte « AYF0093. YoungMensApparel « . Pour trouver le nombre du premier « Y » dans la partie descriptive de la chaîne de texte, définissez start_num sur 8 afin que la partie du numéro de série du texte ne fasse pas l'objet de la recherche. <b>La</b> recherche commence par le caractère 8, find_text au caractère suivant et renvoie le numéro 9. <b>La</b> recherche renvoie toujours le nombre de caractères à partir du début de within_text, en comptant les caractères que vous ignorez si start_num est supérieur à 1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle en radians pour lequel vous souhaitez obtenir la sécante.</param>
        <summary>Renvoie la sécante d’un angle.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Angle en radians pour lequel vous souhaitez obtenir la sécante hyperbolique.</param>
        <summary>Renvoie la sécante hyperbolique d’un angle.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - valeur d'entrée dans la série de puissance.</param>
        <param name="Arg2">N - puissance initiale à laquelle vous souhaitez élever x.</param>
        <param name="Arg3">M - étape selon laquelle n est augmenté pour chaque terme de la série.</param>
        <param name="Arg4">Coefficients - ensemble de coefficients par lesquels chaque puissance consécutive de x est multipliée. Le nombre de valeurs dans les coefficients détermine le nombre de termes dans la série de puissances. Par exemple, s'il y a trois valeurs dans les coefficients, il y a trois termes dans la série de puissances.</param>
        <summary>Renvoie la somme d’une série de puissances basée sur la formule : SERIES(x,n,m,a)= a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas unnumérique, <b>SeriesSum</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">L'argument Number correspond à n'importe quel nombre.</param>
        <summary>Renvoie le sinus hyperbolique d'un nombre.</summary>
        <returns>To be added.</returns>
        <remarks><para>La formule pour le sinus hyperbolique est la suivante :</para>
          <para>Figure 1 : Formule du sinus hyperbolique</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments pour lesquels vous voulez calculer la dissymétrie. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie la dissymétrie d'une distribution. La dissymétrie caractérise le degré d'asymétrie d'une distribution autour de sa moyenne. Une dissymétrie positive indique une distribution avec un point asymétrique qui tend vers des valeurs plus positives. Une dissymétrie négative indique une distribution avec un point asymétrique qui tend vers des valeurs plus négatives.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>S’il y a moins de trois points de données ou si l’écart type de l’échantillon est zéro, <b>Skew</b> renvoie la valeur #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L'équation pour la dissymétrie est définie de la manière suivante : 

 </para>
          <para>Figure 1 : Équation de l’inclinaison</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg2">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg3">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg4">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg5">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg6">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg7">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg8">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg9">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg10">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg11">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg12">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg13">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg14">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg15">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg16">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg17">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg18">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg19">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg20">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg21">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg22">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg23">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg24">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg25">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg26">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg27">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg28">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg29">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <param name="Arg30">1 à 254 nombres ou noms, tableaux ou références contenant des nombres pour lesquels vous souhaitez obtenir l’inclinaison de la population.</param>
        <summary>Renvoie la dissymétrie d’une distribution basée sur une population : une étude du degré d’asymétrie d’une distribution autour de sa moyenne.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coût - coût initial de l'immobilisation.</param>
        <param name="Arg2">Récupération - valeur à la fin de l'amortissement (parfois appelée valeur de récupération de l'immobilisation).</param>
        <param name="Arg3">Durée de vie - nombre de périodes d'amortissement de l'immobilisation (parfois appelée durée de vie utile de l'immobilisation).</param>
        <summary>Renvoie l'amortissement linéaire d'une immobilisation pour une période.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - tableau ou plage de cellules de points de données numériques dépendants.</param>
        <param name="Arg2">Known_x's - ensemble de points de données indépendants.</param>
        <summary>Renvoie la pente de l'amortissement linéaire par le biais des points de données dans les tableaux known_y's et known_x's. La pente est la distance verticale divisée par la distance horizontale entre deux points d'une droite, correspondant au taux de change le long de la droite de régression.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des matrices ou des références contenant des nombres.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Si known_y’known_x sont vides ou ont un nombre différent de points de données, <b>Slope</b> renvoie la valeur d’erreur #N/A. </para>
          <para>L’équation de la pente de la ligne de régression est la suivante : </para>
          <para>Figure 1 : Équation de la pente de la ligne de régression</para>
          <para> </para>
          <para> </para>
          <para>L’algorithme sous-jacent utilisé dans <b>la pente</b> et les fonctions est différent de l’algorithme <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> sous-jacent utilisé dans la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> fonction. La différence entre ces algorithmes peut conduire à des résultats différents lorsque les données ne sont pas déterminées et qu'elles sont colinéaires. Par exemple, si les points de données de l'argument y_connus prennent la valeur 0 et que ceux de l'argument y_connus prennent la valeur 1 : </para>
          <list type="bullet">
            <item>
              <description>
                <b>Slope</b> and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> return a #DIV/0! erreur. La <b>pente et</b> l’algorithme sont conçus pour rechercher une seule réponse, et dans ce cas, il peut y avoir plusieurs <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> réponses. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> renvoie la valeur 0. L’algorithme est conçu pour renvoyer des résultats raisonnables pour les données colinéaires, et dans ce cas, au moins une réponse <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> est trouvée.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - tableau ou plage de données numériques pour lequel vous souhaitez déterminer la plus petite valeur k-th.</param>
        <param name="Arg2">K - position (en partant de la plus petite position) dans le tableau ou la plage de données à renvoyer.</param>
        <summary>Renvoie la plus petite valeur k-th dans un ensemble de données. Utilisez cette fonction pour renvoyer des valeurs avec une relative particulière située dans un ensemble de données.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>Small</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si k ≤ 0 ou si k dépasse le nombre de points de données, <b>Small</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si n est le nombre de points de données dans le tableau, la fonction SMALL(array,1) est égale à la plus petite valeur, et la fonction SMALL(array,n) à la plus grande valeur.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - nombre par lequel pi est multiplié.</param>
        <summary>Renvoie la racine carrée de (nombre * pi).</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le &lt; nombre est 0, <b>SqrtPi</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - valeur à normaliser.</param>
        <param name="Arg2">Moyenne - moyenne arithmétique de la distribution.</param>
        <param name="Arg3">Écart_type - écart-type de la distribution.</param>
        <summary>Renvoie une valeur normalisée d'une distribution caractérisée par les arguments mean et standard_dev.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si standard_dev ≤ 0, <b>standardize</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L'équation pour la valeur normalisée est la suivante : 

 </para>
          <para>Figure 1 : Équation de la valeur normalisée</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments number correspondant à un échantillon d'une population. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Fournit une estimation de l'écart-type en fonction d'un échantillon. L'écart-type est une mesure de la dispersion des valeurs à partir de la valeur moyenne (la moyenne).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> méthode.</para>
          <para>
            <b>StDev</b> suppose que ses arguments sont un échantillon de la population. Si vos données représentent la population entière, calculez l’écart-type à l’aide de <b>StDev</b>. </para>
          <para>L'écart-type est calculé à l'aide de la méthode « non biaisée » ou « n-1 ».</para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>
            <b>StDev utilise</b> la formule suivante : </para>
          <para>Figure 1 : Équation de la méthode StDev</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne de l’échantillon AVERAGE(number1,number2,...) et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2, ... : 1 à 30 arguments nombre correspondant à une population. Vous pouvez également utiliser une seule matrice ou une référence à une matrice au lieu d’arguments séparés par des virgules (,).</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Fournit un calcul de l’écart-type en fonction de la population entière déterminée sous forme d’arguments. L’écart-type est une mesure de la dispersion des valeurs à partir de la valeur moyenne (la moyenne).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b> suppose que ses arguments sont la population entière. Si vos données représentent un échantillon de la population, calculez l’écart-type à l’aide <b>StDev_P</b>. </para>
          <para>Pour les échantillons de grande taille et <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>StDev_P</b> renvoyer des valeurs à peu près égales. </para>
          <para>L’écart-type est calculé à l’aide de la méthode « biaisée » ou « n-1 ».</para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous entrez directement dans la liste d’arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>
            <b>StDev_P</b> utilise la formule suivante : </para>
          <para>Figure 1 : Équation de la méthode StDev_P de données</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne de l’échantillon AVERAGE(number1,number2,...) et n la taille de l’échantillon. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments number correspondant à un échantillon d'une population. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Fournit une estimation de l'écart-type en fonction d'un échantillon. L'écart-type est une mesure de la dispersion des valeurs à partir de la valeur moyenne (la moyenne).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b> suppose que ses arguments sont un échantillon de la population. Si vos données représentent la population entière, calculez l’écart-type à l’aide <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> de . </para>
          <para>L'écart-type est calculé à l'aide de la méthode « non biaisée » ou « n-1 ».</para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>
            <b>StDev_S</b> utilise la formule suivante : </para>
          <para>Figure 1 : Équation de la méthode StDev_S de données</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne de l’échantillon AVERAGE(number1,number2,...) et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments number correspondant à un échantillon d'une population. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Fournit un calcul de l’écart-type en fonction de la population entière déterminée sous forme d’arguments. L’écart-type est une mesure de la dispersion des valeurs à partir de la valeur moyenne (la moyenne).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> méthode.</para>
          <para>
            <b>StDevP</b> suppose que ses arguments sont la population entière. Si vos données représentent un échantillon de la population, calculez l’écart-type à l’aide <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> de . </para>
          <para>Pour les échantillons de grande taille, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>et StDevP</b> retourne des valeurs à peu près égales. </para>
          <para>L’écart-type est calculé à l’aide de la méthode « biaisée » ou « n-1 ». Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres. </para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous entrez directement dans la liste d’arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs. <b>StDevP</b> utilise la formule suivante : </para>
          <para>Figure 1 : Équation de la méthode StDevP</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Known_y's - tableau ou plage de points de données dépendants.</param>
        <param name="Arg2">Known_x's - tableau ou plage de points de données indépendants.</param>
        <summary>Renvoie l'erreur standard de la valeur y prévue pour chaque valeur x de la régression. L'erreur standard est une mesure du degré d'erreur dans la prévision d'une valeur y pour une valeur x individuelle.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument matriciel ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs sont ignorées ; toutefois, les cellules contenant la valeur zéro sont incluses.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>Si known_y’known_x ont un nombre de points de données différent, <b>StEyx</b> renvoie la valeur d’erreur #N/A. </para>
          <para>Si les known_y’known_x sont vides ou ont moins de trois points de données, <b>StEyx</b> renvoie la #DIV/0! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation de l’erreur standard du y prévu est la suivante : </para>
          <para>Figure 1 : Équation de l’erreur standard du y prévu</para>
          <para> </para>
          <para> </para>
          <para>où x et y sont les moyennes d’échantillon AVERAGE(known_x’s) et AVERAGE(known_y’s), et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - texte ou référence à une cellule contenant le texte dont vous souhaitez remplacer des caractères.</param>
        <param name="Arg2">Old_text - texte à remplacer.</param>
        <param name="Arg3">New_text - texte qui doit remplacer old_text.</param>
        <param name="Arg4">Instance_num - indique l'occurrence de old_text à remplacer par new_text. Si vous spécifiez instance_num, seule cette instance de old_text est remplacée. Autrement, toutes les occurrences de old_text dans le texte sont remplacées par new_text.</param>
        <summary>Remplace old_text par new_text dans une chaîne de texte. Utilisez la fonction SUBSTITUTE lorsque vous souhaitez remplacer un texte spécifique dans une chaîne de texte. Utilisez la fonction REPLACE lorsque vous souhaitez remplacer du texte qui apparaît à un emplacement spécifique dans une chaîne de texte.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre indiquant la fonction d'agrégation que doit utiliser la méthode.</param>
        <param name="Arg2">Premier <see cref="T:Microsoft.Office.Interop.Excel.Range" /> objet pour lequel un sous-totaux doit être calculé.</param>
        <param name="Arg3"><paramref name="Arg3" /> – <paramref name="Arg30" /> Objets <see cref="T:Microsoft.Office.Interop.Excel.Range" /> suivants pour lesquels un sous-totaux doit être calculé.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Cette méthode crée des sous-totaux.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments pour lesquels vous voulez connaître la valeur totale ou le total.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Ajoute tous les nombres d'une plage de cellules.</summary>
        <returns>To be added.</returns>
        <remarks><para>Nombres, valeurs logiques et représentations textuelles des nombres que vous saisissez directement dans la liste des arguments pris en compte. </para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques ou le texte dans le tableau ou la référence sont ignorés. </para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Plage - plage de cellules que vous souhaitez évaluer par critère.</param>
        <param name="Arg2">Critères : critères sous la forme d’un nombre, d’une expression ou d’un texte qui définit les cellules à ajouter. Par exemple, les critères peuvent être exprimés comme 32, « 32 », « 32 » ou « &gt; apples ».</param>
        <param name="Arg3">Sum_range - cellules réelles à ajouter si les cellules correspondantes dans la plage correspondent aux critères. Si sum_range est omis, les cellules de la plage sont évaluées par les critères et ajoutées si elles correspondent aux critères.</param>
        <summary>Ajoute les cellules spécifiées par un critère donné.</summary>
        <returns>To be added.</returns>
        <remarks><para>Sum_range - Chaque criteria_range n'a pas besoin d'avoir la même taille et la même forme que la plage. Les cellules réelles ajoutées sont déterminées à l'aide de la cellule supérieure gauche dans sum_range comme cellule de début, puis en incluant les cellules correspondant en taille et en forme que la page. Par exemple :</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans criteria. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sum_range - plage à totaliser.</param>
        <param name="Arg2">Criteria_range1, criteria_range2, ... - une ou plusieurs plages dans lesquelles évaluer les critères associés.</param>
        <param name="Arg3">Criteria1, criteria2, ... - un ou plusieurs critères sous forme de nombre, d'expression, de référence de cellule ou de texte, qui définit les cellules à ajouter. Par exemple, les critères peuvent être exprimés comme 32, « 32 », « 32 », « apples » &gt; ou B4.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Ajoute les cellules d'une plage répondant à plusieurs critères.</summary>
        <returns>To be added.</returns>
        <remarks><para>Chaque cellule dans sum_range est totalisée uniquement si tous les critères correspondants spécifiés sont vrais pour cette cellule.</para>
          <para>Les cellules dans sum_range qui <b>contiennent la valeur true</b> sont évaluées à 1 ; cellules dans sum_range qui contiennent <b>false</b> sont évaluées à 0 (zéro). </para>
          <para>Vous pouvez utiliser des caractères génériques, des points d'interrogation (?) et des astérisques (*), dans criteria. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para>Chaque criteria_range n'a pas besoin d'avoir la même taille et la même forme que sum_range. Les cellules réelles ajoutées sont déterminées à l'aide de la cellule supérieure gauche dans ce criteria_range comme cellule de début, puis en incluant les cellules correspondant en taille et en forme à sum_range. Par exemple :</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, array2, array3, ... - 2 à 30 tableaux dont vous souhaitez multiplier, puis ajouter les composants.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multiplie les composants correspondants dans les tableaux déterminés et renvoie le total de ces produits.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments de tableau doivent avoir les mêmes dimensions. Si ce n’est pas <b>le cas, SumProduct</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>SumProduct</b> traite les entrées de tableau qui ne sont pas numériques comme s’il s’agit de zéros.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number1, number2, ... - 1 à 30 arguments pour lesquels vous voulez obtenir le total des carrés. Vous pouvez également utiliser un seul tableau ou une référence à un tableau au lieu d'arguments séparés par des virgules.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Renvoie le total des carrés des arguments.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres. </para>
          <para>Nombres, valeurs logiques et représentations textuelles des nombres que vous saisissez directement dans la liste des arguments pris en compte. </para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés. </para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x - premier tableau ou première plage de valeurs.</param>
        <param name="Arg2">Array_y - second tableau ou seconde plage de valeurs.</param>
        <summary>Renvoie le total de la différence des carrés des valeurs correspondantes dans deux tableaux.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Si array_x et array_y ont un nombre différent de <b>valeurs, SumX2MY2returns</b> la valeur d#N/A. </para>
          <para>L'équation pour le total de la différence des carrés est la suivante : 

 </para>
          <para>Figure 1 : Équation de la somme de la différence de carrés</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x - premier tableau ou première plage de valeurs.</param>
        <param name="Arg2">Array_y - second tableau ou seconde plage de valeurs.</param>
        <summary>Renvoie le total du total des carrés des valeurs correspondantes dans deux tableaux. Le total du total des carrés est un terme courant dans de nombreux calculs statistiques.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Si array_x et array_y ont un nombre de valeurs différent, <b>SumX2PY2 renvoie</b> la valeur d’erreur #N/A. </para>
          <para>L'équation pour le total du total des carrés est la suivante : 

 </para>
          <para>Figure 1 : Équation de la somme de la somme des carrés</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x - premier tableau ou première plage de valeurs.</param>
        <param name="Arg2">Array_y - second tableau ou seconde plage de valeurs.</param>
        <summary>Renvoie le total des carrés des différences des valeurs correspondantes dans deux tableaux.</summary>
        <returns>To be added.</returns>
        <remarks><para>Les arguments doivent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Si un argument sous forme de tableau ou de référence contient du texte, des valeurs logiques ou des cellules vides, ces valeurs ne sont pas prises en compte. En revanche, les cellules contenant la valeur 0 sont incluses.</para>
          <para>Si array_x et array_y ont un nombre de valeurs différent, <b>SumXMY2 renvoie</b> la valeur d’erreur #N/A. </para>
          <para>L'équation pour le total des différences des carrés est la suivante : 

 </para>
          <para>Figure 1 : Équation de la somme des différences au carré</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coût - coût initial de l'immobilisation.</param>
        <param name="Arg2">Récupération - valeur à la fin de l'amortissement (parfois appelée valeur de récupération de l'immobilisation).</param>
        <param name="Arg3">Durée de vie - nombre de périodes d'amortissement de l'immobilisation (parfois appelée durée de vie utile de l'immobilisation).</param>
        <param name="Arg4">Per - période, qui doit utiliser les même unités que la durée de vie.</param>
        <summary>Renvoie l'amortissement des chiffres cumulés sur l'année d'une immobilisation pour une période spécifique.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd est</b> calculé comme suit :</para>
          <para>Figure 1 : Équation de la méthode Syd</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur numérique à laquelle évaluer la distribution.</param>
        <param name="Arg2">Deg_freedom - Nombre total qui indique le nombre de degrés de liberté.</param>
        <param name="Arg3">Cumulative : valeur logique déterminant la forme de la fonction. Si cumulative est <b>true,</b> <b>T_Dist</b> renvoie la fonction de distribution cumulative ; si <b>elle est false,</b>elle renvoie la fonction densité de probabilité.</param>
        <summary>Renvoie la probabilité d’une variable aléatoire suivant la loi T de Student, dans laquelle une valeur numérique (x) est une valeur calculée de t dont il faut calculer la probabilité.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas <b>unnumérique, T_Dist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si deg_freedom &lt; 1, <b>T_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>la T_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur numérique à laquelle évaluer la distribution.</param>
        <param name="Arg2">Deg_freedom - Nombre total qui indique le nombre de degrés de liberté.</param>
        <summary>Renvoie la probabilité associée à la loi bilatérale T de Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas <b>numérique, T_Dist_2T</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si deg_freedom &lt; 1, <b>T_Dist_2T</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>la T_Dist_2T</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur numérique à laquelle évaluer la distribution.</param>
        <param name="Arg2">Degrés_liberté : entier indiquant le nombre de degrés de liberté.</param>
        <summary>Renvoie la probabilité unilatérale à droite d’une variable aléatoire suivant une loi T de Student où une valeur numérique (x) est une valeur calculée de T pour laquelle les points de pourcentage doivent être calculés. La distribution T est utilisée dans le test des hypothèses sur des ensembles de données à échantillons réduits. Utilisez cette fonction à la place d’une table de valeurs essentielles pour la distribution T.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si un argument n’est pas <b>numérique, T_Dist_RT</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrees_freedom &lt; 1, <b>T_Dist_RT</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Les arguments degrés_liberté et uni/bilatéral sont tronqués de manière à utiliser des entiers.</para>
          <para>Si tails est une valeur autre que 1 ou 2, <b>T_Dist_RT</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>la T_Dist_RT</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si tails = 1, <b>T_Dist_RT</b> est calculé comme T_DIST_RT = P( X x ), où X est une variable aléatoire qui suit la &gt; distribution T. Si tails = 2, <b>T_Dist_RT</b> est calculé comme T_DIST_RT = P(| X| &gt; x) = P(X &gt; x ou X &lt; -x). </para>
          <para>Étant donné que x 0 n’est pas autorisé, pour utiliser T_Dist_RT lorsque x 0, notez que &lt; <b></b> &lt; T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P(X &gt; -x) et T_DIST_2T(-x,df) = T_DIST_2T(x df) = P(| X| &gt;x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité : probabilité associée à la distribution T de Student.</param>
        <param name="Arg2">Deg_freedom - Nombre de degrés de liberté avec lesquels caractériser la distribution.</param>
        <summary>Renvoie, pour une probabilité donnée, la valeur inverse unilatérale à gauche d’une variable aléatoire suivant une loi T de Student.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si l’un des arguments n’est pas <b>numérique, T_Inv</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou &gt; probabilité 1, <b>T_Inv</b> renvoie la probabilité #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté n’est pas un entier, l’argument est tronqué.</para>
          <para>Si deg_freedom &lt; 1, <b>T_Inv</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probabilité : probabilité associée à la loi bilatérale T de Student.</param>
        <param name="Arg2">Degrés_liberté : nombre de degrés de liberté selon lesquels caractériser la distribution.</param>
        <summary>Renvoie la valeur d’une variable aléatoire suivant la loi T de Student, en fonction de la probabilité et du nombre de degrés de liberté.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si l’un des arguments n’est pas <b>numérique, T_Inv_2T</b> renvoie la #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou probabilité &gt; 1, <b>T_Inv_2T</b> renvoie la probabilité #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. Si degrés_liberté n’est pas un entier, il est tronqué. </para>
          <para>Si degrees_freedom &lt; 1, <b>T_Inv_2T</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>T_Inv_2T</b> renvoie cette valeur t, de telles que P(| X| t) = probabilité où X est une variable aléatoire qui suit la distribution T et &gt; P(| X| &gt; t) = P(X &lt; -t ou X &gt; t). </para>
          <para>Vous pouvez retourner une valeur T à un seul coup en remplaçant la probabilité par 2 *probabilité. Pour une probabilité de 0,05 et des degrés de liberté de 10, la valeur à deux points est calculée avec T_INV_2T(0,05,10), qui renvoie 2,28139.* La valeur à un point pour la même probabilité et les mêmes degrés de liberté peut être calculée avec T_INV_2T(2 0,05,10), qui renvoie 1,812462. </para>
          <para>
            <b>Remarque</b>: dans certains tableaux, la probabilité est décrite comme (1-p).</para>
          <para>Pour une probabilité donnée, <b>T_Inv_2T</b> recherche cette valeur x de telle T_DIST_RT(x, degrees_freedom, 2) = probabilité. Ainsi, la précision des <b>T_Inv_2T</b> dépend de la précision de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> . <b>T_Inv_2T</b> utilise une technique de recherche itérative. Si la recherche n’a rien donné après 100 itérations, la fonction renvoie la valeur d’erreur #N/A.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrice 1 : premier ensemble de données.</param>
        <param name="Arg2">Matrice 2 : deuxième ensemble de données.</param>
        <param name="Arg3">Uni/bilatéral : indique le type de distribution à renvoyer. Si tails = 1, <b>T_Test</b> utilise la distribution à un seul effet. Si tails = 2, <b>T_Test</b> utilise la distribution à deux points.</param>
        <param name="Arg4">Type : type de test T à effectuer.</param>
        <summary>Renvoie la probabilité associée à un test T de Student. Utilisez la fonction T_TEST pour déterminer si deux échantillons sont susceptibles de provenir des deux mêmes populations sous-jacentes ayant la même moyenne.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si array1 et array2 ont un nombre différent de points de données et que le type = 1 (couplé), <b>T_Test</b> renvoie la valeur d’erreur #N/A. </para>
          <para>Les arguments tails et type sont tronqués de manière à utiliser des entiers.</para>
          <para>Si tails ou type n’est pas numérique, <b>T_Test</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si tails est une valeur autre que 1 ou 2, <b>T_Test</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>T_Test</b> utilise les données de array1 et array2 pour calculer une statistique T non négative. Si tails=1, <b>T_Test</b> renvoie la probabilité d’une valeur supérieure de la statistique T sous l’hypothèse que matrice1 et matrice2 sont des échantillons de populations avec la même moyenne. La valeur renvoyée par <b>T_Test</b> lorsque tails=2 est double et renvoyée lorsque tails=1 et correspond à la probabilité d’une valeur absolue supérieure de la statistique T selon l’hypothèse des « mêmes moyens de population ».</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number - tout nombre réel.</param>
        <summary>Renvoie la tangente hyperbolique d'un nombre.</summary>
        <returns>To be added.</returns>
        <remarks><para>La formule pour la tangente hyperbolique est la suivante :</para>
          <para>Figure 1 : Formule de la tangente hyperbolique</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement d'un bon du Trésor. La date de règlement des titres après la date d'émission, lorsque le bon du Trésor est remis à l'acheteur.</param>
        <param name="Arg2">Echéance - date d'échéance du bon du Trésor. La date d'échéance est la date à laquelle le bon du Trésor arrive à expiration.</param>
        <param name="Arg3">ImportantDates doit être entré à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si les dates sont saisies en tant que texte. Remise : taux d’escompte du bon du Trésor.</param>
        <summary>Renvoie le rapport lié aux titres pour un bon du Trésor.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Les dates de règlement et d'échéance sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>TBillEq</b> renvoie le #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la remise ≤ 0, <b>TBillEq renvoie</b> la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si l’échéance du règlement ou l’échéance est plus d’un an après le &gt; règlement, <b>TBillEq</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>TBillEq</b> est calculé comme TBILLEQ = (taux 365 x)/(360-(taux x DSM)), où DSM est le nombre de jours entre le règlement et l’échéance calculés en fonction de la base de 360 jours par an.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement d'un bon du Trésor. La date de règlement des titres après la date d'émission, lorsque le bon du Trésor est remis à l'acheteur.</param>
        <param name="Arg2">Echéance - date d'échéance du bon du Trésor. La date d'échéance est la date à laquelle le bon du Trésor arrive à expiration.</param>
        <param name="Arg3">Escompte - date d'escompte du bon du Trésor.</param>
        <summary>Renvoie le prix par valeur faciale de 100 dollars pour un bon du Trésor.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</para>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Les dates de règlement et d'échéance sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>TBillPrice</b> renvoie le #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la remise ≤ 0, <b>TBillPrice</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si l’échéance du règlement, ou si l’échéance est plus d’un an après le &gt; règlement, <b>TBillPrice</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>TBillPrice est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode TBillPrice</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>DSM = nombre de jours entre le règlement et l’échéance, à l’exclusion de toute date d’échéance qui est plus d’une année civile après la date d’règlement.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement d'un bon du Trésor. La date de règlement des titres après la date d'émission, lorsque le bon du Trésor est remis à l'acheteur.</param>
        <param name="Arg2">Echéance - date d'échéance du bon du Trésor. La date d'échéance est la date à laquelle le bon du Trésor arrive à expiration.</param>
        <param name="Arg3">Pr - prix du bon du Trésor par valeur faciale de 100 dollars.</param>
        <summary>Renvoie le rapport pour un bon du Trésor.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</para>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Les dates de règlement et d'échéance sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>TBillYield</b> renvoie le #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si pr ≤ 0, <b>TBillYield</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, ou si l’échéance est plus d’un an après le règlement, <b>TBillYield</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>TBillYield est</b> calculé comme suit : </para>
          <para>Figure 1 : Équation de la méthode TBillYield</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>DSM = nombre de jours entre le règlement et l’échéance, à l’exclusion de toute date d’échéance qui est plus d’une année civile après la date d’règlement.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - valeur numérique à laquelle évaluer la distribution.</param>
        <param name="Arg2">Degrees_freedom - entier indiquant le nombre de degrés de liberté.</param>
        <param name="Arg3">Tails - spécifie le nombre de points de distribution à renvoyer. Si = 1, la fonction TDIST renvoie la distribution à un point. Si tails = 2, la fonction TDIST renvoie la distribution à deux points.</param>
        <summary>Renvoie les points de pourcentage (probabilité) pour la distribution T de l’étudiant, où une valeur numérique (x) est une valeur calculée de T pour laquelle les points de pourcentage doivent être calculés. La distribution T est utilisée dans le test des hypothèses sur des ensembles de données à échantillons réduits. Utilisez cette fonction à la place d’un tableau de valeurs essentielles pour la distribution T.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> les méthodes et les nouvelles <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> fonctions.</para>
          <para>Si un argument n’est pas unnumérique, <b>TDist</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrees_freedom &lt; 1, <b>TDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Les arguments degrés_liberté et uni/bilatéral sont tronqués de manière à utiliser des entiers.</para>
          <para>Si tails est une valeur autre que 1 ou 2, <b>TDist</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>TDist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si tails = 1, <b>TDist</b> est calculé comme TDIST = P( X x ), où X est une variable aléatoire qui suit la &gt; distribution T. Si tails = 2, <b>TDist</b> est calculé comme TDIST = P(| X| &gt; x) = P(X &gt; x ou X &lt; -x). </para>
          <para>Étant donné que x 0 n’est pas autorisé, pour utiliser &lt; <b>TDist</b> lorsque x 0, notez que &lt; TDIST(-x,df,1) = 1 – TDIST(x,df,1) = P(X &gt; -x) et TDIST(-x,df,2) = TDIST(x df,2) = P(| X| &gt; x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Valeur numérique, formule dont le résultat est une valeur numérique, ou référence à une cellule contenant une valeur numérique.</param>
        <param name="Arg2">Format de nombre sous forme de texte défini dans la zone Catégorie de l'onglet Nombre de la boîte de dialogue Format de cellule.</param>
        <summary>Cette méthode convertit une valeur en texte selon un format de nombre spécifique.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Réservé à un usage interne.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Probability - probabilité associée à la distribution T à deux points de l’étudiant.</param>
        <param name="Arg2">Degrees_freedom - nombre de degrés de liberté selon lesquels caractériser la distribution.</param>
        <summary>Renvoie la valeur t de la distribution t d’un étudiant sous forme de fonction de probabilité et de degrés de liberté.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur les nouvelles fonctions, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> fonctions.</para>
          <para>Si l’un des arguments n’est pas unnumérique, <b>TInv</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si probabilité &lt; 0 ou probabilité &gt; 1, <b>TInv</b> renvoie la probabilité #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si degrés_liberté n’est pas un entier, il est tronqué.</para>
          <para>Si degrees_freedom &lt; 1, <b>TInv</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>TInv renvoie</b> cette valeur t, telle que P(| X| t) = probabilité où X est une variable aléatoire qui suit la distribution T et &gt; P(| X| &gt; t) = P(X &lt; -t ou X &gt; t). </para>
          <para>Vous pouvez retourner une valeur T à un seul coup en remplaçant la probabilité par 2 *probabilité. Pour une probabilité de 0,05 et des degrés de liberté de 10, la valeur à deux points est calculée avec tinv(0,05,10), qui renvoie 2,28139.* La valeur à un point pour la même probabilité et les mêmes degrés de liberté peut être calculée avec tinv(2 0,05,10), qui renvoie 1,812462. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - tableau ou plage de cellules d'une feuille de calcul, que vous souhaitez transposer. La transposition d'un tableau est créée à l'aide de la première colonne du nouveau tableau, la seconde ligne du tableau comme la seconde colonne du nouveau tableau, et ainsi de suite.</param>
        <summary>Renvoie une plage de cellules verticales sous forme de plage horizontale, ou inversement. La fonction TRANSPOSE doit être saisie sous forme de formule de tableau dans une plage possédant respectivement le même nombre de lignes et de colonnes qu'un tableau ne possède de colonnes et de lignes. Utilisez la fonction TRANSPOSE pour inverser l'orientation verticale et horizontale d'une feuille de calcul.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">y_connus - ensemble de valeurs y que vous connaissez dans la relation y = mx + b.</param>
        <param name="Arg2">x_connus - ensemble de valeurs x facultatives que vous connaissez peut-être déjà dans la relation y = mx + b.</param>
        <param name="Arg3">New_x's - nouvelles valeurs x pour lesquelles vous souhaitez que la fonction TREND renvoie les valeurs y correspondantes.</param>
        <param name="Arg4">Const - valeur logique indiquant si la constante b doit être forcée pour être égale à 0.</param>
        <summary>Renvoie les valeurs avec la tendance linéaire. Adapte une droite (à l'aide de la méthode des moindres carrés) dans les tableaux known_y's et known_x's. Renvoie les valeurs y avec cette droite pour le tableau new_x's spécifié.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si la matrice y_connus comporte une seule colonne, chaque colonne de x_connus est interprétée comme une variable distincte.</para>
          <para>Si la matrice y_connus comporte une seule ligne, chaque ligne de x_connus est interprétée comme une variable distincte.</para>
          <para>La matrice x_connus peut inclure un ou plusieurs ensembles de variables. Si une seule variable est utilisée, les matrices y_connus et x_connus peuvent être des plages de valeurs de toute forme, tant que leurs dimensions sont égales. Si plusieurs variables sont utilisées, la matrice y_connus doit être un vecteur (c'est-à-dire, une plage de valeurs avec une hauteur d'une ligne ou une largeur d'une colonne).</para>
          <para>Si la matrice x_connus est omise, c'est la matrice {1,2,3,...} qui est supposée avoir la même taille que la matrice y_connus.</para>
          <para>
				Le tableau known_x's doit inclure une colonne (ou une ligne) pour chaque variable indépendante, comme pour le tableau known_x's. Ainsi, si le tableau known_y's comporte une seule colonne, les tableaux known_x's et new_x's doit comporter le même nombre de colonnes. Si le tableau known_y's comporte une seule ligne, les tableaux known_x's et known_y's doivent comporter le même nombre de lignes.
</para>
          <para>Si le tableau new_x's est omis, il est considéré comme étant identique au tableau known_x's.</para>
          <para>Si les deux tableaux known_x's et new_x's sont omis, ils sont considérés comme étant le tableau {1,2,3,...} qui est de la même taille que le tableau known_y's.</para>
          <para>Si const est <b>true</b> ou omis, b est calculé normalement. </para>
          <para>Si const est <b>false,</b>b est égal à 0 (zéro) et les valeurs m sont ajustées de sorte que y = mx. </para>
          <para>Pour plus d’informations sur Microsoft Excel’une ligne aux données, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Vous pouvez utiliser <b>trend pour</b> l’ajustement de courbe polynomielle en faisant une régression par rapport à la même variable élevée à différentes puissances. Par exemple, imaginez que la colonne A contient des valeurs y et la colonne B des valeurs x. Vous pouvez entrer x^2 dans la colonne C, x^3 dans la colonne D, et ainsi de suite, puis effectuer une régression sur les colonnes B à D contre la colonne A. </para>
          <para>Les formules qui renvoient des tableaux doivent être saisies sous forme de formules de tableau.</para>
          <para>Lorsque vous entrez une constante de tableau pour un argument comme known_x's, utilisez des virgules pour séparer les valeurs sur la même ligne et des points-virgules pour séparer les lignes.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - texte dans lequel vous souhaitez que les espaces soient supprimés.</param>
        <summary>Supprime tous les espaces du texte à l'exception des espaces simples entre les mots. Utilisez la fonction TRIM dans le texte que vous avez reçu d'une autre application qui peut utiliser un espacement irrégulier.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: la <b>fonction Trim a</b> été conçue pour découper le caractère d’espace ASCII 7 bits (valeur 32) du texte. Dans le jeu de caractères Unicode, il existe un caractère d'espace supplémentaire appelé espace insécable, dont la valeur décimale est 160. Ce caractère est couramment utilisé dans les pages Web en tant qu’entité HTML, <b> &amp; nbsp;</b>. En soi, la <b>fonction Trim</b> ne supprime pas ce caractère d’espace insérable.</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - tableau ou plage de valeurs de suppression et de moyenne.</param>
        <param name="Arg2">Percent - nombre fractionnel de points de données à exclure du calcul. Par exemple, si percent = 0,2, 4 points sont supprimés d'un ensemble de données de 20 points (20 x 0,2) : 2 en haut de l'ensemble et 2 en bas de l'ensemble.</param>
        <summary>Renvoie la moyenne de l'intérieur d'un ensemble de données. La fonction TRIMMEAN calcule la moyenne obtenue en excluant un pourcentage de points de données en partant des points inférieurs et supérieurs d'un ensemble de données. Vous pouvez utiliser cette fonction lorsque vous souhaitez exclure des données générales de l'analyse.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le &lt; pourcentage est 0 ou &gt; 1, <b>TrimMean</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>TrimMean arrondit</b> le nombre de points de données exclus au multiple le plus proche de 2. Si percent = 0,1, 10 % de 30 points de données donne 3 points. Pour la symétrie, <b>TrimMean</b> exclut une valeur unique du haut et du bas du jeu de données.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 - premier ensemble de données.</param>
        <param name="Arg2">Array2 - second ensemble de données.</param>
        <param name="Arg3">Tails - spécifie le nombre de points de distribution. Si le point = 1, la fonction TTEST utilise la distribution à un point. Si les points = 2, la fonction TTEST utilise la distribution à deux points.</param>
        <param name="Arg4">Type - type de test T à effectuer.</param>
        <summary>Renvoie la probabilité associée à un test T d’étudiant. Utilisez la fonction TTEST pour déterminer si deux échantillons sont susceptibles de provenir des deux mêmes populations sous-jacentes ayant la même moyenne.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> méthode.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Couplé</description>
            </item>
            <item>
              <term>2</term>
              <description>Écart égal à deux échantillons (homoscédastique)</description>
            </item>
            <item>
              <term>3</term>
              <description>Écart inégal à deux échantillons (hétéroscédastique)</description>
            </item>
          </list>
          <para>Si matrice1 et matrice2 ont un nombre différent de points de données et le type = 1 (couplé), <b>TTest</b> renvoie la valeur d’erreur #N/A. </para>
          <para>Les arguments tails et type sont tronqués de manière à utiliser des entiers.</para>
          <para>Si tails ou type n’est pas unnumérique, <b>TTest</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si tails est une valeur autre que 1 ou 2, <b>TTest</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>
            <b>TTest</b> utilise les données de array1 et array2 pour calculer une statistique T non négative. Si tails=1, <b>le test TTest</b> renvoie la probabilité d’une valeur supérieure de la statistique T, selon l’hypothèse que matrice1 et matrice2 sont des échantillons de population avec la même moyenne. La valeur renvoyée par <b>TTest</b> lorsque tails=2 est le double renvoyé lorsque tails=1 et correspond à la probabilité d’une valeur absolue supérieure de la statistique T selon l’hypothèse « les mêmes moyens de population ».</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Numéro Unicode représentant un caractère.</param>
        <summary>Renvoie le caractère Unicode référencé par la valeur numérique donnée.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Caractère dont vous souhaitez avoir la valeur Unicode.</param>
        <summary>Renvoie le numéro (point de code) correspondant au premier caractère du texte.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Référence à une cellule contenant un nombre ou une formule qui donne un nombre.</param>
        <param name="Arg2">Nombre de décimales. Si Arg2 est négatif, le nombre est arrondi à la portion située à gauche du séparateur décimal. Si vous omettez les décimales, la valeur par défaut est 2.</param>
        <summary>Cette méthode convertit un nombre au format texte et applique un symbole de devise. Le nom de la méthode (et le symbole qu’elle applique) dépend des paramètres de langue.
</summary>
        <returns>To be added.</returns>
        <remarks><para>La <b>méthode USDollar</b> convertit un nombre en texte au format monétaire, avec les décimales arrondies à l’endroit spécifié. Le format utilisé est $#,##0.00_);($#,##0.00).</para>
          <para>La principale différence entre la mise en forme d’une cellule contenant un nombre à l’aide de la commande Format de cellule et la mise en forme d’un nombre directement avec la méthode est que son résultat est <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> converti en texte. Un nombre mis en forme avec la commande Format Cells reste un nombre. Vous pouvez continuer à utiliser des nombres formatés dans des formules, car Excel convertit les nombres entrés en tant que valeurs de texte en nombres lorsqu’il <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> calcule.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2, ... : 1 à 30 arguments nombre correspondant à un échantillon d’une population.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Fournit une estimation de l’écart à partir d’un échantillon.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b> suppose que ses arguments sont un échantillon de la population. Si vos données représentent la population entière, calculez la variance à l’aide de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous entrez directement dans la liste d’arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>
            <b>Var</b> utilise la formule suivante : </para>
          <para>Figure 1 : Équation de la méthode Var</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne de l’échantillon AVERAGE(number1,number2,...) et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2, ... : 1 à 30 arguments nombre correspondant à une population.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcule l’écart en fonction de la population entière.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b> suppose que ses arguments sont la population entière. Si vos données représentent un échantillon de la population, calculez l’écart à l’aide de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous entrez directement dans la liste d’arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>L’équation de <b>Var_P</b> est la suivante : </para>
          <para>Figure 1 : Équation de la méthode Var_P de données</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne de l’échantillon AVERAGE(number1,number2,...) et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2, ... : 1 à 30 arguments nombre correspondant à un échantillon d’une population.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Fournit une estimation de l’écart à partir d’un échantillon.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b> suppose que ses arguments sont un échantillon de la population. Si vos données représentent la population entière, calculez la variance à l’aide de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous saisissez directement dans la liste des arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>
            <b>Var_S</b> utilise la formule suivante : </para>
          <para>Figure 1 : Équation de la méthode Var_S de données</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne de l’échantillon AVERAGE(number1,number2,...) et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nombre1, nombre2, ... : 1 à 30 arguments nombre correspondant à une population.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Calcule l’écart en fonction de la population entière.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> méthode.</para>
          <para>
            <b>VarP</b> suppose que ses arguments sont la population entière. Si vos données représentent un échantillon de la population, calculez l’écart à l’aide de <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Les arguments peuvent être des nombres ou des noms, des tableaux ou des références contenant des nombres.</para>
          <para>Les valeurs logiques et les représentations textuelles des nombres que vous entrez directement dans la liste d’arguments sont prises en compte.</para>
          <para>Si un argument est un tableau de référence, seuls les nombres dans ce tableau ou cette référence sont pris en compte. Les cellules vides, les valeurs logiques, le texte ou les valeurs d'erreur dans le tableau ou la référence sont ignorés.</para>
          <para>Les arguments qui comportent des valeurs d'erreur ou du texte qui ne peuvent pas être convertis en nombres génèrent des erreurs.</para>
          <para>L’équation <b>de VarP</b> est la suivante : </para>
          <para>Figure 1 : Équation de la méthode VarP</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne de l’échantillon AVERAGE(number1,number2,...) et n la taille de l’échantillon.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Coût - coût initial de l'immobilisation.</param>
        <param name="Arg2">Récupération, la valeur au terme de l'amortissement (parfois appelée valeur de récupération). Cette valeur peut être égale à 0.</param>
        <param name="Arg3">Durée de vie - nombre de périodes d'amortissement de l'immobilisation (parfois appelée durée de vie utile de l'immobilisation).</param>
        <param name="Arg4">Start_period - période de début pour laquelle vous souhaitez calculer l'amortissement. Start_period doit utiliser les même unités que la durée de vie.</param>
        <param name="Arg5">End_period - période de fin pour laquelle vous souhaitez calculer l'amortissement. End_period doit utiliser les même unités que la durée de vie.</param>
        <param name="Arg6">Facteur, le taux auquel l'amortissement décline. Si le facteur est omis, il est considéré comme étant égal à 2 (méthode d'amortissement décroissant à taux double). Modifiez le facteur si vous ne souhaitez pas utiliser la méthode d'amortissement décroissant à taux double. Pour obtenir une description de la méthode d’équilibrage de la baisse à taux double, voir <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" /> .</param>
        <param name="Arg7">No_switch - valeur logique spécifiant si vous basculez en amortissement linéaire lorsque l'amortissement est supérieur au calcul de l'amortissement décroissant.</param>
        <summary>Renvoie l'amortissement d'une immobilisation pour une période spécifiée, incluant des périodes partielles, utilisant la méthode d'amortissement décroissant à taux double ou une autre méthode spécifiée. VDB désigne l'amortissement décroissant variable.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si no_switch est <b>vrai,</b>Microsoft Excel ne passe pas à l’amortissement linéaire même si l’amortissement est supérieur au calcul de l’amortissement dégressant. </para>
          <para>Si no_switch est <b>faux</b> ou omis, Excel passe à l’amortissement linéaire lorsque l’amortissement est supérieur au calcul de l’amortissement décroissement.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value - valeur à rechercher dans la première colonne du tableau. Lookup_value peut être une valeur ou une référence. Si lookup_value est inférieur à la plus petite valeur dans la première colonne de table_array, la fonction VLOOKUP renvoie la valeur d'erreur #N/A.</param>
        <param name="Arg2">Table_array - deux ou plusieurs colonnes de données. Utilisez une référence à une plage ou à un nom de plage. Les valeurs dans la première colonne de table_array sont les valeurs recherchées par lookup_value. Ces valeurs peuvent être du texte, des nombres ou des valeurs logiques. Le texte en majuscules et le texte en minuscules sont équivalents.</param>
        <param name="Arg3">Col_index_num - numéro de colonne dans table_array à partir de laquelle la valeur correspondante doit être renvoyée. La valeur col_index_num 1 renvoie la valeur dans la première colonne de table_array. La valeur col_index_num 2 renvoie la valeur dans la seconde colonne de table_array, et ainsi de suite.</param>
        <param name="Arg4">Range_lookup - valeur logique qui spécifie si vous souhaitez que la méthode trouve une correspondance exacte ou <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> approximative :</param>
        <summary>Recherche une valeur dans la première colonne d'un tableau et renvoie une valeur dans la même ligne dans une autre colonne du tableau.</summary>
        <returns>To be added.</returns>
        <remarks><para>Le V de la méthode <b>VLookup</b> désigne l’aspect vertical. Utilisez la <b>méthode VLookup</b> au lieu de la méthode lorsque vos valeurs de comparaison sont situées dans une colonne à gauche des données <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> que vous souhaitez trouver.</para>
          <para>Si Col_index_num est inférieur à 1, la méthode <b>VLookup</b> génère une erreur.</para>
          <para>Si Col_index_num est supérieur au nombre de colonnes dans table_array, la méthode <b>VLookup</b> génère une erreur.</para>
          <para>Si Range_lookup est <b>vrai</b> ou omis, une correspondance exacte ou approximative est renvoyée. En d’autres termes, si une correspondance exacte est introuvable, la plus grande valeur inférieure à lookup_value est renvoyée. </para>
          <para>Les valeurs dans la première colonne de table_array doivent être placées en ordre croissant ; sinon, la méthode<b>VLookup</b> peut ne pas donner la valeur correcte.</para>
          <para>Si Range_lookup est <b>false,</b>la <b>méthode VLookup</b> trouve uniquement une correspondance exacte. Dans ce cas, les valeurs dans la première colonne de table_array n'ont pas besoin d'être triées. Si deux ou plusieurs valeurs dans la première colonne de table_array correspondent à lookup_value, la première valeur trouvée est utilisée. Si aucune correspondance exacte n'est trouvée, une erreur est générée.</para>
          <para>Lors de la recherche de valeurs de texte dans la première colonne de table_array, assurez-vous que les données de la première colonne de table_array ne sont pas des espaces de début, des espaces de fin, une utilisation incohérente des guillemets droits ( ' ou « ) et curly ( ' ou « ) ou des caractères non imprimants. Dans ce cas, la <b>méthode VLookup</b> peut donner une valeur incorrecte ou inattendue. Pour plus d’informations sur la façon de nettoyer ou de découper des <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> valeurs, voir les méthodes et les <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> méthodes. Lorsque vous recherchez des valeurs numériques ou des valeurs de date, assurez-vous que les données de la première colonne de table_array ne sont pas stockées sous forme de valeurs de texte. Dans ce cas, la méthode <b>VLookup</b> peut fournir une valeur incorrecte ou inattendue.. </para>
          <para>Si range_lookup est <b>false</b> et lookup_value texte, vous pouvez utiliser les caractères génériques, le point d’interrogation (?) et l’astérisque (*), dans lookup_value. Un point d'interrogation correspond à un caractère unique, un astérisque à une séquence de caractères. Si vous souhaitez rechercher un point d'interrogation ou un astérisque, entrez un tilde (~) avant le caractère.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">URL du service web vers qui effectuer la requête HTTP GET.</param>
        <summary>Fonction sous-jacente qui appelle le service web de manière asynchrone, à l’aide d’une requête HTTP GET, et renvoie la réponse.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_number - numéro séquentiel qui représente la date du jour que vous recherchez. Les dates doivent être saisies à l'aide de la fonction DATE, ou être le résultat d'autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</param>
        <param name="Arg2">Return_type - numéro qui détermine le type de valeur de retour.</param>
        <summary>Renvoie le jour de la semaine correspondant à une date. Le jour est indiqué sous forme d'entier, allant de 1 (dimanche) à 7 (samedi), par défaut.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 ou non spécifiée</term>
              <description>Numéros 1 (dimanche) à 7 (samedi). Se comporte comme les versions précédentes de Microsoft Excel.</description>
            </item>
            <item>
              <term>2</term>
              <description>Numéros 1 (lundi) à 7 (dimanche).</description>
            </item>
            <item>
              <term>3</term>
              <description>Numéros 0 (lundi) à 6 (dimanche).</description>
            </item>
            <item>
              <term>11</term>
              <description>Numéros 1 (lundi) à 7 (dimanche).</description>
            </item>
            <item>
              <term>12 </term>
              <description>Numéros 1 (mardi) à 7 (lundi).</description>
            </item>
            <item>
              <term>13</term>
              <description>Numéros 1 (mercredi) à 7 (mardi).</description>
            </item>
            <item>
              <term>14 </term>
              <description>Numéros 1 (jeudi) à 7 (mercredi).</description>
            </item>
            <item>
              <term>15</term>
              <description>Numéros 1 (vendredi) à 7 (jeudi).</description>
            </item>
            <item>
              <term>16 </term>
              <description>Numéros 1 (samedi) à 7 (vendredi).</description>
            </item>
            <item>
              <term>17 </term>
              <description>Numéros 1 (dimanche) à 7 (samedi).</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_num - une date dans la semaine. Les dates doivent être saisies à l'aide de la fonction DATE, ou être le résultat d'autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</param>
        <param name="Arg2">Return_type - nombre qui détermine le premier jour de la semaine. La valeur par défaut est 1.</param>
        <summary>Renvoie un nombre qui indique où se situe la semaine, du point de vue numérique, dans une année.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: la <b>fonction WeekNum</b> considère que la semaine contenant le 1er janvier est la première semaine de l’année. Cependant, il existe une norme européenne qui définit que la première semaine est celle comportant une majorité de jours (quatre jours ou plus) dans la nouvelle année. Cela signifie que pour les années au cours des lesquelles il y a trois jours ou moins dans la première semaine de janvier, la fonction <b>WeekNum</b> renvoie des numéros de semaine incorrects conformément à la norme européenne.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Semaine commençant le dimanche. Les jours de la semaine sont numérotés de 1 à 7.</description>
            </item>
            <item>
              <term>2</term>
              <description>Semaine commençant le lundi. Les jours de la semaine sont numérotés de 1 à 7.</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X, la valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">Alpha : paramètre de la distribution.</param>
        <param name="Arg3">Bêta : paramètre de la distribution.</param>
        <param name="Arg4">Cumulative - détermine la forme de la fonction.</param>
        <summary>Renvoie la distribution de Weibull. Utilisez cette distribution pour l’analyse de la fiabilité, comme pour calculer le temps moyen de défaillance d’un appareil.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> méthode.</para>
          <para>Si x, alpha ou bêta n’est pas unnumérique, <b>Weibull</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. Si x &lt; 0, <b>Weibull renvoie</b> le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si alpha ≤ 0 ou si bêta ≤ 0, <b>Weibull</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation pour la fonction de distribution cumulative de Weibull est la suivante : 

 </para>
          <para>Figure 1 : Équation de la distribution cumulative Weibull</para>
          <para> </para>
          <para> </para>
          <para>L’équation pour la fonction de densité de probabilité de Weibull est la suivante : 

</para>
          <para>Figure 2 : Équation de la densité de probabilité Weibull</para>
          <para> </para>
          <para> </para>
          <para>Lorsque alpha = 1, <b>Weibull</b> renvoie la distribution exponentielle avec :</para>
          <para>Figure 3 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X : valeur à laquelle évaluer la fonction.</param>
        <param name="Arg2">Alpha : paramètre de la distribution.</param>
        <param name="Arg3">Bêta : paramètre de la distribution.</param>
        <param name="Arg4">Cumulative : détermine la forme de la fonction.</param>
        <summary>Renvoie la probabilité d’une variable aléatoire suivant une loi Weibull. Utilisez cette distribution dans une analyse de fiabilité telle que le calcul du temps moyen de fonctionnement sans panne d’un appareil.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si x, alpha ou bêta n’est pas <b>numérique,</b> Weibull_Dist renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si x &lt; 0, <b>Weibull_Dist</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si alpha ≤ 0 ou si bêta ≤ 0, <b>Weibull_Dist</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>L’équation pour la fonction de distribution cumulative de Weibull est la suivante : 

 </para>
          <para>Figure 1 : Équation de la distribution cumulative Weibull</para>
          <para> </para>
          <para> </para>
          <para>L’équation pour la fonction de densité de probabilité de Weibull est la suivante : 

</para>
          <para>Figure 2 : Équation de la densité de probabilité Weibull</para>
          <para> </para>
          <para> </para>
          <para>Lorsque alpha = 1, <b>Weibull_Dist</b> renvoie la distribution exponentielle avec :</para>
          <para>Figure 3 : Équation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - date représentant la date de début.</param>
        <param name="Arg2">Days - nombre de jours hors week-end et hors jours de congé avant ou après start_date. Une valeur positive pour les jours donne lieu à une date future, une valeur négative donne lieu à une date passée.</param>
        <param name="Arg3">Congés - liste facultative d'une ou de plusieurs dates à exclure du calendrier des jours ouvrés, comme les jours fériés et les ponts. La liste peut être une plage de cellules contenant les dates ou une constante de tableau des numéros de série qui représentent les dates.</param>
        <summary>Renvoie un nombre représentant une date qui est le nombre de jours ouvrés indiqué avant ou après une date (date de début). Les jours ouvrés excluent les week-ends et les jours de congés. Utilisez la fonction WORKDAY pour exclure les week-ends et les jours de congés lorsque vous calculez les dates d'échéance des factures, les heures de livraison attendues ou le nombre de jours ouvrés effectués.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si les dates sont entrées comme du texte.</para>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Si un argument n’est pas une date valide, <b>WorkDay</b> renvoie la date #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si start_date jours plus donne une date non valide, <b>WorkDay</b> renvoie la date #NUM! Valeur d'erreur. </para>
          <para>Si days n'est pas un entier, la valeur est tronquée.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - Date de début, tronquée en un integer.</param>
        <param name="Arg2">Jours : nombre de jours ouv la journée de travail avant ou après la start_date. Une valeur positive produit une date postérieure et une valeur négative une date antérieure ; une valeur 0 (zéro) produit la date de début. Le décalage de jours est arrondi à l’entier.</param>
        <param name="Arg3">Week-end : indique les jours de la semaine qui sont des jours de week-end et qui ne sont pas considérés comme des jours ou travaillés. Week-end est un numéro de week-end ou une chaîne qui indique la date des week-ends.</param>
        <param name="Arg4">Jours fériés : ensemble facultatif d’une ou de plusieurs dates à exclure du calendrier des jours oués. Les jours fériés représentent une plage de cellules contenant des dates ou une constante de matrice des valeurs sérielles qui représentent ces dates. Le classement des dates ou des valeurs sérielles des jours fériés peut être arbitraire.</param>
        <summary>Renvoie le numéro de série d’une date située un nombre de jours ouvrés avant ou après une date donnée avec des paramètres de week-end personnalisés. Les paramètres de week-end indiquent les jours de la semaine correspondant au week-end et leur nombre. Les jours correspondant au week-end et tous les jours spécifiés en tant que jours fériés ne sont pas considérés comme des jours ouvrés.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si start_date est hors de portée de la valeur de base de la date actuelle, <b>WorkDay_Intl</b> renvoie la valeur #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si une date dans les congés est en dehors de la plage de la valeur de base de la date actuelle, <b>WorkDay_Intl</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si start_date plus décalage de jour produit une date non valide, <b>WorkDay_Intl</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si une chaîne de week-end n’est pas valide ou contient des caractères <b>non valides, WorkDay_Intl</b> renvoie la #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Values - série de flux de trésorerie correspondant à un programme de paiements en terme de dates. Le premier paiement est facultatif et correspond à un coût ou à un paiement qui a lieu au début de l'investissement. Si la première valeur est un coût ou un paiement, elle doit être négative. Tous les paiements suivants sont escomptés sur la base d'une année comptant 365 jours. La série de valeurs doit contenir au moins une valeur positive et une valeur négative.</param>
        <param name="Arg2">Dates - programme de dates de paiement correspondant aux paiements de flux de trésorerie. La première date de paiement indique le début du programme de paiements. Toutes les autres dates doivent être postérieures à cette date, mais elles peuvent avoir lieu dans n'importe quel ordre. Les dates doivent être saisies manuellement à l'aide de la fonction DATE ou être le résultat d'autres formules ou fonctions. Par exemple, utilisez la fonction DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent survenir si des dates sont saisies sous forme de texte.</param>
        <param name="Arg3">Guess - nombre qui est proche du résultat de <b>Xirr</b>.</param>
        <summary>Renvoie le taux de retour interne pour un programme de flux de trésorerie qui n'est pas forcément périodique. Pour calculer le taux de retour interne d'une série de flux de trésorerie périodiques, utilisez la fonction IRR.</summary>
        <returns>To be added.</returns>
        <remarks><para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Les nombres dans les dates sont tronqués de manière à utiliser des entiers.</para>
          <para>
            <b>Xirr attend</b> au moins un flux de trésorerie positif et un flux de trésorerie négatif . Sinon, <b>Xirr</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si un nombre de dates n’est pas une date valide, <b>Xirr</b> renvoie la date #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si un nombre dans les dates précède la date de début, <b>Xirr</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si les valeurs et les dates contiennent un nombre différent de valeurs, <b>Xirr</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Dans la plupart des cas, vous n’avez pas besoin de fournir une estimation pour le calcul <b>Xirr.</b> Si l'estimation est omise, elle est considérée comme étant égale à 0,1 (10 %). </para>
          <para>
            <b>Xirr</b> est étroitement lié à <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" /> la fonction de valeur nette actuelle. Le taux de retour calculé par <b>Xirr est</b> le taux d’intérêt correspondant à XNPV = 0. </para>
          <para>Excel utilise une technique itérative pour calculer <b>Xirr</b>. À l’aide d’un taux de changement (en commençant par une estimation), <b>Xirr</b> par cycles dans le calcul jusqu’à ce que le résultat soit précis dans 0,000001 pour cent. Si <b>Xirr</b> ne trouve pas de résultat qui fonctionne après 100 tentatives, le #NUM ! est renvoyée. Le taux est modifié jusqu’à : </para>
          <para>Figure 1 : Équation</para>
          <para> </para>
          <para> </para>
          <para>où :</para>
          <para>di = ith, ou dernière date de paiement.</para>
          <para>d1 = la 0ème date de paiement.</para>
          <para>Pi = ith, ou dernier paiement.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Une série de mouvements de trésorerie qui correspond à une planification de paiements à certaines dates. Le premier remboursement est facultatif et il correspond à un coût ou règlement qui se produit au début du placement.</param>
        <param name="Arg2">Planification des dates de paiement correspondant au calendrier des versements. La première date de paiement indique le début du programme de paiements. Toutes les autres dates doivent être postérieures à cette date, mais elles peuvent se situer dans n'importe quel ordre.
</param>
        <summary>Cette méthode renvoie la valeur actuelle nette d'une planification de flux financiers qui n'est pas nécessairement périodique.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: la <b>méthode Xnpv</b> ne fournit pas de paramètre qui correspond à l’argument de taux requis par la fonction XNPV correspondante (=XNPV(rate, values, dates)). Pour contourner cette limitation dans le code VBA, au lieu d’utiliser la méthode <b>Xpnv,</b> appelez la fonction XNPV à l’aide de la <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> méthode.</para>
          <para>Pour calculer la valeur actuelle nette d’une série de flux de trésorerie périodiques, utilisez la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> méthode.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg2">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg3">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg4">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg5">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg6">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg7">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg8">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg9">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg10">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg11">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg12">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg13">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg14">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg15">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg16">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg17">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg18">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg19">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg20">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg21">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg22">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg23">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg24">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg25">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg26">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg27">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg28">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg29">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <param name="Arg30">1 à 254 conditions que vous souhaitez tester qui peuvent être <b>TRUE</b> ou <b>FALSE</b> et qui peuvent être des valeurs logiques, des tableaux ou des références.</param>
        <summary>Renvoie un OU logique exclusif de tous les arguments.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - date représentant la date de début.</param>
        <param name="Arg2">End_date - date représentant la date de fin.</param>
        <param name="Arg3">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Calcule la fraction de l'année représentée par le nombre de jours entiers entre deux dates (start_date et end_date). Utilisez la fonction de feuille de calcul YEARFRAC pour identifier la proportion des profits ou des obligations d'une année entière à affecter à un terme spécifique.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>Tous les arguments sont tronqués de manière à utiliser des entiers.</para>
          <para>Si start_date ou end_date ne sont pas des dates valides, <b>YearFrac</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>YearFrac</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Pr, le prix du titre pour une valeur nominale de 100 $.</param>
        <param name="Arg4">Rachat - valeur de rachat du titre par valeur faciale de 100 dollars.</param>
        <param name="Arg5">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le rapport annuel pour un titre escompté.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement ou l’échéance n’est pas une date valide, <b>YieldDisc</b> renvoie le #VALUE ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si pr ≤ 0 ou si l’échange ≤ 0, <b>YieldDisc</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base est 0 ou la &gt; base 4, <b>YieldDisc</b> renvoie la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>YieldDisc</b> renvoie le #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Règlement - date de règlement du titre. La date de règlement du titre est la date, après la date d'émission, à laquelle le titre est remis à l'acheteur.</param>
        <param name="Arg2">Échéance - date d'échéance du titre. La date d'échéance est la date à laquelle le titre arrive à expiration.</param>
        <param name="Arg3">Émission - date d'émission du titre, exprimée sous forme de nombre en série.</param>
        <param name="Arg4">Taux - taux d'intérêt du titre à la date d'émission.</param>
        <param name="Arg5">Pr, le prix du titre pour une valeur nominale de 100 $.</param>
        <param name="Arg6">Base - type de base de nombre de jours à utiliser.</param>
        <summary>Renvoie le rapport annuel d'un titre pour lequel des intérêts sont payés à l'échéance.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: les dates doivent être entrées à l’aide de la fonction DATE ou en tant que résultats d’autres formules ou fonctions. Par exemple, utilisez DATE(2008,5,23) pour le 23 mai 2008. Des problèmes peuvent se produire si des dates sont saisies sous forme de texte.</para>
          <list type="table">
            <item>
              <term>0 ou non spécifiée</term>
              <description>Américain (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Réel/réel</description>
            </item>
            <item>
              <term>2</term>
              <description>Réel/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Réel/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Européen 30/360</description>
            </item>
          </list>
          <para>Microsoft Excel stocke les dates comme des numéros de série séquentiels pour pouvoir les utiliser dans des calculs. Par défaut, le 1er janvier 1900 est le numéro 1 et le 1er janvier 2008 est le numéro 39448 car il survient 39 448 jours après le 1er janvier 1900. Microsoft Excel pour Macintosh utilise un autre système de date par défaut.</para>
          <para>La date de règlement est la date à laquelle un acheteur acquiert un coupon (une obligation, par exemple). La date d'échéance est la date à laquelle un coupon arrive à expiration. Par exemple, imaginez qu'une obligation à 30 ans est émise le 1er janvier 2008 et est achetée six mois plus tard. La date d'émission est le 1er janvier 2008, la date de règlement est le 1er juillet 2008 et la date d'échéance est le 1er janvier 2038, soit 30 ans après la date d'émission.</para>
          <para>La date de règlement, la date d'échéance, la date d'émission et la base sont tronquées de manière à utiliser des entiers.</para>
          <para>Si le règlement, l’échéance ou l’émission n’est pas une date valide, <b>YieldMat</b> renvoie le #VALUE! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le &lt; taux est 0 ou si pr ≤ 0, <b>YieldMat</b> renvoie la #NUM ! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si la &lt; base 0 ou la base &gt; 4, <b>YieldMat renvoie</b> la #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!. </para>
          <para>Si le règlement ≥ échéance, <b>YieldMat</b> renvoie le #NUM! Autrement, la méthode INDEX renvoie la valeur d'erreur #REF!.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">L’argument Array est le tableau ou la plage de données servant à tester la moyenne de la population hypothétique.</param>
        <param name="Arg2">Valeur à tester.</param>
        <param name="Arg3">Sigma : écart-type (connu) de la population. Si cette valeur est omise, l’écart-type de l’échantillon est utilisé.</param>
        <summary>Renvoie la valeur de probabilité à un point d’un test z. Pour une moyenne de population hypothétique, la fonction Z_TEST renvoie la probabilité que la moyenne de l’échantillon soit supérieure à la moyenne des observations dans l’ensemble de données (matrice), à savoir la moyenne de l’échantillon observé.</summary>
        <returns>To be added.</returns>
        <remarks><para>Si le tableau est vide, <b>Z_Test</b> renvoie la valeur d#N/A. </para>
          <para>
            <b>Z_Test</b> est calculé comme suit lorsque sigma n’est pas omis : </para>
          <para>Figure 1 : Équation des Z_Test lorsque sigma n’est pas omis</para>
          <para> </para>
          <para> </para>
          <para>ou lorsque sigma est omis :</para>
          <para>Figure 2 : Équation de la Z_Test lorsque sigma est omis</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne d’échantillon AVERAGE(array) ; s est l’écart-type échantillon STDEV_S(matrice) ; et n est le nombre d’observations dans l’exemple COUNT(array).</para>
          <para>
            <b>Z_Test</b> représente la probabilité que la moyenne de l’échantillon soit supérieure à la valeur observée AVERAGE(array), lorsque la moyenne de population sous-jacente est μ0. À partir de la symétrie de la distribution normale, si AVERAGE(array) μ0, Z_Test retourne une valeur supérieure à &lt; 0,5. <b></b></para>
          <para>La formule Excel suivante peut être utilisée pour calculer la probabilité à deux points que la moyenne de l’échantillon se trouve plus loin de μ0 (dans les deux sens) que average(array), lorsque la moyenne de population sous-jacente est μ0 :</para>
          <para>=2 * MIN(Z_TEST(array,μ0,sigma), 1 - Z_TEST(array,μ0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">L’argument Array est le tableau ou la plage de données servant à tester la moyenne de la population hypothétique.</param>
        <param name="Arg2">Valeur à tester.</param>
        <param name="Arg3">Sigma - écart-type (connu) de la population. Si cette valeur est omise, l’écart-type de l’échantillon est utilisé.</param>
        <summary>Renvoie la valeur de probabilité à un point d’un test z. Pour une moyenne de population hypothétique, la fonction ZTEST renvoie la probabilité que la moyenne de l’échantillon soit supérieure à la moyenne des observations dans l’ensemble de données (tableau), à savoir la moyenne de l’échantillon observé.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Important</b>: cette fonction a été remplacée par une ou plusieurs nouvelles fonctions qui peuvent fournir une meilleure précision et dont les noms reflètent mieux leur utilisation. Cette fonction est toujours disponible pour assurer la compatibilité avec les versions antérieures d'Excel. Toutefois, si la compatibilité descendante n'est pas requise, vous devriez envisager d'utiliser les nouvelles fonctions à partir de maintenant, car elles décrivent plus précisément leur usage. Pour plus d’informations sur la nouvelle fonction, voir la <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> méthode.</para>
          <para>Si le tableau est vide, <b>ZTest</b> renvoie la valeur d#N/A. </para>
          <para>
            <b>ZTest</b> est calculé comme suit lorsque sigma n’est pas omis : </para>
          <para>Figure 1 : Équation de ZTest lorsque sigma n’est pas omis</para>
          <para> </para>
          <para> </para>
          <para>ou lorsque sigma est omis :</para>
          <para>Figure 2 : Équation de ZTest lorsque sigma est omis</para>
          <para> </para>
          <para> </para>
          <para>où x est la moyenne d’échantillon AVERAGE(array) ; s est l’écart-type de l’échantillon STDEV(matrice) ; et n est le nombre d’observations dans l’exemple COUNT(array).</para>
          <para>
            <b>ZTest</b> représente la probabilité que la moyenne de l’échantillon soit supérieure à la valeur observée AVERAGE(array), lorsque la moyenne de population sous-jacente est μ0. À partir de la symétrie de la distribution normale, si AVERAGE(array) μ0, ZTEST retourne une valeur supérieure &lt; à 0,5.</para>
          <para>La formule Excel suivante peut être utilisée pour calculer la probabilité à deux points que la moyenne de l’échantillon se trouve plus loin de μ0 (dans les deux sens) que AVERAGE(matrice), lorsque la moyenne de population sous-jacente est μ0:=2 * MIN(ZTEST(array,μ0,sigma), 1 - ZTEST(array,μ0,sigma)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>